/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.pipelines.io.avro;  
@SuppressWarnings("all")
/** A taxonomic record */
@org.apache.avro.specific.AvroGenerated
public class TaxonRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaxonRecord\",\"namespace\":\"org.gbif.pipelines.io.avro\",\"doc\":\"A taxonomic record\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The record id\"},{\"name\":\"synonym\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"usage\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"RankedName\",\"fields\":[{\"name\":\"key\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"rank\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"Rank\",\"symbols\":[\"DOMAIN\",\"SUPERKINGDOM\",\"KINGDOM\",\"SUBKINGDOM\",\"INFRAKINGDOM\",\"SUPERPHYLUM\",\"PHYLUM\",\"SUBPHYLUM\",\"INFRAPHYLUM\",\"SUPERCLASS\",\"CLASS\",\"SUBCLASS\",\"INFRACLASS\",\"PARVCLASS\",\"SUPERLEGION\",\"LEGION\",\"SUBLEGION\",\"INFRALEGION\",\"SUPERCOHORT\",\"COHORT\",\"SUBCOHORT\",\"INFRACOHORT\",\"MAGNORDER\",\"SUPERORDER\",\"GRANDORDER\",\"ORDER\",\"SUBORDER\",\"INFRAORDER\",\"PARVORDER\",\"SUPERFAMILY\",\"FAMILY\",\"SUBFAMILY\",\"INFRAFAMILY\",\"SUPERTRIBE\",\"TRIBE\",\"SUBTRIBE\",\"INFRATRIBE\",\"SUPRAGENERIC_NAME\",\"GENUS\",\"SUBGENUS\",\"INFRAGENUS\",\"SECTION\",\"SUBSECTION\",\"SERIES\",\"SUBSERIES\",\"INFRAGENERIC_NAME\",\"SPECIES_AGGREGATE\",\"SPECIES\",\"INFRASPECIFIC_NAME\",\"GREX\",\"SUBSPECIES\",\"CULTIVAR_GROUP\",\"CONVARIETY\",\"INFRASUBSPECIFIC_NAME\",\"PROLES\",\"RACE\",\"NATIO\",\"ABERRATION\",\"MORPH\",\"VARIETY\",\"SUBVARIETY\",\"FORM\",\"SUBFORM\",\"PATHOVAR\",\"BIOVAR\",\"CHEMOVAR\",\"MORPHOVAR\",\"PHAGOVAR\",\"SEROVAR\",\"CHEMOFORM\",\"FORMA_SPECIALIS\",\"CULTIVAR\",\"STRAIN\",\"OTHER\",\"UNRANKED\"]}],\"default\":null}]}],\"default\":null},{\"name\":\"acceptedUsage\",\"type\":[\"null\",\"RankedName\"],\"default\":null},{\"name\":\"nomenclature\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Nomenclature\",\"fields\":[{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"classification\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"RankedName\"}],\"default\":null},{\"name\":\"diagnostics\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Diagnostics\",\"fields\":[{\"name\":\"matchType\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"MatchType\",\"symbols\":[\"EXACT\",\"FUZZY\",\"HIGHERRANK\",\"NONE\"]}],\"default\":null},{\"name\":\"confidence\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"Status\",\"symbols\":[\"ACCEPTED\",\"DOUBTFUL\",\"SYNONYM\",\"HETEROTYPIC_SYNONYM\",\"HOMOTYPIC_SYNONYM\",\"PROPARTE_SYNONYM\",\"MISAPPLIED\",\"INTERMEDIATE_RANK_SYNONYM\",\"DETERMINATION_SYNONYM\"]}],\"default\":null},{\"name\":\"lineage\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"alternatives\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"TaxonRecord\"}],\"default\":null},{\"name\":\"note\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The record id */
  @Deprecated public java.lang.String id;
  @Deprecated public java.lang.Boolean synonym;
  @Deprecated public org.gbif.pipelines.io.avro.RankedName usage;
  @Deprecated public org.gbif.pipelines.io.avro.RankedName acceptedUsage;
  @Deprecated public org.gbif.pipelines.io.avro.Nomenclature nomenclature;
  @Deprecated public java.util.List<org.gbif.pipelines.io.avro.RankedName> classification;
  @Deprecated public org.gbif.pipelines.io.avro.Diagnostics diagnostics;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TaxonRecord() {}

  /**
   * All-args constructor.
   */
  public TaxonRecord(java.lang.String id, java.lang.Boolean synonym, org.gbif.pipelines.io.avro.RankedName usage, org.gbif.pipelines.io.avro.RankedName acceptedUsage, org.gbif.pipelines.io.avro.Nomenclature nomenclature, java.util.List<org.gbif.pipelines.io.avro.RankedName> classification, org.gbif.pipelines.io.avro.Diagnostics diagnostics) {
    this.id = id;
    this.synonym = synonym;
    this.usage = usage;
    this.acceptedUsage = acceptedUsage;
    this.nomenclature = nomenclature;
    this.classification = classification;
    this.diagnostics = diagnostics;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return synonym;
    case 2: return usage;
    case 3: return acceptedUsage;
    case 4: return nomenclature;
    case 5: return classification;
    case 6: return diagnostics;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: synonym = (java.lang.Boolean)value$; break;
    case 2: usage = (org.gbif.pipelines.io.avro.RankedName)value$; break;
    case 3: acceptedUsage = (org.gbif.pipelines.io.avro.RankedName)value$; break;
    case 4: nomenclature = (org.gbif.pipelines.io.avro.Nomenclature)value$; break;
    case 5: classification = (java.util.List<org.gbif.pipelines.io.avro.RankedName>)value$; break;
    case 6: diagnostics = (org.gbif.pipelines.io.avro.Diagnostics)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * The record id   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The record id   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'synonym' field.
   */
  public java.lang.Boolean getSynonym() {
    return synonym;
  }

  /**
   * Sets the value of the 'synonym' field.
   * @param value the value to set.
   */
  public void setSynonym(java.lang.Boolean value) {
    this.synonym = value;
  }

  /**
   * Gets the value of the 'usage' field.
   */
  public org.gbif.pipelines.io.avro.RankedName getUsage() {
    return usage;
  }

  /**
   * Sets the value of the 'usage' field.
   * @param value the value to set.
   */
  public void setUsage(org.gbif.pipelines.io.avro.RankedName value) {
    this.usage = value;
  }

  /**
   * Gets the value of the 'acceptedUsage' field.
   */
  public org.gbif.pipelines.io.avro.RankedName getAcceptedUsage() {
    return acceptedUsage;
  }

  /**
   * Sets the value of the 'acceptedUsage' field.
   * @param value the value to set.
   */
  public void setAcceptedUsage(org.gbif.pipelines.io.avro.RankedName value) {
    this.acceptedUsage = value;
  }

  /**
   * Gets the value of the 'nomenclature' field.
   */
  public org.gbif.pipelines.io.avro.Nomenclature getNomenclature() {
    return nomenclature;
  }

  /**
   * Sets the value of the 'nomenclature' field.
   * @param value the value to set.
   */
  public void setNomenclature(org.gbif.pipelines.io.avro.Nomenclature value) {
    this.nomenclature = value;
  }

  /**
   * Gets the value of the 'classification' field.
   */
  public java.util.List<org.gbif.pipelines.io.avro.RankedName> getClassification() {
    return classification;
  }

  /**
   * Sets the value of the 'classification' field.
   * @param value the value to set.
   */
  public void setClassification(java.util.List<org.gbif.pipelines.io.avro.RankedName> value) {
    this.classification = value;
  }

  /**
   * Gets the value of the 'diagnostics' field.
   */
  public org.gbif.pipelines.io.avro.Diagnostics getDiagnostics() {
    return diagnostics;
  }

  /**
   * Sets the value of the 'diagnostics' field.
   * @param value the value to set.
   */
  public void setDiagnostics(org.gbif.pipelines.io.avro.Diagnostics value) {
    this.diagnostics = value;
  }

  /** Creates a new TaxonRecord RecordBuilder */
  public static org.gbif.pipelines.io.avro.TaxonRecord.Builder newBuilder() {
    return new org.gbif.pipelines.io.avro.TaxonRecord.Builder();
  }
  
  /** Creates a new TaxonRecord RecordBuilder by copying an existing Builder */
  public static org.gbif.pipelines.io.avro.TaxonRecord.Builder newBuilder(org.gbif.pipelines.io.avro.TaxonRecord.Builder other) {
    return new org.gbif.pipelines.io.avro.TaxonRecord.Builder(other);
  }
  
  /** Creates a new TaxonRecord RecordBuilder by copying an existing TaxonRecord instance */
  public static org.gbif.pipelines.io.avro.TaxonRecord.Builder newBuilder(org.gbif.pipelines.io.avro.TaxonRecord other) {
    return new org.gbif.pipelines.io.avro.TaxonRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for TaxonRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaxonRecord>
    implements org.apache.avro.data.RecordBuilder<TaxonRecord> {

    private java.lang.String id;
    private java.lang.Boolean synonym;
    private org.gbif.pipelines.io.avro.RankedName usage;
    private org.gbif.pipelines.io.avro.RankedName acceptedUsage;
    private org.gbif.pipelines.io.avro.Nomenclature nomenclature;
    private java.util.List<org.gbif.pipelines.io.avro.RankedName> classification;
    private org.gbif.pipelines.io.avro.Diagnostics diagnostics;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.pipelines.io.avro.TaxonRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.pipelines.io.avro.TaxonRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.synonym)) {
        this.synonym = data().deepCopy(fields()[1].schema(), other.synonym);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.usage)) {
        this.usage = data().deepCopy(fields()[2].schema(), other.usage);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.acceptedUsage)) {
        this.acceptedUsage = data().deepCopy(fields()[3].schema(), other.acceptedUsage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nomenclature)) {
        this.nomenclature = data().deepCopy(fields()[4].schema(), other.nomenclature);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.classification)) {
        this.classification = data().deepCopy(fields()[5].schema(), other.classification);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.diagnostics)) {
        this.diagnostics = data().deepCopy(fields()[6].schema(), other.diagnostics);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TaxonRecord instance */
    private Builder(org.gbif.pipelines.io.avro.TaxonRecord other) {
            super(org.gbif.pipelines.io.avro.TaxonRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.synonym)) {
        this.synonym = data().deepCopy(fields()[1].schema(), other.synonym);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.usage)) {
        this.usage = data().deepCopy(fields()[2].schema(), other.usage);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.acceptedUsage)) {
        this.acceptedUsage = data().deepCopy(fields()[3].schema(), other.acceptedUsage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nomenclature)) {
        this.nomenclature = data().deepCopy(fields()[4].schema(), other.nomenclature);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.classification)) {
        this.classification = data().deepCopy(fields()[5].schema(), other.classification);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.diagnostics)) {
        this.diagnostics = data().deepCopy(fields()[6].schema(), other.diagnostics);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'synonym' field */
    public java.lang.Boolean getSynonym() {
      return synonym;
    }
    
    /** Sets the value of the 'synonym' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setSynonym(java.lang.Boolean value) {
      validate(fields()[1], value);
      this.synonym = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'synonym' field has been set */
    public boolean hasSynonym() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'synonym' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearSynonym() {
      synonym = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'usage' field */
    public org.gbif.pipelines.io.avro.RankedName getUsage() {
      return usage;
    }
    
    /** Sets the value of the 'usage' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setUsage(org.gbif.pipelines.io.avro.RankedName value) {
      validate(fields()[2], value);
      this.usage = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'usage' field has been set */
    public boolean hasUsage() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'usage' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearUsage() {
      usage = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'acceptedUsage' field */
    public org.gbif.pipelines.io.avro.RankedName getAcceptedUsage() {
      return acceptedUsage;
    }
    
    /** Sets the value of the 'acceptedUsage' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setAcceptedUsage(org.gbif.pipelines.io.avro.RankedName value) {
      validate(fields()[3], value);
      this.acceptedUsage = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'acceptedUsage' field has been set */
    public boolean hasAcceptedUsage() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'acceptedUsage' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearAcceptedUsage() {
      acceptedUsage = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'nomenclature' field */
    public org.gbif.pipelines.io.avro.Nomenclature getNomenclature() {
      return nomenclature;
    }
    
    /** Sets the value of the 'nomenclature' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setNomenclature(org.gbif.pipelines.io.avro.Nomenclature value) {
      validate(fields()[4], value);
      this.nomenclature = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'nomenclature' field has been set */
    public boolean hasNomenclature() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'nomenclature' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearNomenclature() {
      nomenclature = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'classification' field */
    public java.util.List<org.gbif.pipelines.io.avro.RankedName> getClassification() {
      return classification;
    }
    
    /** Sets the value of the 'classification' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setClassification(java.util.List<org.gbif.pipelines.io.avro.RankedName> value) {
      validate(fields()[5], value);
      this.classification = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'classification' field has been set */
    public boolean hasClassification() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'classification' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearClassification() {
      classification = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'diagnostics' field */
    public org.gbif.pipelines.io.avro.Diagnostics getDiagnostics() {
      return diagnostics;
    }
    
    /** Sets the value of the 'diagnostics' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder setDiagnostics(org.gbif.pipelines.io.avro.Diagnostics value) {
      validate(fields()[6], value);
      this.diagnostics = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'diagnostics' field has been set */
    public boolean hasDiagnostics() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'diagnostics' field */
    public org.gbif.pipelines.io.avro.TaxonRecord.Builder clearDiagnostics() {
      diagnostics = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public TaxonRecord build() {
      try {
        TaxonRecord record = new TaxonRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.synonym = fieldSetFlags()[1] ? this.synonym : (java.lang.Boolean) defaultValue(fields()[1]);
        record.usage = fieldSetFlags()[2] ? this.usage : (org.gbif.pipelines.io.avro.RankedName) defaultValue(fields()[2]);
        record.acceptedUsage = fieldSetFlags()[3] ? this.acceptedUsage : (org.gbif.pipelines.io.avro.RankedName) defaultValue(fields()[3]);
        record.nomenclature = fieldSetFlags()[4] ? this.nomenclature : (org.gbif.pipelines.io.avro.Nomenclature) defaultValue(fields()[4]);
        record.classification = fieldSetFlags()[5] ? this.classification : (java.util.List<org.gbif.pipelines.io.avro.RankedName>) defaultValue(fields()[5]);
        record.diagnostics = fieldSetFlags()[6] ? this.diagnostics : (org.gbif.pipelines.io.avro.Diagnostics) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
