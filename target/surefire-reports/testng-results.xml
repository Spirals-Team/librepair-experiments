<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" total="26" passed="24">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="7805" started-at="2018-03-28T19:48:26Z" finished-at="2018-03-28T19:48:34Z">
    <groups>
    </groups>
    <test name="Surefire test" duration-ms="7805" started-at="2018-03-28T19:48:26Z" finished-at="2018-03-28T19:48:34Z">
      <class name="com.mined.in.pool.account.eth.DwarfpoolAccountExecutorTest">
        <test-method status="PASS" signature="testEmptyResponse()[pri:0, instance:testEmptyResponse(com.mined.in.pool.account.eth.DwarfpoolAccountExecutorTest)]" name="testEmptyResponse" duration-ms="7" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyResponse -->
        <test-method status="PASS" signature="test500HttpError()[pri:0, instance:test500HttpError(com.mined.in.pool.account.eth.DwarfpoolAccountExecutorTest)]" name="test500HttpError" duration-ms="6" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test500HttpError -->
        <test-method status="PASS" signature="testWithEmptyWalletAddress()[pri:0, instance:testWithEmptyWalletAddress(com.mined.in.pool.account.eth.DwarfpoolAccountExecutorTest)]" name="testWithEmptyWalletAddress" duration-ms="5" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithEmptyWalletAddress -->
        <test-method status="PASS" signature="testCorrectJsonResponseWithApiError()[pri:0, instance:testCorrectJsonResponseWithApiError(com.mined.in.pool.account.eth.DwarfpoolAccountExecutorTest)]" name="testCorrectJsonResponseWithApiError" duration-ms="5" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCorrectJsonResponseWithApiError -->
        <test-method status="PASS" signature="testCorrectJsonResponse()[pri:0, instance:testCorrectJsonResponse(com.mined.in.pool.account.eth.DwarfpoolAccountExecutorTest)]" name="testCorrectJsonResponse" duration-ms="6" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCorrectJsonResponse -->
      </class> <!-- com.mined.in.pool.account.eth.DwarfpoolAccountExecutorTest -->
      <class name="com.mined.in.worker.ETHMinedWorkerTest">
        <test-method status="PASS" signature="testPoolError()[pri:0, instance:testPoolError(com.mined.in.worker.ETHMinedWorkerTest)]" name="testPoolError" duration-ms="695" started-at="2018-03-28T21:48:26Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPoolError -->
        <test-method status="PASS" signature="testMarketError()[pri:0, instance:testMarketError(com.mined.in.worker.ETHMinedWorkerTest)]" name="testMarketError" duration-ms="36" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMarketError -->
        <test-method status="PASS" signature="testRewardError()[pri:0, instance:testRewardError(com.mined.in.worker.ETHMinedWorkerTest)]" name="testRewardError" duration-ms="31" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRewardError -->
        <test-method status="FAIL" signature="testCorrectJsonResponse()[pri:0, instance:testCorrectJsonResponse(com.mined.in.worker.ETHMinedWorkerTest)]" name="testCorrectJsonResponse" duration-ms="40" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected:<174> but was:<null>]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected:<174> but was:<null>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at com.mined.in.worker.ETHMinedWorkerTest.testCorrectJsonResponse(ETHMinedWorkerTest.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:81)
	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:69)
	at org.testng.TestRunner$1.run(TestRunner.java:682)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1008)
	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:713)
	at org.testng.TestRunner.run(TestRunner.java:614)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:212)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCorrectJsonResponse -->
      </class> <!-- com.mined.in.worker.ETHMinedWorkerTest -->
      <class name="com.mined.in.pool.account.eth.NanopoolAccountExecutorTest">
        <test-method status="PASS" signature="testEmptyResponse()[pri:0, instance:testEmptyResponse(com.mined.in.pool.account.eth.NanopoolAccountExecutorTest)]" name="testEmptyResponse" duration-ms="6" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyResponse -->
        <test-method status="PASS" signature="test500HttpError()[pri:0, instance:test500HttpError(com.mined.in.pool.account.eth.NanopoolAccountExecutorTest)]" name="test500HttpError" duration-ms="3" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test500HttpError -->
        <test-method status="PASS" signature="testWithEmptyWalletAddress()[pri:0, instance:testWithEmptyWalletAddress(com.mined.in.pool.account.eth.NanopoolAccountExecutorTest)]" name="testWithEmptyWalletAddress" duration-ms="4" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithEmptyWalletAddress -->
        <test-method status="PASS" signature="testCorrectJsonResponseWithApiError()[pri:0, instance:testCorrectJsonResponseWithApiError(com.mined.in.pool.account.eth.NanopoolAccountExecutorTest)]" name="testCorrectJsonResponseWithApiError" duration-ms="4" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCorrectJsonResponseWithApiError -->
        <test-method status="PASS" signature="testCorrectJsonResponse()[pri:0, instance:testCorrectJsonResponse(com.mined.in.pool.account.eth.NanopoolAccountExecutorTest)]" name="testCorrectJsonResponse" duration-ms="6" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCorrectJsonResponse -->
      </class> <!-- com.mined.in.pool.account.eth.NanopoolAccountExecutorTest -->
      <class name="com.mined.in.MinedInApplicationTests">
        <test-method status="PASS" signature="contextLoads()[pri:0, instance:contextLoads(com.mined.in.MinedInApplicationTests)]" name="contextLoads" duration-ms="267" started-at="2018-03-28T21:48:34Z" finished-at="2018-03-28T21:48:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- contextLoads -->
      </class> <!-- com.mined.in.MinedInApplicationTests -->
      <class name="com.mined.in.market.coinmarketcap.CoinMarketCapMarketExecutorTest">
        <test-method status="PASS" signature="testEmptyResponse()[pri:0, instance:testEmptyResponse(com.mined.in.market.coinmarketcap.CoinMarketCapMarketExecutorTest)]" name="testEmptyResponse" duration-ms="4" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyResponse -->
        <test-method status="PASS" signature="test500HttpError()[pri:0, instance:test500HttpError(com.mined.in.market.coinmarketcap.CoinMarketCapMarketExecutorTest)]" name="test500HttpError" duration-ms="3" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test500HttpError -->
        <test-method status="PASS" signature="testCorrectJsonResponse()[pri:0, instance:testCorrectJsonResponse(com.mined.in.market.coinmarketcap.CoinMarketCapMarketExecutorTest)]" name="testCorrectJsonResponse" duration-ms="5" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCorrectJsonResponse -->
      </class> <!-- com.mined.in.market.coinmarketcap.CoinMarketCapMarketExecutorTest -->
      <class name="com.mined.in.calculator.whattomine.eth.WhatToMineRewardExecutorTest">
        <test-method status="PASS" signature="testEmptyResponse()[pri:0, instance:testEmptyResponse(com.mined.in.calculator.whattomine.eth.WhatToMineRewardExecutorTest)]" name="testEmptyResponse" duration-ms="6" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyResponse -->
        <test-method status="PASS" signature="test500HttpError()[pri:0, instance:test500HttpError(com.mined.in.calculator.whattomine.eth.WhatToMineRewardExecutorTest)]" name="test500HttpError" duration-ms="5" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test500HttpError -->
        <test-method status="FAIL" signature="testCorrectJsonResponse()[pri:0, instance:testCorrectJsonResponse(com.mined.in.calculator.whattomine.eth.WhatToMineRewardExecutorTest)]" name="testCorrectJsonResponse" duration-ms="7" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected:<174> but was:<null>]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected:<174> but was:<null>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at com.mined.in.calculator.whattomine.eth.WhatToMineRewardExecutorTest.testCorrectJsonResponse(WhatToMineRewardExecutorTest.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:81)
	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:69)
	at org.testng.TestRunner$1.run(TestRunner.java:682)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1008)
	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:713)
	at org.testng.TestRunner.run(TestRunner.java:614)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:212)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCorrectJsonResponse -->
      </class> <!-- com.mined.in.calculator.whattomine.eth.WhatToMineRewardExecutorTest -->
      <class name="com.mined.in.pool.account.eth.EthermineAccountExecutorTest">
        <test-method status="PASS" signature="testEmptyResponse()[pri:0, instance:testEmptyResponse(com.mined.in.pool.account.eth.EthermineAccountExecutorTest)]" name="testEmptyResponse" duration-ms="18" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyResponse -->
        <test-method status="PASS" signature="test500HttpError()[pri:0, instance:test500HttpError(com.mined.in.pool.account.eth.EthermineAccountExecutorTest)]" name="test500HttpError" duration-ms="5" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test500HttpError -->
        <test-method status="PASS" signature="testWithEmptyWalletAddress()[pri:0, instance:testWithEmptyWalletAddress(com.mined.in.pool.account.eth.EthermineAccountExecutorTest)]" name="testWithEmptyWalletAddress" duration-ms="5" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithEmptyWalletAddress -->
        <test-method status="PASS" signature="testCorrectJsonResponseWithApiError()[pri:0, instance:testCorrectJsonResponseWithApiError(com.mined.in.pool.account.eth.EthermineAccountExecutorTest)]" name="testCorrectJsonResponseWithApiError" duration-ms="5" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCorrectJsonResponseWithApiError -->
        <test-method status="PASS" signature="testCorrectJsonResponse()[pri:0, instance:testCorrectJsonResponse(com.mined.in.pool.account.eth.EthermineAccountExecutorTest)]" name="testCorrectJsonResponse" duration-ms="12" started-at="2018-03-28T21:48:27Z" finished-at="2018-03-28T21:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCorrectJsonResponse -->
      </class> <!-- com.mined.in.pool.account.eth.EthermineAccountExecutorTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
