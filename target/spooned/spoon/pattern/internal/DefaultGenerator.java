package spoon.pattern.internal;


public class DefaultGenerator implements spoon.pattern.Generator {
    protected final spoon.reflect.factory.Factory factory;

    private boolean addGeneratedBy = false;

    private spoon.pattern.Pattern pattern;

    public DefaultGenerator(spoon.reflect.factory.Factory factory, spoon.pattern.Pattern pattern) {
        super();
        this.pattern = pattern;
        this.factory = factory;
    }

    public <T> T generateSingleTarget(spoon.pattern.internal.node.RootNode node, spoon.support.util.ImmutableMap parameters, java.lang.Class<T> expectedType) {
        spoon.pattern.internal.ResultHolder.Single<T> result = new spoon.pattern.internal.ResultHolder.Single<>(expectedType);
        generateTargets(node, result, parameters);
        return result.getResult();
    }

    public <T> java.util.List<T> generateTargets(spoon.pattern.internal.node.RootNode node, spoon.support.util.ImmutableMap parameters, java.lang.Class<T> expectedType) {
        spoon.pattern.internal.ResultHolder.Multiple<T> result = new spoon.pattern.internal.ResultHolder.Multiple<>(expectedType);
        generateTargets(node, result, parameters);
        return result.getResult();
    }

    public <T> void generateTargets(spoon.pattern.internal.node.RootNode node, spoon.pattern.internal.ResultHolder<T> result, spoon.support.util.ImmutableMap parameters) {
        node.generateTargets(this, result, parameters);
        if (node.isSimplifyGenerated()) {
            result.mapEachResult(( element) -> {
                if (element instanceof spoon.reflect.code.CtCodeElement) {
                    spoon.reflect.code.CtCodeElement code = ((spoon.reflect.code.CtCodeElement) (element));
                    try {
                        code = code.partiallyEvaluate();
                        if (result.getRequiredClass().isInstance(code)) {
                            return ((T) (code));
                        }
                    } catch (spoon.support.SpoonClassNotFoundException e) {
                        getFactory().getEnvironment().debugMessage(("Partial evaluation was skipped because of: " + (e.getMessage())));
                    }
                }
                return element;
            });
        }
    }

    public <T> void getValueAs(spoon.pattern.internal.parameter.ParameterInfo parameterInfo, spoon.pattern.internal.ResultHolder<T> result, spoon.support.util.ImmutableMap parameters) {
        parameterInfo.getValueAs(factory, result, parameters);
    }

    @java.lang.Override
    public spoon.reflect.factory.Factory getFactory() {
        return factory;
    }

    public spoon.pattern.internal.DefaultGenerator setAddGeneratedBy(boolean addGeneratedBy) {
        this.addGeneratedBy = addGeneratedBy;
        return this;
    }

    public void applyGeneratedBy(spoon.reflect.declaration.CtElement generatedElement, java.lang.String genBy) {
        if ((isAddGeneratedBy()) && (generatedElement instanceof spoon.reflect.declaration.CtTypeMember)) {
            if (genBy != null) {
                addGeneratedByComment(generatedElement, genBy);
            }
        }
    }

    public java.lang.String getGeneratedByComment(spoon.reflect.declaration.CtElement ele) {
        spoon.reflect.cu.SourcePosition pos = ele.getPosition();
        if ((pos != null) && (pos.isValidPosition())) {
            spoon.reflect.cu.CompilationUnit cu = pos.getCompilationUnit();
            if (cu != null) {
                spoon.reflect.declaration.CtType<?> mainType = cu.getMainType();
                if (mainType != null) {
                    java.lang.StringBuilder result = new java.lang.StringBuilder();
                    result.append("Generated by ");
                    result.append(mainType.getQualifiedName());
                    appendInnerTypedElements(result, mainType, ele);
                    result.append('(');
                    result.append(mainType.getSimpleName());
                    result.append(".java:");
                    result.append(pos.getLine());
                    result.append(')');
                    return result.toString();
                }
            }
        }
        return null;
    }

    private void appendInnerTypedElements(java.lang.StringBuilder result, spoon.reflect.declaration.CtType<?> mainType, spoon.reflect.declaration.CtElement ele) {
        spoon.reflect.declaration.CtTypeMember typeMember = getFirst(ele, spoon.reflect.declaration.CtTypeMember.class);
        if ((typeMember != null) && (typeMember != mainType)) {
            if (typeMember.isParentInitialized()) {
                appendInnerTypedElements(result, mainType, typeMember.getParent());
            }
            if (typeMember instanceof spoon.reflect.declaration.CtType) {
                result.append('$');
            }else {
                result.append('#');
            }
            result.append(typeMember.getSimpleName());
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private <T extends spoon.reflect.declaration.CtElement> T getFirst(spoon.reflect.declaration.CtElement ele, java.lang.Class<T> clazz) {
        if (ele != null) {
            if (clazz.isAssignableFrom(ele.getClass())) {
                return ((T) (ele));
            }
            if (ele.isParentInitialized()) {
                return getFirst(ele.getParent(), clazz);
            }
        }
        return null;
    }

    private void addGeneratedByComment(spoon.reflect.declaration.CtElement ele, java.lang.String generatedBy) {
        if (generatedBy == null) {
            return;
        }
        java.lang.String EOL = java.lang.System.getProperty("line.separator");
        spoon.reflect.code.CtComment comment = getJavaDoc(ele);
        java.lang.String content = comment.getContent();
        if ((content.trim().length()) > 0) {
            content += EOL + EOL;
        }
        content += generatedBy;
        comment.setContent(content);
    }

    private spoon.reflect.code.CtComment getJavaDoc(spoon.reflect.declaration.CtElement ele) {
        for (spoon.reflect.code.CtComment comment : ele.getComments()) {
            if ((comment.getCommentType()) == (spoon.reflect.code.CtComment.CommentType.JAVADOC)) {
                return comment;
            }
        }
        spoon.reflect.code.CtComment c = ele.getFactory().Code().createComment("", spoon.reflect.code.CtComment.CommentType.JAVADOC);
        ele.addComment(c);
        return c;
    }

    @java.lang.Override
    public <T extends spoon.reflect.declaration.CtElement> java.util.List<T> generate(java.lang.Class<T> valueType, spoon.support.util.ImmutableMap params) {
        return setAddGeneratedBy(isAddGeneratedBy()).generateTargets(pattern.getModelValueResolver(), params, valueType);
    }

    @java.lang.Override
    public <T extends spoon.reflect.declaration.CtElement> java.util.List<T> generate(java.lang.Class<T> valueType, java.util.Map<java.lang.String, java.lang.Object> params) {
        return generate(valueType, new spoon.support.util.ImmutableMapImpl(params));
    }

    @java.lang.Override
    public <T extends spoon.reflect.declaration.CtType<?>> T generateType(java.lang.String typeQualifiedName, java.util.Map<java.lang.String, java.lang.Object> params) {
        spoon.reflect.reference.CtTypeReference<?> newTypeRef = factory.Type().createReference(typeQualifiedName);
        spoon.reflect.declaration.CtPackage ownerPackage = newTypeRef.getFactory().Package().getOrCreate(newTypeRef.getPackage().getQualifiedName());
        return createType(ownerPackage, newTypeRef.getSimpleName(), params);
    }

    @java.lang.SuppressWarnings("unchecked")
    private <T extends spoon.reflect.declaration.CtType<?>> T createType(spoon.reflect.declaration.CtPackage ownerPackage, java.lang.String typeSimpleName, java.util.Map<java.lang.String, java.lang.Object> params) {
        @java.lang.SuppressWarnings({ "rawtypes" })
        java.util.List<spoon.reflect.declaration.CtType> types = generate(spoon.reflect.declaration.CtType.class, new spoon.support.util.ImmutableMapImpl(params, spoon.pattern.PatternBuilder.TARGET_TYPE, ownerPackage.getFactory().Type().createReference(spoon.pattern.internal.DefaultGenerator.getQualifiedName(ownerPackage, typeSimpleName))));
        T result = null;
        for (spoon.reflect.declaration.CtType<?> type : types) {
            ownerPackage.addType(type);
            if (type.getSimpleName().equals(typeSimpleName)) {
                result = ((T) (type));
            }
        }
        return result;
    }

    @java.lang.Override
    public <T extends spoon.reflect.declaration.CtTypeMember> java.util.List<T> addToType(java.lang.Class<T> valueType, java.util.Map<java.lang.String, java.lang.Object> params, spoon.reflect.declaration.CtType<?> targetType) {
        java.util.List<T> results = generate(valueType, new spoon.support.util.ImmutableMapImpl(params, spoon.pattern.PatternBuilder.TARGET_TYPE, targetType.getReference()));
        for (T result : results) {
            if (result instanceof spoon.reflect.declaration.CtTypeMember) {
                targetType.addTypeMember(((spoon.reflect.declaration.CtTypeMember) (result)));
            }
        }
        return results;
    }

    private static java.lang.String getQualifiedName(spoon.reflect.declaration.CtPackage pckg, java.lang.String simpleName) {
        if (pckg.isUnnamedPackage()) {
            return simpleName;
        }
        return ((pckg.getQualifiedName()) + (spoon.reflect.declaration.CtPackage.PACKAGE_SEPARATOR)) + simpleName;
    }

    public boolean isAddGeneratedBy() {
        return addGeneratedBy;
    }
}

