package spoon.generating;


public class CtBiScannerGenerator extends spoon.processing.AbstractManualProcessor {
    private static final java.lang.String TARGET_BISCANNER_PACKAGE = "spoon.reflect.visitor";

    private static final java.lang.String GENERATING_BISCANNER_PACKAGE = "spoon.generating.scanner";

    private static final java.lang.String GENERATING_BISCANNER = (spoon.generating.CtBiScannerGenerator.GENERATING_BISCANNER_PACKAGE) + ".CtBiScannerTemplate";

    public void process() {
        final spoon.reflect.code.CtLocalVariable<?> peekElement = getFactory().Class().get(((spoon.generating.CtBiScannerGenerator.GENERATING_BISCANNER_PACKAGE) + ".PeekElementTemplate")).getMethod("statement").getBody().getStatement(0);
        final spoon.reflect.declaration.CtClass<java.lang.Object> target = createBiScanner();
        for (spoon.reflect.declaration.CtTypeMember tm : getFactory().Class().get(spoon.reflect.visitor.CtScanner.class).getTypeMembers()) {
            if (!(tm instanceof spoon.reflect.declaration.CtMethod)) {
                continue;
            }
            spoon.reflect.declaration.CtMethod<?> element = ((spoon.reflect.declaration.CtMethod) (tm));
            if (!(element.getSimpleName().startsWith("visitCt"))) {
                continue;
            }
            spoon.reflect.factory.Factory factory = element.getFactory();
            spoon.reflect.declaration.CtMethod<?> clone = factory.Core().clone(element);
            clone.addComment(getFactory().Code().createComment(("autogenerated by " + (getClass().getSimpleName())), spoon.reflect.code.CtComment.CommentType.INLINE));
            final spoon.reflect.code.CtLocalVariable<?> peek = factory.Core().clone(peekElement);
            final spoon.reflect.reference.CtTypeReference type = factory.Core().clone(clone.getParameters().get(0).getType());
            type.getActualTypeArguments().clear();
            peek.getDefaultExpression().addTypeCast(type);
            peek.setType(type);
            clone.getBody().insertBegin(peek);
            for (int i = 2; i < ((clone.getBody().getStatements().size()) - 1); i++) {
                java.util.List<spoon.reflect.code.CtExpression> invArgs = ((spoon.reflect.code.CtInvocation) (clone.getBody().getStatement(i))).getArguments();
                if ((invArgs.size()) <= 1) {
                    throw new java.lang.RuntimeException(((((("You forget the role argument in line " + i) + " of method ") + (element.getSimpleName())) + " from ") + (element.getDeclaringType().getQualifiedName())));
                }
                final spoon.reflect.code.CtInvocation targetInvocation = ((spoon.reflect.code.CtInvocation) (invArgs.get(1)));
                if (("getValue".equals(targetInvocation.getExecutable().getSimpleName())) && ("CtLiteral".equals(targetInvocation.getExecutable().getDeclaringType().getSimpleName()))) {
                    clone.getBody().getStatement((i--)).delete();
                    continue;
                }
                spoon.reflect.code.CtInvocation<?> replace = ((spoon.reflect.code.CtInvocation<?>) (clone.getBody().getStatement(i).clone()));
                replace.getExecutable().setSimpleName("biScan");
                final spoon.reflect.code.CtVariableAccess<?> otherRead = factory.Code().createVariableRead(peek.getReference(), false);
                replace.addArgument(factory.Code().createInvocation(otherRead, ((spoon.reflect.code.CtInvocation) (replace.getArguments().get(1))).getExecutable()));
                if ("Map".equals(targetInvocation.getExecutable().getType().getSimpleName())) {
                    ((spoon.reflect.code.CtExpression) (replace.getArguments().get(1))).replace(factory.Code().createInvocation(targetInvocation, factory.Executable().createReference("List Map#values()")));
                    spoon.reflect.code.CtInvocation invocation = factory.Code().createInvocation(replace.getArguments().get(2).clone(), factory.Executable().createReference("List Map#values()"));
                    replace.getArguments().get(2).replace(invocation);
                }
                clone.getBody().getStatement(i).replace(replace);
            }
            target.addMethod(clone);
        }
    }

    private spoon.reflect.declaration.CtClass<java.lang.Object> createBiScanner() {
        final spoon.reflect.declaration.CtPackage aPackage = getFactory().Package().getOrCreate(spoon.generating.CtBiScannerGenerator.TARGET_BISCANNER_PACKAGE);
        final spoon.reflect.declaration.CtClass<java.lang.Object> target = getFactory().Class().get(spoon.generating.CtBiScannerGenerator.GENERATING_BISCANNER);
        target.setSimpleName("CtBiScannerDefault");
        target.addModifier(spoon.reflect.declaration.ModifierKind.PUBLIC);
        aPackage.addType(target);
        target.addComment(getFactory().Code().createComment(("autogenerated by " + (getClass().getSimpleName())), spoon.reflect.code.CtComment.CommentType.INLINE));
        final java.util.List<spoon.reflect.reference.CtTypeReference> references = target.getElements(new spoon.reflect.visitor.filter.TypeFilter<spoon.reflect.reference.CtTypeReference>(spoon.reflect.reference.CtTypeReference.class) {
            @java.lang.Override
            public boolean matches(spoon.reflect.reference.CtTypeReference reference) {
                return spoon.generating.CtBiScannerGenerator.GENERATING_BISCANNER.equals(reference.getQualifiedName());
            }
        });
        for (spoon.reflect.reference.CtTypeReference reference : references) {
            reference.setSimpleName("CtBiScannerDefault");
            reference.setPackage(aPackage.getReference());
        }
        return target;
    }
}

