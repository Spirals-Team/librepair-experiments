CtTypeAccess CtRole.ACCESSED_TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<A>
	GET: getAccessedType() : spoon.reflect.reference.CtTypeReference<A>
	SET: setAccessedType(spoon.reflect.reference.CtTypeReference) : C
----------------------------------------------------------
CtClass CtRole.ANNONYMOUS_EXECUTABLE
	ItemType: java.util.List<spoon.reflect.declaration.CtAnonymousExecutable>
	GET: getAnonymousExecutables() : java.util.List<spoon.reflect.declaration.CtAnonymousExecutable>
	SET: setAnonymousExecutables(java.util.List) : C
	ADD_LAST: addAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable) : C
	REMOVE: removeAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable) : boolean
----------------------------------------------------------
CtElement CtRole.ANNOTATION
	ItemType: java.util.List<spoon.reflect.declaration.CtAnnotation<? extends java.lang.annotation.Annotation>>
	GET: getAnnotations() : java.util.List<spoon.reflect.declaration.CtAnnotation<? extends java.lang.annotation.Annotation>>
	SET: setAnnotations(java.util.List) : E
	ADD_LAST: addAnnotation(spoon.reflect.declaration.CtAnnotation) : E
	REMOVE: removeAnnotation(spoon.reflect.declaration.CtAnnotation) : boolean
	OTHER: getAnnotation(java.lang.Class) : A
----------------------------------------------------------
CtAnnotation CtRole.ANNOTATION_TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<? extends java.lang.annotation.Annotation>
	GET: getAnnotationType() : spoon.reflect.reference.CtTypeReference<A>
	SET: setAnnotationType(spoon.reflect.reference.CtTypeReference) : T
----------------------------------------------------------
CtAbstractInvocation CtRole.ARGUMENT
	ItemType: java.util.List<spoon.reflect.code.CtExpression<?>>
	GET: getArguments() : java.util.List<spoon.reflect.code.CtExpression<?>>
	SET: setArguments(java.util.List) : C
	ADD_LAST: addArgument(spoon.reflect.code.CtExpression) : C
	REMOVE: removeArgument(spoon.reflect.code.CtExpression) : void
----------------------------------------------------------
CtExecutableReference CtRole.ARGUMENT_TYPE
	ItemType: java.util.List<spoon.reflect.reference.CtTypeReference<?>>
	GET: getParameters() : java.util.List<spoon.reflect.reference.CtTypeReference<?>>
	SET: setParameters(java.util.List) : C
----------------------------------------------------------
CtAssignment CtRole.ASSIGNED
	ItemType: spoon.reflect.code.CtExpression<T>
	GET: getAssigned() : spoon.reflect.code.CtExpression<T>
	SET: setAssigned(spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtRHSReceiver CtRole.ASSIGNMENT
	ItemType: spoon.reflect.code.CtExpression<A>
	GET: getAssignment() : spoon.reflect.code.CtExpression<A>
	SET: setAssignment(spoon.reflect.code.CtExpression) : T
----------------------------------------------------------
CtBodyHolder CtRole.BODY
	ItemType: spoon.reflect.code.CtStatement
	GET: getBody() : spoon.reflect.code.CtStatement
	SET: setBody(spoon.reflect.code.CtStatement) : T
----------------------------------------------------------
CtSynchronized CtRole.BODY
	ItemType: spoon.reflect.code.CtBlock<?>
	GET: getBlock() : spoon.reflect.code.CtBlock<?>
	SET: setBlock(spoon.reflect.code.CtBlock) : T
----------------------------------------------------------
CtIntersectionTypeReference CtRole.BOUND
	ItemType: java.util.List<spoon.reflect.reference.CtTypeReference<?>>
	GET: getBounds() : java.util.List<spoon.reflect.reference.CtTypeReference<?>>
	SET: setBounds(java.util.List) : C
	ADD_LAST: addBound(spoon.reflect.reference.CtTypeReference) : C
	REMOVE: removeBound(spoon.reflect.reference.CtTypeReference) : boolean
----------------------------------------------------------
CtTypeParameterReference CtRole.BOUNDING_TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<?>
	GET: getBoundingType() : spoon.reflect.reference.CtTypeReference<?>
	SET: setBoundingType(spoon.reflect.reference.CtTypeReference) : T
	ADD_LAST: addBound(spoon.reflect.reference.CtTypeReference) : T
	REMOVE: removeBound(spoon.reflect.reference.CtTypeReference) : boolean
----------------------------------------------------------
CtSwitch CtRole.CASE
	ItemType: java.util.List<spoon.reflect.code.CtCase<? super S>>
	GET: getCases() : java.util.List<spoon.reflect.code.CtCase<? super S>>
	SET: setCases(java.util.List) : T
	ADD_LAST: addCase(spoon.reflect.code.CtCase) : T
	REMOVE: removeCase(spoon.reflect.code.CtCase) : boolean
----------------------------------------------------------
CtExpression CtRole.CAST
	ItemType: java.util.List<spoon.reflect.reference.CtTypeReference<?>>
	GET: getTypeCasts() : java.util.List<spoon.reflect.reference.CtTypeReference<?>>
	SET: setTypeCasts(java.util.List) : C
	ADD_LAST: addTypeCast(spoon.reflect.reference.CtTypeReference) : C
----------------------------------------------------------
CtTry CtRole.CATCH
	ItemType: java.util.List<spoon.reflect.code.CtCatch>
	GET: getCatchers() : java.util.List<spoon.reflect.code.CtCatch>
	SET: setCatchers(java.util.List) : T
	ADD_LAST: addCatcher(spoon.reflect.code.CtCatch) : T
	REMOVE: removeCatcher(spoon.reflect.code.CtCatch) : boolean
----------------------------------------------------------
CtElement CtRole.COMMENT
	ItemType: java.util.List<spoon.reflect.code.CtComment>
	GET: getComments() : java.util.List<spoon.reflect.code.CtComment>
	SET: setComments(java.util.List) : E
	ADD_LAST: addComment(spoon.reflect.code.CtComment) : E
	REMOVE: removeComment(spoon.reflect.code.CtComment) : E
----------------------------------------------------------
CtComment CtRole.COMMENT_CONTENT
	ItemType: String
	GET: getContent() : String
	SET: setContent(java.lang.String) : E
----------------------------------------------------------
CtJavaDocTag CtRole.COMMENT_CONTENT
	ItemType: String
	GET: getContent() : String
	SET: setContent(java.lang.String) : E
----------------------------------------------------------
CtJavaDoc CtRole.COMMENT_TAG
	ItemType: java.util.List<spoon.reflect.code.CtJavaDocTag>
	GET: getTags() : java.util.List<spoon.reflect.code.CtJavaDocTag>
	SET: setTags(java.util.List) : E
	ADD_LAST: addTag(spoon.reflect.code.CtJavaDocTag) : E
	ADD_ON: addTag(int,spoon.reflect.code.CtJavaDocTag) : E
	REMOVE: removeTag(spoon.reflect.code.CtJavaDocTag) : E
----------------------------------------------------------
CtComment CtRole.COMMENT_TYPE
	ItemType: spoon.reflect.code.CtComment.CommentType
	GET: getCommentType() : spoon.reflect.code.CtComment.CommentType
	SET: setCommentType(spoon.reflect.code.CtComment$CommentType) : E
----------------------------------------------------------
CtAssert CtRole.CONDITION
	ItemType: spoon.reflect.code.CtExpression<Boolean>
	GET: getAssertExpression() : spoon.reflect.code.CtExpression<Boolean>
	SET: setAssertExpression(spoon.reflect.code.CtExpression) : A
----------------------------------------------------------
CtConditional CtRole.CONDITION
	ItemType: spoon.reflect.code.CtExpression<Boolean>
	GET: getCondition() : spoon.reflect.code.CtExpression<Boolean>
	SET: setCondition(spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtIf CtRole.CONDITION
	ItemType: spoon.reflect.code.CtExpression<Boolean>
	GET: getCondition() : spoon.reflect.code.CtExpression<Boolean>
	SET: setCondition(spoon.reflect.code.CtExpression) : T
----------------------------------------------------------
CtClass CtRole.CONSTRUCTOR
	ItemType: java.util.Set<spoon.reflect.declaration.CtConstructor<T>>
	GET: getConstructors() : java.util.Set<spoon.reflect.declaration.CtConstructor<T>>
	SET: setConstructors(java.util.Set) : C
	ADD_LAST: addConstructor(spoon.reflect.declaration.CtConstructor) : C
	REMOVE: removeConstructor(spoon.reflect.declaration.CtConstructor) : void
	OTHER: getConstructor(spoon.reflect.reference.CtTypeReference[]) : spoon.reflect.declaration.CtConstructor<T>
----------------------------------------------------------
CtPackage CtRole.CONTAINED_TYPE
	ItemType: java.util.Set<spoon.reflect.declaration.CtType<?>>
	GET: getTypes() : java.util.Set<spoon.reflect.declaration.CtType<?>>
	SET: setTypes(java.util.Set) : T
	ADD_LAST: addType(spoon.reflect.declaration.CtType) : T
	REMOVE: removeType(spoon.reflect.declaration.CtType) : void
	GET_BY: getType(java.lang.String) : T
----------------------------------------------------------
CtExecutableReference CtRole.DECLARING_TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<?>
	GET: getDeclaringType() : spoon.reflect.reference.CtTypeReference<?>
	SET: setDeclaringType(spoon.reflect.reference.CtTypeReference) : C
----------------------------------------------------------
CtFieldReference CtRole.DECLARING_TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<?>
	GET: getDeclaringType() : spoon.reflect.reference.CtTypeReference<?>
	SET: setDeclaringType(spoon.reflect.reference.CtTypeReference) : C
----------------------------------------------------------
CtTypeReference CtRole.DECLARING_TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<?>
	GET: getDeclaringType() : spoon.reflect.reference.CtTypeReference<?>
	SET: setDeclaringType(spoon.reflect.reference.CtTypeReference) : C
----------------------------------------------------------
CtAnnotationMethod CtRole.DEFAULT_EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<T>
	GET: getDefaultExpression() : spoon.reflect.code.CtExpression<T>
	SET: setDefaultExpression(spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtVariable CtRole.DEFAULT_EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<T>
	GET: getDefaultExpression() : spoon.reflect.code.CtExpression<T>
	SET: setDefaultExpression(spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtNewArray CtRole.DIMENSION
	ItemType: java.util.List<spoon.reflect.code.CtExpression<Integer>>
	GET: getDimensionExpressions() : java.util.List<spoon.reflect.code.CtExpression<Integer>>
	SET: setDimensionExpressions(java.util.List) : C
	ADD_LAST: addDimensionExpression(spoon.reflect.code.CtExpression) : C
	REMOVE: removeDimensionExpression(spoon.reflect.code.CtExpression) : boolean
----------------------------------------------------------
CtJavaDocTag CtRole.DOCUMENTATION_TYPE
	ItemType: spoon.reflect.code.CtJavaDocTag.TagType
	GET: getType() : spoon.reflect.code.CtJavaDocTag.TagType
	SET: setType(spoon.reflect.code.CtJavaDocTag$TagType) : E
----------------------------------------------------------
CtConditional CtRole.ELSE
	ItemType: spoon.reflect.code.CtExpression<T>
	GET: getElseExpression() : spoon.reflect.code.CtExpression<T>
	SET: setElseExpression(spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtIf CtRole.ELSE
	ItemType: spoon.reflect.code.CtStatement
	GET: getElseStatement() : S
	SET: setElseStatement(spoon.reflect.code.CtStatement) : T
----------------------------------------------------------
CtAbstractInvocation CtRole.EXECUTABLE_REF
	ItemType: spoon.reflect.reference.CtExecutableReference<T>
	GET: getExecutable() : spoon.reflect.reference.CtExecutableReference<T>
	SET: setExecutable(spoon.reflect.reference.CtExecutableReference) : C
----------------------------------------------------------
CtExecutableReferenceExpression CtRole.EXECUTABLE_REF
	ItemType: spoon.reflect.reference.CtExecutableReference<T>
	GET: getExecutable() : spoon.reflect.reference.CtExecutableReference<T>
	SET: setExecutable(spoon.reflect.reference.CtExecutableReference) : C
----------------------------------------------------------
CtModule CtRole.EXPORTED_PACKAGE
	ItemType: java.util.List<spoon.reflect.declaration.CtPackageExport>
	GET: getExportedPackages() : java.util.List<spoon.reflect.declaration.CtPackageExport>
	SET: setExportedPackages(java.util.List) : T
	ADD_LAST: addExportedPackage(spoon.reflect.declaration.CtPackageExport) : T
	REMOVE: removeExportedPackage(spoon.reflect.declaration.CtPackageExport) : T
----------------------------------------------------------
CtArrayAccess CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<Integer>
	GET: getIndexExpression() : spoon.reflect.code.CtExpression<Integer>
	SET: setIndexExpression(spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtAssert CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<T>
	GET: getExpression() : spoon.reflect.code.CtExpression<T>
	SET: setExpression(spoon.reflect.code.CtExpression) : A
----------------------------------------------------------
CtCase CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<E>
	GET: getCaseExpression() : spoon.reflect.code.CtExpression<E>
	SET: setCaseExpression(spoon.reflect.code.CtExpression) : T
----------------------------------------------------------
CtDo CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<Boolean>
	GET: getLoopingExpression() : spoon.reflect.code.CtExpression<Boolean>
	SET: setLoopingExpression(spoon.reflect.code.CtExpression) : T
----------------------------------------------------------
CtFor CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<Boolean>
	GET: getExpression() : spoon.reflect.code.CtExpression<Boolean>
	SET: setExpression(spoon.reflect.code.CtExpression) : T
----------------------------------------------------------
CtForEach CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<?>
	GET: getExpression() : spoon.reflect.code.CtExpression<?>
	SET: setExpression(spoon.reflect.code.CtExpression) : T
----------------------------------------------------------
CtLambda CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<T>
	GET: getExpression() : spoon.reflect.code.CtExpression<T>
	SET: setExpression(spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtNewArray CtRole.EXPRESSION
	ItemType: java.util.List<spoon.reflect.code.CtExpression<?>>
	GET: getElements() : java.util.List<spoon.reflect.code.CtExpression<?>>
	SET: setElements(java.util.List) : C
	ADD_LAST: addElement(spoon.reflect.code.CtExpression) : C
	REMOVE: removeElement(spoon.reflect.code.CtExpression) : boolean
----------------------------------------------------------
CtReturn CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<R>
	GET: getReturnedExpression() : spoon.reflect.code.CtExpression<R>
	SET: setReturnedExpression(spoon.reflect.code.CtExpression) : T
----------------------------------------------------------
CtSwitch CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<S>
	GET: getSelector() : spoon.reflect.code.CtExpression<S>
	SET: setSelector(spoon.reflect.code.CtExpression) : T
----------------------------------------------------------
CtSynchronized CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<?>
	GET: getExpression() : spoon.reflect.code.CtExpression<?>
	SET: setExpression(spoon.reflect.code.CtExpression) : T
----------------------------------------------------------
CtThrow CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<? extends Throwable>
	GET: getThrownExpression() : spoon.reflect.code.CtExpression<? extends Throwable>
	SET: setThrownExpression(spoon.reflect.code.CtExpression) : T
----------------------------------------------------------
CtUnaryOperator CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<T>
	GET: getOperand() : spoon.reflect.code.CtExpression<T>
	SET: setOperand(spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtWhile CtRole.EXPRESSION
	ItemType: spoon.reflect.code.CtExpression<Boolean>
	GET: getLoopingExpression() : spoon.reflect.code.CtExpression<Boolean>
	SET: setLoopingExpression(spoon.reflect.code.CtExpression) : T
----------------------------------------------------------
CtType CtRole.FIELD
	ItemType: java.util.List<spoon.reflect.declaration.CtField<?>>
	GET: getFields() : java.util.List<spoon.reflect.declaration.CtField<?>>
	SET: setFields(java.util.List) : C
	ADD_FIRST: addFieldAtTop(spoon.reflect.declaration.CtField) : C
	ADD_LAST: addField(spoon.reflect.declaration.CtField) : C
	ADD_ON: addField(int,spoon.reflect.declaration.CtField) : C
	REMOVE: removeField(spoon.reflect.declaration.CtField) : boolean
	GET_BY: getField(java.lang.String) : spoon.reflect.declaration.CtField<?>
----------------------------------------------------------
CtTry CtRole.FINALIZER
	ItemType: spoon.reflect.code.CtBlock<?>
	GET: getFinalizer() : spoon.reflect.code.CtBlock<?>
	SET: setFinalizer(spoon.reflect.code.CtBlock) : T
----------------------------------------------------------
CtForEach CtRole.FOREACH_VARIABLE
	ItemType: spoon.reflect.code.CtLocalVariable<?>
	GET: getVariable() : spoon.reflect.code.CtLocalVariable<?>
	SET: setVariable(spoon.reflect.code.CtLocalVariable) : T
----------------------------------------------------------
CtFor CtRole.FOR_INIT
	ItemType: java.util.List<spoon.reflect.code.CtStatement>
	GET: getForInit() : java.util.List<spoon.reflect.code.CtStatement>
	SET: setForInit(java.util.List) : T
	ADD_LAST: addForInit(spoon.reflect.code.CtStatement) : T
	REMOVE: removeForInit(spoon.reflect.code.CtStatement) : boolean
----------------------------------------------------------
CtFor CtRole.FOR_UPDATE
	ItemType: java.util.List<spoon.reflect.code.CtStatement>
	GET: getForUpdate() : java.util.List<spoon.reflect.code.CtStatement>
	SET: setForUpdate(java.util.List) : T
	ADD_LAST: addForUpdate(spoon.reflect.code.CtStatement) : T
	REMOVE: removeForUpdate(spoon.reflect.code.CtStatement) : boolean
----------------------------------------------------------
CtProvidedService CtRole.IMPLEMENTATION_TYPE
	ItemType: java.util.List<spoon.reflect.reference.CtTypeReference>
	GET: getImplementationTypes() : java.util.List<spoon.reflect.reference.CtTypeReference>
	SET: setImplementationTypes(java.util.List) : T
	ADD_LAST: addImplementationType(spoon.reflect.reference.CtTypeReference) : T
----------------------------------------------------------
CtImport CtRole.IMPORT_REFERENCE
	ItemType: spoon.reflect.reference.CtReference
	GET: getReference() : spoon.reflect.reference.CtReference
	SET: setReference(spoon.reflect.reference.CtReference) : T
----------------------------------------------------------
CtType CtRole.INTERFACE
	ItemType: java.util.Set<spoon.reflect.reference.CtTypeReference<?>>
	GET: getSuperInterfaces() : java.util.Set<spoon.reflect.reference.CtTypeReference<?>>
	SET: setSuperInterfaces(java.util.Set) : C
	ADD_LAST: addSuperInterface(spoon.reflect.reference.CtTypeReference) : C
	REMOVE: removeSuperInterface(spoon.reflect.reference.CtTypeReference) : boolean
----------------------------------------------------------
CtTypeInformation CtRole.INTERFACE
	ItemType: java.util.Set<spoon.reflect.reference.CtTypeReference<?>>
	GET: getSuperInterfaces() : java.util.Set<spoon.reflect.reference.CtTypeReference<?>>
----------------------------------------------------------
CtMethod CtRole.IS_DEFAULT
	ItemType: boolean
	GET: isDefaultMethod() : boolean
	SET: setDefaultMethod(boolean) : C
----------------------------------------------------------
CtFieldReference CtRole.IS_FINAL
	ItemType: boolean
	GET: isFinal() : boolean
	SET: setFinal(boolean) : C
----------------------------------------------------------
CtElement CtRole.IS_IMPLICIT
	ItemType: boolean
	GET: isImplicit() : boolean
	SET: setImplicit(boolean) : E
----------------------------------------------------------
CtShadowable CtRole.IS_SHADOW
	ItemType: boolean
	GET: isShadow() : boolean
	SET: setShadow(boolean) : E
----------------------------------------------------------
CtExecutableReference CtRole.IS_STATIC
	ItemType: boolean
	GET: isStatic() : boolean
	SET: setStatic(boolean) : C
----------------------------------------------------------
CtFieldReference CtRole.IS_STATIC
	ItemType: boolean
	GET: isStatic() : boolean
	SET: setStatic(boolean) : C
----------------------------------------------------------
CtTypeParameterReference CtRole.IS_UPPER
	ItemType: boolean
	GET: isUpper() : boolean
	SET: setUpper(boolean) : T
----------------------------------------------------------
CtParameter CtRole.IS_VARARGS
	ItemType: boolean
	GET: isVarArgs() : boolean
	SET: setVarArgs(boolean) : C
----------------------------------------------------------
CtJavaDocTag CtRole.JAVADOC_TAG_VALUE
	ItemType: String
	GET: getParam() : String
	SET: setParam(java.lang.String) : E
----------------------------------------------------------
CtStatement CtRole.LABEL
	ItemType: String
	GET: getLabel() : String
	SET: setLabel(java.lang.String) : T
----------------------------------------------------------
CtBinaryOperator CtRole.LEFT_OPERAND
	ItemType: spoon.reflect.code.CtExpression<?>
	GET: getLeftHandOperand() : spoon.reflect.code.CtExpression<?>
	SET: setLeftHandOperand(spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtType CtRole.METHOD
	ItemType: java.util.Set<spoon.reflect.declaration.CtMethod<?>>
	GET: getMethods() : java.util.Set<spoon.reflect.declaration.CtMethod<?>>
	SET: setMethods(java.util.Set) : C
	ADD_LAST: addMethod(spoon.reflect.declaration.CtMethod) : C
	REMOVE: removeMethod(spoon.reflect.declaration.CtMethod) : boolean
	GET_BY: getMethodsByName(java.lang.String) : java.util.List<spoon.reflect.declaration.CtMethod<?>>
	OTHER: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[]) : spoon.reflect.declaration.CtMethod<R>
----------------------------------------------------------
CtModifiable CtRole.MODIFIER
	ItemType: java.util.Set<spoon.reflect.declaration.ModifierKind>
	GET: getModifiers() : java.util.Set<spoon.reflect.declaration.ModifierKind>
	SET: setModifiers(java.util.Set) : T
	ADD_LAST: addModifier(spoon.reflect.declaration.ModifierKind) : T
	REMOVE: removeModifier(spoon.reflect.declaration.ModifierKind) : T
----------------------------------------------------------
CtModule CtRole.MODIFIER
	ItemType: boolean
	GET: isOpenModule() : boolean
	SET: setIsOpenModule(boolean) : T
----------------------------------------------------------
CtModuleRequirement CtRole.MODIFIER
	ItemType: java.util.Set<spoon.reflect.declaration.CtModuleRequirement.RequiresModifier>
	GET: getRequiresModifiers() : java.util.Set<spoon.reflect.declaration.CtModuleRequirement.RequiresModifier>
	SET: setRequiresModifiers(java.util.Set) : T
----------------------------------------------------------
CtTypeInformation CtRole.MODIFIER
	ItemType: java.util.Set<spoon.reflect.declaration.ModifierKind>
	GET: getModifiers() : java.util.Set<spoon.reflect.declaration.ModifierKind>
----------------------------------------------------------
CtModule CtRole.MODULE_DIRECTIVE
	ItemType: java.util.List<spoon.reflect.declaration.CtModuleDirective>
	GET: getModuleDirectives() : java.util.List<spoon.reflect.declaration.CtModuleDirective>
	SET: setModuleDirectives(java.util.List) : T
	ADD_LAST: addModuleDirective(spoon.reflect.declaration.CtModuleDirective) : T
	ADD_ON: addModuleDirectiveAt(int,spoon.reflect.declaration.CtModuleDirective) : T
	REMOVE: removeModuleDirective(spoon.reflect.declaration.CtModuleDirective) : T
----------------------------------------------------------
CtModuleRequirement CtRole.MODULE_REF
	ItemType: spoon.reflect.reference.CtModuleReference
	GET: getModuleReference() : spoon.reflect.reference.CtModuleReference
	SET: setModuleReference(spoon.reflect.reference.CtModuleReference) : T
----------------------------------------------------------
CtPackageExport CtRole.MODULE_REF
	ItemType: java.util.List<spoon.reflect.reference.CtModuleReference>
	GET: getTargetExport() : java.util.List<spoon.reflect.reference.CtModuleReference>
	SET: setTargetExport(java.util.List) : T
	ADD_LAST: addTargetExport(spoon.reflect.reference.CtModuleReference) : T
----------------------------------------------------------
CtMultiTypedElement CtRole.MULTI_TYPE
	ItemType: java.util.List<spoon.reflect.reference.CtTypeReference<?>>
	GET: getMultiTypes() : java.util.List<spoon.reflect.reference.CtTypeReference<?>>
	SET: setMultiTypes(java.util.List) : T
	ADD_LAST: addMultiType(spoon.reflect.reference.CtTypeReference) : T
	REMOVE: removeMultiType(spoon.reflect.reference.CtTypeReference) : boolean
----------------------------------------------------------
CtNamedElement CtRole.NAME
	ItemType: String
	GET: getSimpleName() : String
	SET: setSimpleName(java.lang.String) : T
----------------------------------------------------------
CtReference CtRole.NAME
	ItemType: String
	GET: getSimpleName() : String
	SET: setSimpleName(java.lang.String) : T
----------------------------------------------------------
CtNewClass CtRole.NESTED_TYPE
	ItemType: spoon.reflect.declaration.CtClass<?>
	GET: getAnonymousClass() : spoon.reflect.declaration.CtClass<?>
	SET: setAnonymousClass(spoon.reflect.declaration.CtClass) : N
----------------------------------------------------------
CtType CtRole.NESTED_TYPE
	ItemType: java.util.Set<spoon.reflect.declaration.CtType<?>>
	GET: getNestedTypes() : java.util.Set<spoon.reflect.declaration.CtType<?>>
	SET: setNestedTypes(java.util.Set) : C
	ADD_LAST: addNestedType(spoon.reflect.declaration.CtType) : C
	REMOVE: removeNestedType(spoon.reflect.declaration.CtType) : boolean
	GET_BY: getNestedType(java.lang.String) : N
----------------------------------------------------------
CtModule CtRole.OPENED_PACKAGE
	ItemType: java.util.List<spoon.reflect.declaration.CtPackageExport>
	GET: getOpenedPackages() : java.util.List<spoon.reflect.declaration.CtPackageExport>
	SET: setOpenedPackages(java.util.List) : T
	ADD_LAST: addOpenedPackage(spoon.reflect.declaration.CtPackageExport) : T
	REMOVE: removeOpenedPackage(spoon.reflect.declaration.CtPackageExport) : T
----------------------------------------------------------
CtPackageExport CtRole.OPENED_PACKAGE
	ItemType: boolean
	GET: isOpenedPackage() : boolean
	SET: setOpenedPackage(boolean) : T
----------------------------------------------------------
CtBinaryOperator CtRole.OPERATOR_KIND
	ItemType: spoon.reflect.code.BinaryOperatorKind
	GET: getKind() : spoon.reflect.code.BinaryOperatorKind
	SET: setKind(spoon.reflect.code.BinaryOperatorKind) : C
----------------------------------------------------------
CtOperatorAssignment CtRole.OPERATOR_KIND
	ItemType: spoon.reflect.code.BinaryOperatorKind
	GET: getKind() : spoon.reflect.code.BinaryOperatorKind
	SET: setKind(spoon.reflect.code.BinaryOperatorKind) : C
----------------------------------------------------------
CtUnaryOperator CtRole.OPERATOR_KIND
	ItemType: spoon.reflect.code.UnaryOperatorKind
	GET: getKind() : spoon.reflect.code.UnaryOperatorKind
	SET: setKind(spoon.reflect.code.UnaryOperatorKind) : C
----------------------------------------------------------
CtPackageExport CtRole.PACKAGE_REF
	ItemType: spoon.reflect.reference.CtPackageReference
	GET: getPackageReference() : spoon.reflect.reference.CtPackageReference
	SET: setPackageReference(spoon.reflect.reference.CtPackageReference) : T
----------------------------------------------------------
CtTypeReference CtRole.PACKAGE_REF
	ItemType: spoon.reflect.reference.CtPackageReference
	GET: getPackage() : spoon.reflect.reference.CtPackageReference
	SET: setPackage(spoon.reflect.reference.CtPackageReference) : C
----------------------------------------------------------
CtCatch CtRole.PARAMETER
	ItemType: spoon.reflect.code.CtCatchVariable<? extends Throwable>
	GET: getParameter() : spoon.reflect.code.CtCatchVariable<? extends Throwable>
	SET: setParameter(spoon.reflect.code.CtCatchVariable) : T
----------------------------------------------------------
CtExecutable CtRole.PARAMETER
	ItemType: java.util.List<spoon.reflect.declaration.CtParameter<?>>
	GET: getParameters() : java.util.List<spoon.reflect.declaration.CtParameter<?>>
	SET: setParameters(java.util.List) : T
	ADD_LAST: addParameter(spoon.reflect.declaration.CtParameter) : T
----------------------------------------------------------
CtElement CtRole.POSITION
	ItemType: spoon.reflect.cu.SourcePosition
	GET: getPosition() : spoon.reflect.cu.SourcePosition
	SET: setPosition(spoon.reflect.cu.SourcePosition) : E
----------------------------------------------------------
CtModule CtRole.PROVIDED_SERVICE
	ItemType: java.util.List<spoon.reflect.declaration.CtProvidedService>
	GET: getProvidedServices() : java.util.List<spoon.reflect.declaration.CtProvidedService>
	SET: setProvidedServices(java.util.List) : T
	ADD_LAST: addProvidedService(spoon.reflect.declaration.CtProvidedService) : T
	REMOVE: removeProvidedService(spoon.reflect.declaration.CtProvidedService) : T
----------------------------------------------------------
CtModule CtRole.REQUIRED_MODULE
	ItemType: java.util.List<spoon.reflect.declaration.CtModuleRequirement>
	GET: getRequiredModules() : java.util.List<spoon.reflect.declaration.CtModuleRequirement>
	SET: setRequiredModules(java.util.List) : T
	ADD_LAST: addRequiredModule(spoon.reflect.declaration.CtModuleRequirement) : T
	REMOVE: removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement) : T
----------------------------------------------------------
CtBinaryOperator CtRole.RIGHT_OPERAND
	ItemType: spoon.reflect.code.CtExpression<?>
	GET: getRightHandOperand() : spoon.reflect.code.CtExpression<?>
	SET: setRightHandOperand(spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtModule CtRole.SERVICE_TYPE
	ItemType: java.util.List<spoon.reflect.declaration.CtUsedService>
	GET: getUsedServices() : java.util.List<spoon.reflect.declaration.CtUsedService>
	SET: setUsedServices(java.util.List) : T
	ADD_LAST: addUsedService(spoon.reflect.declaration.CtUsedService) : T
	REMOVE: removeUsedService(spoon.reflect.declaration.CtUsedService) : T
----------------------------------------------------------
CtProvidedService CtRole.SERVICE_TYPE
	ItemType: spoon.reflect.reference.CtTypeReference
	GET: getServiceType() : spoon.reflect.reference.CtTypeReference
	SET: setServiceType(spoon.reflect.reference.CtTypeReference) : T
----------------------------------------------------------
CtUsedService CtRole.SERVICE_TYPE
	ItemType: spoon.reflect.reference.CtTypeReference
	GET: getServiceType() : spoon.reflect.reference.CtTypeReference
	SET: setServiceType(spoon.reflect.reference.CtTypeReference) : T
----------------------------------------------------------
CtCodeSnippet CtRole.SNIPPET
	ItemType: String
	GET: getValue() : String
	SET: setValue(java.lang.String) : C
----------------------------------------------------------
CtStatementList CtRole.STATEMENT
	ItemType: java.util.List<spoon.reflect.code.CtStatement>
	GET: getStatements() : java.util.List<spoon.reflect.code.CtStatement>
	SET: setStatements(java.util.List) : T
	ADD_FIRST: insertBegin(spoon.reflect.code.CtStatement) : T
	ADD_LAST: addStatement(spoon.reflect.code.CtStatement) : T
	ADD_ON: addStatement(int,spoon.reflect.code.CtStatement) : T
	REMOVE: removeStatement(spoon.reflect.code.CtStatement) : void
----------------------------------------------------------
CtModule CtRole.SUB_PACKAGE
	ItemType: spoon.reflect.declaration.CtPackage
	GET: getRootPackage() : spoon.reflect.declaration.CtPackage
	SET: setRootPackage(spoon.reflect.declaration.CtPackage) : T
----------------------------------------------------------
CtPackage CtRole.SUB_PACKAGE
	ItemType: java.util.Set<spoon.reflect.declaration.CtPackage>
	GET: getPackages() : java.util.Set<spoon.reflect.declaration.CtPackage>
	SET: setPackages(java.util.Set) : T
	ADD_LAST: addPackage(spoon.reflect.declaration.CtPackage) : T
	REMOVE: removePackage(spoon.reflect.declaration.CtPackage) : boolean
	GET_BY: getPackage(java.lang.String) : spoon.reflect.declaration.CtPackage
----------------------------------------------------------
CtType CtRole.SUPER_TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<?>
	GET: getSuperclass() : spoon.reflect.reference.CtTypeReference<?>
	SET: setSuperclass(spoon.reflect.reference.CtTypeReference) : C
----------------------------------------------------------
CtTypeInformation CtRole.SUPER_TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<?>
	GET: getSuperclass() : spoon.reflect.reference.CtTypeReference<?>
----------------------------------------------------------
CtTargetedExpression CtRole.TARGET
	ItemType: spoon.reflect.code.CtExpression<?>
	GET: getTarget() : T
	SET: setTarget(T extends spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtLabelledFlowBreak CtRole.TARGET_LABEL
	ItemType: String
	GET: getTargetLabel() : String
	SET: setTargetLabel(java.lang.String) : T
----------------------------------------------------------
CtConditional CtRole.THEN
	ItemType: spoon.reflect.code.CtExpression<T>
	GET: getThenExpression() : spoon.reflect.code.CtExpression<T>
	SET: setThenExpression(spoon.reflect.code.CtExpression) : C
----------------------------------------------------------
CtIf CtRole.THEN
	ItemType: spoon.reflect.code.CtStatement
	GET: getThenStatement() : S
	SET: setThenStatement(spoon.reflect.code.CtStatement) : T
----------------------------------------------------------
CtExecutable CtRole.THROWN
	ItemType: java.util.Set<spoon.reflect.reference.CtTypeReference<? extends Throwable>>
	GET: getThrownTypes() : java.util.Set<spoon.reflect.reference.CtTypeReference<? extends Throwable>>
	SET: setThrownTypes(java.util.Set) : T
	ADD_LAST: addThrownType(spoon.reflect.reference.CtTypeReference) : T
	REMOVE: removeThrownType(spoon.reflect.reference.CtTypeReference) : boolean
----------------------------------------------------------
CtTryWithResource CtRole.TRY_RESOURCE
	ItemType: java.util.List<spoon.reflect.code.CtLocalVariable<?>>
	GET: getResources() : java.util.List<spoon.reflect.code.CtLocalVariable<?>>
	SET: setResources(java.util.List) : T
	ADD_LAST: addResource(spoon.reflect.code.CtLocalVariable) : T
	REMOVE: removeResource(spoon.reflect.code.CtLocalVariable) : boolean
----------------------------------------------------------
CtArrayTypeReference CtRole.TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<?>
	GET: getComponentType() : spoon.reflect.reference.CtTypeReference<?>
	SET: setComponentType(spoon.reflect.reference.CtTypeReference) : C
----------------------------------------------------------
CtExecutableReference CtRole.TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<T>
	GET: getType() : spoon.reflect.reference.CtTypeReference<T>
	SET: setType(spoon.reflect.reference.CtTypeReference) : C
----------------------------------------------------------
CtTypedElement CtRole.TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<T>
	GET: getType() : spoon.reflect.reference.CtTypeReference<T>
	SET: setType(spoon.reflect.reference.CtTypeReference) : C
----------------------------------------------------------
CtVariableReference CtRole.TYPE
	ItemType: spoon.reflect.reference.CtTypeReference<T>
	GET: getType() : spoon.reflect.reference.CtTypeReference<T>
	SET: setType(spoon.reflect.reference.CtTypeReference) : C
----------------------------------------------------------
CtActualTypeContainer CtRole.TYPE_ARGUMENT
	ItemType: java.util.List<spoon.reflect.reference.CtTypeReference<?>>
	GET: getActualTypeArguments() : java.util.List<spoon.reflect.reference.CtTypeReference<?>>
	SET: setActualTypeArguments(java.util.List) : T
----------------------------------------------------------
CtType CtRole.TYPE_MEMBER
	ItemType: java.util.List<spoon.reflect.declaration.CtTypeMember>
	GET: getTypeMembers() : java.util.List<spoon.reflect.declaration.CtTypeMember>
	SET: setTypeMembers(java.util.List) : C
	ADD_LAST: addTypeMember(spoon.reflect.declaration.CtTypeMember) : C
	ADD_ON: addTypeMemberAt(int,spoon.reflect.declaration.CtTypeMember) : C
	REMOVE: removeTypeMember(spoon.reflect.declaration.CtTypeMember) : boolean
----------------------------------------------------------
CtFormalTypeDeclarer CtRole.TYPE_PARAMETER
	ItemType: java.util.List<spoon.reflect.declaration.CtTypeParameter>
	GET: getFormalCtTypeParameters() : java.util.List<spoon.reflect.declaration.CtTypeParameter>
	SET: setFormalCtTypeParameters(java.util.List) : T
	ADD_LAST: addFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter) : T
	REMOVE: removeFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter) : boolean
----------------------------------------------------------
CtAnnotation CtRole.VALUE
	ItemType: java.util.Map<String, spoon.reflect.code.CtExpression>
	GET: getValues() : java.util.Map<String, spoon.reflect.code.CtExpression>
	SET: setValues(java.util.Map) : T
	GET_BY: getValue(java.lang.String) : T
	OTHER: addValue(java.lang.String,java.lang.Object) : T
----------------------------------------------------------
CtEnum CtRole.VALUE
	ItemType: java.util.List<spoon.reflect.declaration.CtEnumValue<?>>
	GET: getEnumValues() : java.util.List<spoon.reflect.declaration.CtEnumValue<?>>
	SET: setEnumValues(java.util.List) : C
	ADD_LAST: addEnumValue(spoon.reflect.declaration.CtEnumValue) : C
	REMOVE: removeEnumValue(spoon.reflect.declaration.CtEnumValue) : boolean
	GET_BY: getEnumValue(java.lang.String) : spoon.reflect.declaration.CtEnumValue<?>
----------------------------------------------------------
CtLiteral CtRole.VALUE
	ItemType: java.lang.Object
	GET: getValue() : T
	SET: setValue(T) : C
----------------------------------------------------------
CtVariableAccess CtRole.VARIABLE
	ItemType: spoon.reflect.reference.CtVariableReference<T>
	GET: getVariable() : spoon.reflect.reference.CtVariableReference<T>
	SET: setVariable(spoon.reflect.reference.CtVariableReference) : C
----------------------------------------------------------
