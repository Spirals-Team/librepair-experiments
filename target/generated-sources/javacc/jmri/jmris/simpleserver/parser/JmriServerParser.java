/* JmriServerParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. JmriServerParser.java */
package jmri.jmris.simpleserver.parser;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * This file defines a JavaTree/JavaCC parser implementation for
 * the JMRI simple interconnection protocol.
 *
 * @author Paul Bender Copyright (C) 2015
 */

// This is generated code.  DO NOT ATTEMPT TO FIX ANY FINDBUGS WARNINGS
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"NM_METHOD_NAMING_CONVENTION","NM_CONFUSING","RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"})

public class JmriServerParser/*@bgen(jjtree)*/implements JmriServerParserTreeConstants, JmriServerParserConstants {/*@bgen(jjtree)*/
  protected JJTJmriServerParserState jjtree = new JJTJmriServerParserState();
   private final static Logger log = LoggerFactory.getLogger(JmriServerParser.class);

   /*
    * The error_skipto method is from the JavaCC error recovery tutorial
    * https://javacc.org/tutorials/errorrecovery
    */
   private void error_skipto(int kind){
      ParseException e = generateParseException();  // generate the exception object.
      log.error("Recovery after Parse Exception");
      log.debug(e.toString());  // print the error message
      Token t;
      do {
        t = getNextToken();
      } while (t.kind != kind);
        // The above loop consumes tokens all the way up to a token of
        // "kind".  We use a do-while loop rather than a while because the
        // current token is the one immediately before the erroneous token
      }

// Lexical specifications begin here
  final public 
SimpleNode command() throws ParseException {/*@bgen(jjtree) command */
  ASTcommand jjtn000 = new ASTcommand(JJTCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case POWER:{
          powercmd();
          break;
          }
        case TURNOUT:{
          turnoutcmd();
          break;
          }
        case REPORTER:{
          reportercmd();
          break;
          }
        case LIGHT:{
          lightcmd();
          break;
          }
        case SENSOR:{
          sensorcmd();
          break;
          }
        case OPERATIONS:{
          operationscmd();
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(EOL);
      } catch (ParseException e) {
error_skipto(EOL);
      }
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
log.debug("Command Production");
       {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode powercmd() throws ParseException {/*@bgen(jjtree) powercmd */
  ASTpowercmd jjtn000 = new ASTpowercmd(JJTPOWERCMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      power();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ONOFF:{
        onoff();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode power() throws ParseException {/*@bgen(jjtree) power */
                    ASTpower jjtn000 = new ASTpower(JJTPOWER);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(POWER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode onoff() throws ParseException {/*@bgen(jjtree) onoff */
                    ASTonoff jjtn000 = new ASTonoff(JJTONOFF);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ONOFF);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("OnOff Production " +t.image);
     jjtn000.jjtSetValue(t.image);
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode turnoutcmd() throws ParseException {/*@bgen(jjtree) turnoutcmd */
  ASTturnoutcmd jjtn000 = new ASTturnoutcmd(JJTTURNOUTCMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      turnout();
      turnoutdevice();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THROWNCLOSED:{
        thrownclosed();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode turnout() throws ParseException {/*@bgen(jjtree) turnout */
                      ASTturnout jjtn000 = new ASTturnout(JJTTURNOUT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TURNOUT);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode turnoutdevice() throws ParseException {/*@bgen(jjtree) turnoutdevice */
                            ASTturnoutdevice jjtn000 = new ASTturnoutdevice(JJTTURNOUTDEVICE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(JMRITURNOUT);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Turnout device Production " +t.image);
     jjtn000.jjtSetValue(t.image);
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode thrownclosed() throws ParseException {/*@bgen(jjtree) thrownclosed */
                           ASTthrownclosed jjtn000 = new ASTthrownclosed(JJTTHROWNCLOSED);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(THROWNCLOSED);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Thrown/Closed Production " +t.image);
     jjtn000.jjtSetValue(t.image);
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode lightcmd() throws ParseException {/*@bgen(jjtree) lightcmd */
  ASTlightcmd jjtn000 = new ASTlightcmd(JJTLIGHTCMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      light();
      lightdevice();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ONOFF:{
        onoff();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode light() throws ParseException {/*@bgen(jjtree) light */
                    ASTlight jjtn000 = new ASTlight(JJTLIGHT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LIGHT);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode lightdevice() throws ParseException {/*@bgen(jjtree) lightdevice */
                          ASTlightdevice jjtn000 = new ASTlightdevice(JJTLIGHTDEVICE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(JMRILIGHT);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Light device Production " +t.image);
     jjtn000.jjtSetValue(t.image);
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode reportercmd() throws ParseException {/*@bgen(jjtree) reportercmd */
  ASTreportercmd jjtn000 = new ASTreportercmd(JJTREPORTERCMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      reporter();
      reporterdevice();
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode reporter() throws ParseException {/*@bgen(jjtree) reporter */
                       ASTreporter jjtn000 = new ASTreporter(JJTREPORTER);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(REPORTER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode reporterdevice() throws ParseException {/*@bgen(jjtree) reporterdevice */
                             ASTreporterdevice jjtn000 = new ASTreporterdevice(JJTREPORTERDEVICE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(JMRIREPORTER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Reporter device Production " +t.image);
     jjtn000.jjtSetValue(t.image);
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode sensorcmd() throws ParseException {/*@bgen(jjtree) sensorcmd */
  ASTsensorcmd jjtn000 = new ASTsensorcmd(JJTSENSORCMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      sensor();
      sensordevice();
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode sensor() throws ParseException {/*@bgen(jjtree) sensor */
                     ASTsensor jjtn000 = new ASTsensor(JJTSENSOR);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SENSOR);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode sensordevice() throws ParseException {/*@bgen(jjtree) sensordevice */
                           ASTsensordevice jjtn000 = new ASTsensordevice(JJTSENSORDEVICE);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(JMRISENSOR);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Sensor device Production " +t.image);
     jjtn000.jjtSetValue(t.image);
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode operationscmd() throws ParseException {/*@bgen(jjtree) operationscmd */
  ASToperationscmd jjtn000 = new ASToperationscmd(JJTOPERATIONSCMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      operations();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRAINS:{
        trains();
        break;
        }
      case LOCATIONS:{
        locations();
        break;
        }
      case TERMINATE:{
        terminate();
        break;
        }
      case TRAIN:{
        traincmd();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode operations() throws ParseException {/*@bgen(jjtree) operations */
                         ASToperations jjtn000 = new ASToperations(JJTOPERATIONS);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OPERATIONS);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode trains() throws ParseException {/*@bgen(jjtree) trains */
                     ASTtrains jjtn000 = new ASTtrains(JJTTRAINS);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TRAINS);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode locations() throws ParseException {/*@bgen(jjtree) locations */
                        ASTlocations jjtn000 = new ASTlocations(JJTLOCATIONS);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LOCATIONS);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode terminate() throws ParseException {/*@bgen(jjtree) terminate */
                        ASTterminate jjtn000 = new ASTterminate(JJTTERMINATE);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TERMINATE);
      attributelist();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode traincmd() throws ParseException {/*@bgen(jjtree) traincmd */
                       ASTtraincmd jjtn000 = new ASTtraincmd(JJTTRAINCMD);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);SimpleNode s;
    try {
      jj_consume_token(TRAIN);
      jj_consume_token(EQUALS);
      s = value();
      jj_consume_token(COMMA);
      attributename();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        jj_consume_token(EQUALS);
        value();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(s.jjtGetValue());
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode attributelist() throws ParseException {/*@bgen(jjtree) attributelist */
                            ASTattributelist jjtn000 = new ASTattributelist(JJTATTRIBUTELIST);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      attributename();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        jj_consume_token(EQUALS);
        value();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          attributelist();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode attributename() throws ParseException {/*@bgen(jjtree) attributename */
  ASTattributename jjtn000 = new ASTattributename(JJTATTRIBUTENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRAIN:{
        jj_consume_token(TRAIN);
        break;
        }
      case TRAINLENGTH:{
        jj_consume_token(TRAINLENGTH);
        break;
        }
      case TRAINWEIGHT:{
        jj_consume_token(TRAINWEIGHT);
        break;
        }
      case TRAINCARS:{
        jj_consume_token(TRAINCARS);
        break;
        }
      case TRAINLEADLOCO:{
        jj_consume_token(TRAINLEADLOCO);
        break;
        }
      case TRAINCABOOSE:{
        jj_consume_token(TRAINCABOOSE);
        break;
        }
      case TRAINSTATUS:{
        jj_consume_token(TRAINSTATUS);
        break;
        }
      case TRAINLOCATION:{
        jj_consume_token(TRAINLOCATION);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode value() throws ParseException {/*@bgen(jjtree) value */
  ASTvalue jjtn000 = new ASTvalue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public JmriServerParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x5f00,0x8000,0x40000,0x8000,0xe000000,0x0,0x40,0x0,0xf2000000,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x8,0x10,0x0,0x10,0x7,};
	}

  /** Constructor with InputStream. */
  public JmriServerParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JmriServerParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JmriServerParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JmriServerParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new JmriServerParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JmriServerParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JmriServerParser(JmriServerParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JmriServerParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[69];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 9; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 69; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  }
