/* SRCPParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. SRCPParser.java */
package jmri.jmris.srcp.parser;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * This file defines a JavaTree/JavaCC parser implementation for
 * the SRCP protocol.
 *
 * @author Paul Bender Copyright (C) 2010
 */

// This is generated code.  DO NOT ATTEMPT TO FIX ANY FINDBUGS WARNINGS
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"NM_METHOD_NAMING_CONVENTION","NM_CONFUSING","RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"})

public class SRCPParser/*@bgen(jjtree)*/implements SRCPParserTreeConstants, SRCPParserConstants {/*@bgen(jjtree)*/
  protected JJTSRCPParserState jjtree = new JJTSRCPParserState();
   private final static Logger log = LoggerFactory.getLogger(SRCPParser.class);

// Lexical specifications begin here
  final public 
SimpleNode handshakecommand() throws ParseException {/*@bgen(jjtree) handshakecommand */
  ASThandshakecommand jjtn000 = new ASThandshakecommand(JJTHANDSHAKECOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        go();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SET:{
          handshake_set();
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(EOL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Handshake Command Production");
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode command() throws ParseException {/*@bgen(jjtree) command */
  ASTcommand jjtn000 = new ASTcommand(JJTCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(4)) {
        get();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SET:{
          set();
          break;
          }
        case CHECK:{
          check();
          break;
          }
        case WAIT:{
          wait_cmd();
          break;
          }
        case INIT:{
          init();
          break;
          }
        case TERM:{
          term();
          break;
          }
        case RESET:{
          reset();
          break;
          }
        case VERIFY:{
          verify();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(EOL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Command Production");
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode serviceversion() throws ParseException {/*@bgen(jjtree) serviceversion */
                             ASTserviceversion jjtn000 = new ASTserviceversion(JJTSERVICEVERSION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(SRCP);
      t = jj_consume_token(VERSION);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Service Version Production");
    jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode connectionmode() throws ParseException {/*@bgen(jjtree) connectionmode */
                             ASTconnectionmode jjtn000 = new ASTconnectionmode(JJTCONNECTIONMODE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMAND:{
        t = jj_consume_token(COMMAND);
        break;
        }
      case INFO:{
        t = jj_consume_token(INFO);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Connection Mode Production");
    jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode bus() throws ParseException {/*@bgen(jjtree) bus */
                  ASTbus jjtn000 = new ASTbus(JJTBUS);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);SimpleNode s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:{
        s = zeroaddress();
        break;
        }
      case NONZEROADDR:{
        s = nonzeroaddress();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("BUS Production "+ s.jjtGetValue());
    jjtn000.jjtSetValue(s.jjtGetValue());
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode address() throws ParseException {/*@bgen(jjtree) address */
                      ASTaddress jjtn000 = new ASTaddress(JJTADDRESS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);SimpleNode s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:{
        s = zeroaddress();
        break;
        }
      case NONZEROADDR:{
        s = nonzeroaddress();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Address Production "+ s.jjtGetValue());
    jjtn000.jjtSetValue(s.jjtGetValue());
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode value() throws ParseException {/*@bgen(jjtree) value */
                    ASTvalue jjtn000 = new ASTvalue(JJTVALUE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);SimpleNode s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:{
        s = zeroaddress();
        break;
        }
      case NONZEROADDR:{
        s = nonzeroaddress();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Value Production "+ s.jjtGetValue());
    jjtn000.jjtSetValue(s.jjtGetValue());
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode cvno() throws ParseException {/*@bgen(jjtree) cvno */
                   ASTcvno jjtn000 = new ASTcvno(JJTCVNO);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);SimpleNode s;
    try {
      s = nonzeroaddress();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("CV Number Production "+ s.jjtGetValue());
    jjtn000.jjtSetValue(s.jjtGetValue());
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode zeroaddress() throws ParseException {/*@bgen(jjtree) zeroaddress */
                          ASTzeroaddress jjtn000 = new ASTzeroaddress(JJTZEROADDRESS);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ZEROADDR);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
//Zero Address allows a leading zero
    log.debug("ZeroAddress Production "+ t.image);
    jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode nonzeroaddress() throws ParseException {/*@bgen(jjtree) nonzeroaddress */
                             ASTnonzeroaddress jjtn000 = new ASTnonzeroaddress(JJTNONZEROADDRESS);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NONZEROADDR);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
//NonZero Address requires a value  >=1, without
    //a leading zero
    log.debug("NonZeroAddress Production "+ t.image);
    jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode port() throws ParseException {/*@bgen(jjtree) port */
                   ASTport jjtn000 = new ASTport(JJTPORT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);SimpleNode s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:{
        s = zeroaddress();
        break;
        }
      case NONZEROADDR:{
        s = nonzeroaddress();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("PORT Production "+ s.jjtGetValue());
    jjtn000.jjtSetValue(s.jjtGetValue());
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode devicegroup() throws ParseException {/*@bgen(jjtree) devicegroup */
                          ASTdevicegroup jjtn000 = new ASTdevicegroup(JJTDEVICEGROUP);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FB:{
        t = jj_consume_token(FB);
        break;
        }
      case GA:{
        t = jj_consume_token(GA);
        break;
        }
      case GL:{
        t = jj_consume_token(GL);
        break;
        }
      case SM:{
        t = jj_consume_token(SM);
        break;
        }
      case TIME:{
        t = jj_consume_token(TIME);
        break;
        }
      case SESSION:{
        t = jj_consume_token(SESSION);
        break;
        }
      case SERVER:{
        t = jj_consume_token(SERVER);
        break;
        }
      case LOCK:{
        t = jj_consume_token(LOCK);
        break;
        }
      case DESCRIPTION:{
        t = jj_consume_token(DESCRIPTION);
        break;
        }
      case POWER:{
        t = jj_consume_token(POWER);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("DeviceGroup Production");
    jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode go() throws ParseException {/*@bgen(jjtree) go */
  ASTgo jjtn000 = new ASTgo(JJTGO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GO);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("GO Production");
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode get() throws ParseException {/*@bgen(jjtree) get */
  ASTget jjtn000 = new ASTget(JJTGET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GET);
      bus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FB:{
        fb();
        address();
        break;
        }
      case GA:{
        ga();
        address();
        port();
        break;
        }
      case GL:{
        gl();
        address();
        break;
        }
      case SM:{
        sm();
        address();
        progmode();
        cvno();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ZEROADDR:
          case NONZEROADDR:{
            ;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            break label_1;
          }
          value();
        }
        break;
        }
      case TIME:{
        time();
        break;
        }
      case POWER:{
        power();
        break;
        }
      case SERVER:{
        server();
        break;
        }
      case SESSION:{
        session();
        address();
        break;
        }
      case LOCK:{
        lock();
        break;
        }
      case DESCRIPTION:{
        description();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("GET Production");
     {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode handshake_set() throws ParseException {/*@bgen(jjtree) handshake_set */
  ASThandshake_set jjtn000 = new ASThandshake_set(JJTHANDSHAKE_SET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PROTOCOLLITTERAL:{
        protocollitteral();
        serviceversion();
        break;
        }
      case CONNECTIONMODELITTERAL:{
        connectionlitteral();
        jj_consume_token(SRCP);
        connectionmode();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Handshake Mode SET Production");
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode protocollitteral() throws ParseException {/*@bgen(jjtree) protocollitteral */
  ASTprotocollitteral jjtn000 = new ASTprotocollitteral(JJTPROTOCOLLITTERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PROTOCOLLITTERAL);
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
log.debug("Protocol Litteral production");
       {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode connectionlitteral() throws ParseException {/*@bgen(jjtree) connectionlitteral */
  ASTconnectionlitteral jjtn000 = new ASTconnectionlitteral(JJTCONNECTIONLITTERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONNECTIONMODELITTERAL);
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
log.debug("Connection Litteral production");
       {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode set() throws ParseException {/*@bgen(jjtree) set */
  ASTset jjtn000 = new ASTset(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SET);
      bus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GL:{
        gl();
        address();
        drivemode();
        address();
        address();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ZEROADDR:
          case NONZEROADDR:
          case DRIVEMODE:
          case FUNCTIONMODE:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_2;
          }
          functionmode();
        }
        break;
        }
      case SM:{
        sm();
        address();
        progmode();
        cvno();
        label_3:
        while (true) {
          value();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ZEROADDR:
          case NONZEROADDR:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_3;
          }
        }
        break;
        }
      case GA:{
        ga();
        address();
        port();
        zeroone();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELAY:{
          delay();
          break;
          }
        case ZEROADDR:
        case NONZEROADDR:{
          timeout();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case FB:{
        fb();
        address();
        zeroone();
        break;
        }
      case TIME:{
        time();
        address();
        address();
        address();
        address();
        break;
        }
      case POWER:{
        power();
        onoff();
        break;
        }
      case LOCK:{
        lock();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("SET Production");
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode term() throws ParseException {/*@bgen(jjtree) term */
  ASTterm jjtn000 = new ASTterm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TERM);
      bus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FB:{
        fb();
        break;
        }
      case GL:{
        gl();
        address();
        break;
        }
      case SM:{
        sm();
        break;
        }
      case POWER:{
        power();
        break;
        }
      case SERVER:{
        server();
        break;
        }
      case LOCK:{
        lock();
        break;
        }
      case TIME:{
        time();
        break;
        }
      case SESSION:{
        session();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROADDR:
        case NONZEROADDR:{
          address();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode check() throws ParseException {/*@bgen(jjtree) check */
  ASTcheck jjtn000 = new ASTcheck(JJTCHECK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CHECK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:
      case NONZEROADDR:{
        bus();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GL:{
          gl();
          break;
          }
        case SM:{
          sm();
          break;
          }
        case GA:{
          ga();
          address();
          port();
          zeroone();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DELAY:{
            delay();
            break;
            }
          case ZEROADDR:
          case NONZEROADDR:{
            timeout();
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case FB:{
          fb();
          address();
          zeroone();
          break;
          }
        case TIME:{
          time();
          break;
          }
        case POWER:{
          power();
          onoff();
          break;
          }
        case LOCK:{
          lock();
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case PROTOCOLLITTERAL:{
        jj_consume_token(PROTOCOLLITTERAL);
        serviceversion();
        break;
        }
      case CONNECTIONMODELITTERAL:{
        jj_consume_token(CONNECTIONMODELITTERAL);
        connectionmode();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Check Production");
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode wait_cmd() throws ParseException {/*@bgen(jjtree) wait_cmd */
  ASTwait_cmd jjtn000 = new ASTwait_cmd(JJTWAIT_CMD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WAIT);
      bus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FB:{
        fb();
        address();
        zeroone();
        timeout();
        break;
        }
      case TIME:{
        time();
        address();
        address();
        address();
        address();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("WAIT Production");
     {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode init() throws ParseException {/*@bgen(jjtree) init */
  ASTinit jjtn000 = new ASTinit(JJTINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INIT);
      bus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FB:{
        fb();
        break;
        }
      case GA:{
        ga();
        address();
        protocol();
        break;
        }
      case GL:{
        gl();
        address();
        protocol();
        break;
        }
      case SM:{
        sm();
        jj_consume_token(NMRA);
        break;
        }
      case TIME:{
        time();
        nonzeroaddress();
        nonzeroaddress();
        break;
        }
      case POWER:{
        power();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("INIT Production");
     {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode reset() throws ParseException {/*@bgen(jjtree) reset */
  ASTreset jjtn000 = new ASTreset(JJTRESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESET);
      bus();
      server();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("RESET Production");
     {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode verify() throws ParseException {/*@bgen(jjtree) verify */
  ASTverify jjtn000 = new ASTverify(JJTVERIFY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VERIFY);
      bus();
      sm();
      address();
      progmode();
      cvno();
      label_4:
      while (true) {
        value();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROADDR:
        case NONZEROADDR:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_4;
        }
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("RESET Production");
     {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode gl() throws ParseException {/*@bgen(jjtree) gl */
                 ASTgl jjtn000 = new ASTgl(JJTGL);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode sm() throws ParseException {/*@bgen(jjtree) sm */
                 ASTsm jjtn000 = new ASTsm(JJTSM);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SM);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode ga() throws ParseException {/*@bgen(jjtree) ga */
                 ASTga jjtn000 = new ASTga(JJTGA);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GA);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode fb() throws ParseException {/*@bgen(jjtree) fb */
                 ASTfb jjtn000 = new ASTfb(JJTFB);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FB);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode time() throws ParseException {/*@bgen(jjtree) time */
                   ASTtime jjtn000 = new ASTtime(JJTTIME);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TIME);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode power() throws ParseException {/*@bgen(jjtree) power */
                    ASTpower jjtn000 = new ASTpower(JJTPOWER);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(POWER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode server() throws ParseException {/*@bgen(jjtree) server */
                     ASTserver jjtn000 = new ASTserver(JJTSERVER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SERVER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode session() throws ParseException {/*@bgen(jjtree) session */
                      ASTsession jjtn000 = new ASTsession(JJTSESSION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SESSION);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode lock() throws ParseException {/*@bgen(jjtree) lock */
                   ASTlock jjtn000 = new ASTlock(JJTLOCK);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LOCK);
      devicegroup();
      address();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:
      case NONZEROADDR:{
        address();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode description() throws ParseException {/*@bgen(jjtree) description */
                          ASTdescription jjtn000 = new ASTdescription(JJTDESCRIPTION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t; SimpleNode s; SimpleNode r;
    try {
      t = jj_consume_token(DESCRIPTION);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FB:
      case GA:
      case GL:
      case SM:
      case LOCK:
      case TIME:
      case POWER:
      case SESSION:
      case DESCRIPTION:
      case SERVER:{
        devicegroup();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROADDR:
        case NONZEROADDR:{
          address();
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode onoff() throws ParseException {/*@bgen(jjtree) onoff */
                    ASTonoff jjtn000 = new ASTonoff(JJTONOFF);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ONOFF);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("OnOff Production " +t.image);
     jjtn000.jjtSetValue(t.image);
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode zeroone() throws ParseException {/*@bgen(jjtree) zeroone */
                      ASTzeroone jjtn000 = new ASTzeroone(JJTZEROONE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);SimpleNode s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:{
        s = zeroaddress();
        break;
        }
      case NONZEROADDR:{
        s = nonzeroaddress();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("ZeroOne Production ");
     jjtn000.jjtSetValue(s.jjtGetValue());
     {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode delay() throws ParseException {/*@bgen(jjtree) delay */
                    ASTdelay jjtn000 = new ASTdelay(JJTDELAY);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      // time timeout is a non-zero integer.  It may be negative.
        t = jj_consume_token(DELAY);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Delay Production " +t.image);
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode timeout() throws ParseException {/*@bgen(jjtree) timeout */
                      ASTtimeout jjtn000 = new ASTtimeout(JJTTIMEOUT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      address();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Timeout Production ");
     {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

// service mode programming modes
  final public 
SimpleNode progmode() throws ParseException {/*@bgen(jjtree) progmode */
                       ASTprogmode jjtn000 = new ASTprogmode(JJTPROGMODE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);SimpleNode s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CVBIT:{
        s = cvbit();
        break;
        }
      case CV:{
        s = cv();
        break;
        }
      case REG:{
        s = reg();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Programming Mode Production ");
     {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode cv() throws ParseException {/*@bgen(jjtree) cv */
  ASTcv jjtn000 = new ASTcv(JJTCV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CV);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode cvbit() throws ParseException {/*@bgen(jjtree) cvbit */
  ASTcvbit jjtn000 = new ASTcvbit(JJTCVBIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CVBIT);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode reg() throws ParseException {/*@bgen(jjtree) reg */
  ASTreg jjtn000 = new ASTreg(JJTREG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REG);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode protocol() throws ParseException {/*@bgen(jjtree) protocol */
                       ASTprotocol jjtn000 = new ASTprotocol(JJTPROTOCOL);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PROTOCOL);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROADDR:
        case NONZEROADDR:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_5;
        }
        address();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
log.debug("Protocol Production "+ t.image);
    jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode drivemode() throws ParseException {/*@bgen(jjtree) drivemode */
                        ASTdrivemode jjtn000 = new ASTdrivemode(JJTDRIVEMODE);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DRIVEMODE:{
        t = jj_consume_token(DRIVEMODE);
        break;
        }
      case ZEROADDR:{
        t = jj_consume_token(ZEROADDR);
        break;
        }
      case NONZEROADDR:{
        t = jj_consume_token(NONZEROADDR);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
log.debug("Drivemode Production "+ t.image);
    jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode functionmode() throws ParseException {/*@bgen(jjtree) functionmode */
                           ASTfunctionmode jjtn000 = new ASTfunctionmode(JJTFUNCTIONMODE);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCTIONMODE:{
        t = jj_consume_token(FUNCTIONMODE);
        break;
        }
      case ZEROADDR:{
        t = jj_consume_token(ZEROADDR);
        break;
        }
      case NONZEROADDR:{
        t = jj_consume_token(NONZEROADDR);
        break;
        }
      case DRIVEMODE:{
        t = jj_consume_token(DRIVEMODE);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
log.debug("Functionmode Production "+ t.image);
    jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(TIME)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(DESCRIPTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(FB)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(LOCK)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_29()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_25()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_3R_24()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_3R_23()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(GA)) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_3R_21()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(SESSION)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(SM)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(NONZEROADDR)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(SERVER)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_scan_token(GET)) return true;
    if (jj_3R_8()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(GL)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(ZEROADDR)) return true;
    return false;
  }

  private boolean jj_3R_6()
 {
    if (jj_scan_token(GO)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SRCPParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0xc0,0xc0,0xc0,0xc0,0x3fb80000,0xc0,0x3fb80000,0x0,0x180c0,0xc0,0x200c0,0x7b80000,0xc0,0x2fa80000,0x200c0,0x7b80000,0xc0,0x2080000,0x6b80000,0xc0,0xc0,0xc0,0x3fb80000,0xc0,0x0,0xc0,0x80c0,0x180c0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x200,0xfe00,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SRCPParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SRCPParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SRCPParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SRCPParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SRCPParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SRCPParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SRCPParser(SRCPParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SRCPParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 31; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[74];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 31; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 74; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

  }
