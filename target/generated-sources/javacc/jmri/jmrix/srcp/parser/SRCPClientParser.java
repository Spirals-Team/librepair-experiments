/* SRCPClientParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. SRCPClientParser.java */
package jmri.jmrix.srcp.parser;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * This file defines a JavaTree/JavaCC parser implementation for
 * the SRCP protocol responses to the client.
 *
 * @author Paul Bender Copyright (C) 2011
 */

// This is generated code.  DO NOT ATTEMPT TO FIX ANY FINDBUGS WARNINGS
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"NM_METHOD_NAMING_CONVENTION","RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"})

public class SRCPClientParser/*@bgen(jjtree)*/implements SRCPClientParserTreeConstants, SRCPClientParserConstants {/*@bgen(jjtree)*/
  protected JJTSRCPClientParserState jjtree = new JJTSRCPClientParserState();
   private final static Logger log = LoggerFactory.getLogger(SRCPClientParser.class.getName());

// Lexical specifications begin here
  final public 
SimpleNode handshakeresponse() throws ParseException {/*@bgen(jjtree) handshakeresponse */
                                ASThandshakeresponse jjtn000 = new ASThandshakeresponse(JJTHANDSHAKERESPONSE);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
                                jjtn000.jjtSetFirstToken(getToken(1));SimpleNode t; SimpleNode s;
    try {
      // this should match any valid response to the client in handshake
        // mode.
        t = timestamp();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SRCP:{
        s = serviceversion();
        break;
        }
      case ZEROADDR:
      case NONZEROADDR:{
        s = inforesponse();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(s.jjtGetValue());
    log.debug("Handshake Response Production: "+jjtn000.jjtGetValue());
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode timestamp() throws ParseException {/*@bgen(jjtree) timestamp */
                         ASTtimestamp jjtn000 = new ASTtimestamp(JJTTIMESTAMP);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMESTAMP:{
        t = jj_consume_token(TIMESTAMP);
        break;
        }
      case NONZEROADDR:{
        t = jj_consume_token(NONZEROADDR);
        break;
        }
      case ZEROADDR:{
        t = jj_consume_token(ZEROADDR);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image);
    log.debug("Timestamp Production: "+jjtn000.jjtGetValue());
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode serviceversion() throws ParseException {/*@bgen(jjtree) serviceversion */
                             ASTserviceversion jjtn000 = new ASTserviceversion(JJTSERVICEVERSION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
                             jjtn000.jjtSetFirstToken(getToken(1));Token t; Token s;
    try {
      t = jj_consume_token(SRCP);
      s = jj_consume_token(VERSION);
      jj_consume_token(EOL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
log.debug("Service Version Production");
    jjtn000.jjtSetValue(t.image +" " + s.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode inforesponse() throws ParseException {/*@bgen(jjtree) inforesponse */
                            ASTinforesponse jjtn000 = new ASTinforesponse(JJTINFORESPONSE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
                            jjtn000.jjtSetFirstToken(getToken(1));SimpleNode t; SimpleNode s;
    try {
      address();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INFO:{
        s = info();
        break;
        }
      case OK:{
        s = ok();
        break;
        }
      case ERROR:{
        s = error();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue("");
    log.debug("Information Response Production: " + jjtn000.jjtGetValue() );
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode info() throws ParseException {/*@bgen(jjtree) info */
                   ASTinfo jjtn000 = new ASTinfo(JJTINFO);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));Token t;SimpleNode s; SimpleNode r;
    try {
      t = jj_consume_token(INFO);
      bus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FB:{
        fb();
        jj_consume_token(EOL);
        break;
        }
      case GA:{
        ga();
        jj_consume_token(EOL);
        break;
        }
      case GL:{
        gl();
        jj_consume_token(EOL);
        break;
        }
      case SM:{
        sm();
        break;
        }
      case TIME:{
        time();
        break;
        }
      case POWER:{
        power();
        break;
        }
      case SESSION:{
        session();
        break;
        }
      case SERVER:{
        server();
        break;
        }
      case DESCRIPTION:{
        description();
        break;
        }
      case LOCK:{
        lock();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image );
    log.debug("Information Response Production: " + jjtn000.jjtGetValue() );
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode error() throws ParseException {/*@bgen(jjtree) error */
                    ASTerror jjtn000 = new ASTerror(JJTERROR);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));Token t;Token r;
    try {
      t = jj_consume_token(ERROR);
      r = jj_consume_token(EOL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image + r.image);
    //jjtThis.jjtSetValue(r.image);
    log.debug("Error Response Production: " + jjtn000.jjtGetValue() );
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode ok() throws ParseException {/*@bgen(jjtree) ok */
                 ASTok jjtn000 = new ASTok(JJTOK);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
                 jjtn000.jjtSetFirstToken(getToken(1));Token t;Token r;
    try {
      t = jj_consume_token(OK);
      r = jj_consume_token(EOL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image + " " + r.image);
    log.debug("OK Response Production: " + jjtn000.jjtGetValue() );
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode commandresponse() throws ParseException {/*@bgen(jjtree) commandresponse */
                              ASTcommandresponse jjtn000 = new ASTcommandresponse(JJTCOMMANDRESPONSE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
                              jjtn000.jjtSetFirstToken(getToken(1));SimpleNode t; SimpleNode s;
    try {
      // this should match any valid response to the client in
        // either command mode or info mode.
        t = timestamp();
      s = inforesponse();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
log.debug("Command Mode Response Production");
    jjtn000.jjtSetValue(s.jjtGetValue() );

    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode bus() throws ParseException {/*@bgen(jjtree) bus */
                  ASTbus jjtn000 = new ASTbus(JJTBUS);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
                  jjtn000.jjtSetFirstToken(getToken(1));SimpleNode s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:{
        s = zeroaddress();
        break;
        }
      case NONZEROADDR:{
        s = nonzeroaddress();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
log.debug("BUS Production "+ s.jjtGetValue());
    jjtn000.jjtSetValue(s.jjtGetValue());
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode power() throws ParseException {/*@bgen(jjtree) power */
                    ASTpower jjtn000 = new ASTpower(JJTPOWER);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));Token t; SimpleNode r;
    try {
      t = jj_consume_token(POWER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ONOFF:{
        r = onoff();
        break;
        }
      case EOL:{
        jj_consume_token(EOL);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
log.debug("POWER Production "+ t.image);
    //jjtThis.jjtSetValue(t.image + " " + r.jjtGetValue() );
    jjtn000.jjtSetValue(t.image );
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public void address() throws ParseException {SimpleNode s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ZEROADDR:{
      s = zeroaddress();
      break;
      }
    case NONZEROADDR:{
      s = nonzeroaddress();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
log.debug("Address Production "+ s.jjtGetValue());
    //jjtThis.jjtSetValue(s.jjtGetValue());
    //return jjtThis;

}

  final public SimpleNode zeroaddress() throws ParseException {/*@bgen(jjtree) zeroaddress */
                          ASTzeroaddress jjtn000 = new ASTzeroaddress(JJTZEROADDRESS);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(ZEROADDR);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
//Zero Address allows a leading zero
    log.debug("ZeroAddress Production "+ t.image);
    jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode nonzeroaddress() throws ParseException {/*@bgen(jjtree) nonzeroaddress */
                             ASTnonzeroaddress jjtn000 = new ASTnonzeroaddress(JJTNONZEROADDRESS);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
                             jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(NONZEROADDR);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
//NonZero Address requires a value  >=1, without
    //a leading zero
    log.debug("NonZeroAddress Production "+ t.image);
    jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode port() throws ParseException {/*@bgen(jjtree) port */
                   ASTport jjtn000 = new ASTport(JJTPORT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));SimpleNode s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:{
        s = zeroaddress();
        break;
        }
      case NONZEROADDR:{
        s = nonzeroaddress();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
log.debug("PORT Production "+ s.jjtGetValue());
    jjtn000.jjtSetValue(s.jjtGetValue());
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode devicegroup() throws ParseException {/*@bgen(jjtree) devicegroup */
                          ASTdevicegroup jjtn000 = new ASTdevicegroup(JJTDEVICEGROUP);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FB:{
        t = jj_consume_token(FB);
        break;
        }
      case GA:{
        t = jj_consume_token(GA);
        break;
        }
      case GL:{
        t = jj_consume_token(GL);
        break;
        }
      case SM:{
        t = jj_consume_token(SM);
        break;
        }
      case TIME:{
        t = jj_consume_token(TIME);
        break;
        }
      case SESSION:{
        t = jj_consume_token(SESSION);
        break;
        }
      case SERVER:{
        t = jj_consume_token(SERVER);
        break;
        }
      case LOCK:{
        t = jj_consume_token(LOCK);
        break;
        }
      case POWER:{
        t = jj_consume_token(POWER);
        break;
        }
      case DESCRIPTION:{
        t = jj_consume_token(DESCRIPTION);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
log.debug("DeviceGroup Production");
    jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode gl() throws ParseException {/*@bgen(jjtree) gl */
                 ASTgl jjtn000 = new ASTgl(JJTGL);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
                 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(GL);
      address();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:
      case NONZEROADDR:
      case DRIVEMODE:
      case PROTOCOL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROADDR:
        case NONZEROADDR:
        case DRIVEMODE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DRIVEMODE:{
            jj_consume_token(DRIVEMODE);
            break;
            }
          case ZEROADDR:
          case NONZEROADDR:{
            address();
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_1:
          while (true) {
            address();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ZEROADDR:
            case NONZEROADDR:{
              ;
              break;
              }
            default:
              jj_la1[10] = jj_gen;
              break label_1;
            }
          }
          break;
          }
        case PROTOCOL:{
          jj_consume_token(PROTOCOL);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ZEROADDR:
          case NONZEROADDR:{
            address();
            address();
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode sm() throws ParseException {/*@bgen(jjtree) sm */
                 ASTsm jjtn000 = new ASTsm(JJTSM);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
                 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(SM);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode ga() throws ParseException {/*@bgen(jjtree) ga */
                 ASTga jjtn000 = new ASTga(JJTGA);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
                 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(GA);
      address();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:
      case NONZEROADDR:
      case PROTOCOL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PROTOCOL:{
          jj_consume_token(PROTOCOL);
          break;
          }
        case ZEROADDR:
        case NONZEROADDR:{
          port();
          zeroone();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode fb() throws ParseException {/*@bgen(jjtree) fb */
                 ASTfb jjtn000 = new ASTfb(JJTFB);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
                 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(FB);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ZEROADDR:
      case NONZEROADDR:{
        address();
        zeroone();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode time() throws ParseException {/*@bgen(jjtree) time */
                   ASTtime jjtn000 = new ASTtime(JJTTIME);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(TIME);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode server() throws ParseException {/*@bgen(jjtree) server */
                     ASTserver jjtn000 = new ASTserver(JJTSERVER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
                     jjtn000.jjtSetFirstToken(getToken(1));Token t;Token r;
    try {
      t = jj_consume_token(SERVER);
      r = jj_consume_token(EOL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image + " " + r.image);
    {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode session() throws ParseException {/*@bgen(jjtree) session */
                      ASTsession jjtn000 = new ASTsession(JJTSESSION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
                      jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(SESSION);
      address();
      jj_consume_token(EOL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode lock() throws ParseException {/*@bgen(jjtree) lock */
                   ASTlock jjtn000 = new ASTlock(JJTLOCK);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(LOCK);
      devicegroup();
      label_2:
      while (true) {
        address();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ZEROADDR:
        case NONZEROADDR:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(EOL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode description() throws ParseException {/*@bgen(jjtree) description */
                          ASTdescription jjtn000 = new ASTdescription(JJTDESCRIPTION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(DESCRIPTION);
      if (jj_2_1(3)) {
        label_3:
        while (true) {
          devicegroup();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FB:
          case GA:
          case GL:
          case SM:
          case LOCK:
          case TIME:
          case POWER:
          case SESSION:
          case DESCRIPTION:
          case SERVER:{
            ;
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            break label_3;
          }
        }
        jj_consume_token(EOL);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FB:
        case GA:
        case GL:
        case SM:
        case LOCK:
        case TIME:
        case POWER:
        case SESSION:
        case SERVER:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FB:{
            fb();
            jj_consume_token(EOL);
            break;
            }
          case GA:{
            ga();
            jj_consume_token(EOL);
            break;
            }
          case GL:{
            gl();
            jj_consume_token(EOL);
            break;
            }
          case SM:{
            sm();
            break;
            }
          case TIME:{
            time();
            break;
            }
          case POWER:{
            power();
            break;
            }
          case SESSION:{
            session();
            break;
            }
          case SERVER:{
            server();
            break;
            }
          case LOCK:{
            lock();
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image);
    {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
    }
    throw new Error("Missing return statement in function");
}

  final public SimpleNode onoff() throws ParseException {/*@bgen(jjtree) onoff */
                    ASTonoff jjtn000 = new ASTonoff(JJTONOFF);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));Token t; Token r;
    try {
      t = jj_consume_token(ONOFF);
      r = jj_consume_token(EOL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
log.debug("OnOff Production " +t.image + " " + r.image);
     jjtn000.jjtSetValue(t.image);
     {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
}

  final public void zeroone() throws ParseException {SimpleNode s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ZEROADDR:{
      s = zeroaddress();
      break;
      }
    case NONZEROADDR:{
      s = nonzeroaddress();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
log.debug("ZeroOne Production ");
     //return jjtThis;

}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_4()
 {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    if (jj_3R_4()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_4()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SRCPClientParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x100000c0,0x10c0,0xc0000000,0xfee0000,0xc0,0x2004,0xc0,0xc0,0xfee0000,0x1c0,0xc0,0xc0,0x101c0,0x101c0,0x100c0,0x100c0,0xc0,0xc0,0xfee0000,0xbee0000,0xbee0000,0xc0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SRCPClientParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SRCPClientParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SRCPClientParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SRCPClientParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SRCPClientParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SRCPClientParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SRCPClientParser(SRCPClientParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SRCPClientParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[63];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 22; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 63; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

  }
