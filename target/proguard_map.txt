com.github.underscore.$ -> com.github.underscore.$:
    java.util.Map FUNCTIONS -> FUNCTIONS
    java.util.Map TEMPLATE_SETTINGS -> TEMPLATE_SETTINGS
    int ARRAY_SIZE_2 -> ARRAY_SIZE_2
    int MIN_PASSWORD_LENGTH_8 -> MIN_PASSWORD_LENGTH_8
    long CAPACITY_SIZE_5 -> CAPACITY_SIZE_5
    long CAPACITY_COEFF_2 -> CAPACITY_COEFF_2
    long CAPACITY_SIZE_16 -> CAPACITY_SIZE_16
    java.util.concurrent.atomic.AtomicInteger UNIQUE_ID -> UNIQUE_ID
    java.lang.String ALL_SYMBOLS -> ALL_SYMBOLS
    java.util.regex.Pattern FORMAT_PATTERN -> FORMAT_PATTERN
    java.lang.Iterable iterable -> iterable
    com.github.underscore.Optional string -> string
    void <init>(java.lang.Iterable) -> <init>
    void <init>(java.lang.String) -> <init>
    void setTemplateKey(java.util.Map,java.lang.String) -> setTemplateKey
    void templateSettings(java.util.Map) -> templateSettings
    com.github.underscore.Function iteratee(java.lang.Object) -> iteratee
    void each(java.lang.Iterable,com.github.underscore.Consumer) -> each
    void eachIndexed(java.lang.Iterable,com.github.underscore.BiConsumer) -> eachIndexed
    void each(com.github.underscore.Consumer) -> each
    void eachRight(java.lang.Iterable,com.github.underscore.Consumer) -> eachRight
    void eachRight(com.github.underscore.Consumer) -> eachRight
    void forEach(java.lang.Iterable,com.github.underscore.Consumer) -> forEach
    void forEachIndexed(java.lang.Iterable,com.github.underscore.BiConsumer) -> forEachIndexed
    void forEach(com.github.underscore.Consumer) -> forEach
    void forEachIndexed(com.github.underscore.BiConsumer) -> forEachIndexed
    void forEachRight(java.lang.Iterable,com.github.underscore.Consumer) -> forEachRight
    void forEachRight(com.github.underscore.Consumer) -> forEachRight
    java.util.List map(java.util.List,com.github.underscore.Function) -> map
    java.util.List map(com.github.underscore.Function) -> map
    java.util.List map(int[],com.github.underscore.Function) -> map
    java.util.Set map(java.util.Set,com.github.underscore.Function) -> map
    java.util.List mapIndexed(java.util.List,com.github.underscore.BiFunction) -> mapIndexed
    java.util.List mapIndexed(com.github.underscore.BiFunction) -> mapIndexed
    java.util.List collect(java.util.List,com.github.underscore.Function) -> collect
    java.util.Set collect(java.util.Set,com.github.underscore.Function) -> collect
    java.lang.Object reduce(java.lang.Iterable,com.github.underscore.BiFunction,java.lang.Object) -> reduce
    java.lang.Object reduce(int[],com.github.underscore.BiFunction,java.lang.Object) -> reduce
    java.lang.Object reduce(java.lang.Object[],com.github.underscore.BiFunction,java.lang.Object) -> reduce
    java.lang.Object foldl(java.lang.Iterable,com.github.underscore.BiFunction,java.lang.Object) -> foldl
    java.lang.Object inject(java.lang.Iterable,com.github.underscore.BiFunction,java.lang.Object) -> inject
    java.lang.Object reduceRight(java.lang.Iterable,com.github.underscore.BiFunction,java.lang.Object) -> reduceRight
    java.lang.Object reduceRight(int[],com.github.underscore.BiFunction,java.lang.Object) -> reduceRight
    java.lang.Object reduceRight(java.lang.Object[],com.github.underscore.BiFunction,java.lang.Object) -> reduceRight
    java.lang.Object foldr(java.lang.Iterable,com.github.underscore.BiFunction,java.lang.Object) -> foldr
    com.github.underscore.Optional find(java.lang.Iterable,com.github.underscore.Predicate) -> find
    com.github.underscore.Optional detect(java.lang.Iterable,com.github.underscore.Predicate) -> detect
    com.github.underscore.Optional findLast(java.lang.Iterable,com.github.underscore.Predicate) -> findLast
    java.util.List filter(java.util.List,com.github.underscore.Predicate) -> filter
    java.util.List filter(com.github.underscore.Predicate) -> filter
    java.util.List filterIndexed(java.util.List,com.github.underscore.PredicateIndexed) -> filterIndexed
    java.util.Set filter(java.util.Set,com.github.underscore.Predicate) -> filter
    java.util.List select(java.util.List,com.github.underscore.Predicate) -> select
    java.util.Set select(java.util.Set,com.github.underscore.Predicate) -> select
    java.util.List reject(java.util.List,com.github.underscore.Predicate) -> reject
    java.util.List reject(com.github.underscore.Predicate) -> reject
    java.util.List rejectIndexed(java.util.List,com.github.underscore.PredicateIndexed) -> rejectIndexed
    java.util.Set reject(java.util.Set,com.github.underscore.Predicate) -> reject
    java.util.List filterFalse(java.util.List,com.github.underscore.Predicate) -> filterFalse
    java.util.List filterFalse(com.github.underscore.Predicate) -> filterFalse
    java.util.Set filterFalse(java.util.Set,com.github.underscore.Predicate) -> filterFalse
    boolean every(java.lang.Iterable,com.github.underscore.Predicate) -> every
    boolean every(com.github.underscore.Predicate) -> every
    boolean all(java.lang.Iterable,com.github.underscore.Predicate) -> all
    boolean all(com.github.underscore.Predicate) -> all
    boolean some(java.lang.Iterable,com.github.underscore.Predicate) -> some
    boolean some(com.github.underscore.Predicate) -> some
    boolean any(java.lang.Iterable,com.github.underscore.Predicate) -> any
    boolean any(com.github.underscore.Predicate) -> any
    boolean contains(java.lang.Iterable,java.lang.Object) -> contains
    boolean contains(java.lang.Object) -> contains
    boolean contains(java.lang.Iterable,java.lang.Object,int) -> contains
    boolean include(java.lang.Iterable,java.lang.Object) -> include
    java.util.List invoke(java.lang.Iterable,java.lang.String,java.util.List) -> invoke
    java.util.List invoke(java.lang.String,java.util.List) -> invoke
    java.util.List invoke(java.lang.Iterable,java.lang.String) -> invoke
    java.util.List invoke(java.lang.String) -> invoke
    java.util.List pluck(java.util.List,java.lang.String) -> pluck
    java.util.List pluck(java.lang.String) -> pluck
    java.util.Set pluck(java.util.Set,java.lang.String) -> pluck
    java.util.List where(java.util.List,java.util.List) -> where
    java.util.List where(java.util.List) -> where
    java.util.Set where(java.util.Set,java.util.List) -> where
    com.github.underscore.Optional findWhere(java.lang.Iterable,java.util.List) -> findWhere
    com.github.underscore.Optional findWhere(java.util.List) -> findWhere
    java.lang.Comparable max(java.util.Collection) -> max
    java.lang.Object max() -> max
    java.lang.Object max(java.util.Collection,com.github.underscore.Function) -> max
    java.lang.Object max(com.github.underscore.Function) -> max
    java.lang.Comparable min(java.util.Collection) -> min
    java.lang.Object min() -> min
    java.lang.Object min(java.util.Collection,com.github.underscore.Function) -> min
    java.lang.Object min(com.github.underscore.Function) -> min
    java.util.List shuffle(java.lang.Iterable) -> shuffle
    java.util.List shuffle() -> shuffle
    java.lang.Object sample(java.lang.Iterable) -> sample
    java.lang.Object sample() -> sample
    java.util.Set sample(java.util.List,int) -> sample
    java.util.List sortWith(java.lang.Iterable,java.util.Comparator) -> sortWith
    java.util.List sortWith(java.util.Comparator) -> sortWith
    java.util.List sortBy(java.lang.Iterable,com.github.underscore.Function) -> sortBy
    java.util.List sortBy(com.github.underscore.Function) -> sortBy
    java.util.List sortBy(java.lang.Iterable,java.lang.Object) -> sortBy
    java.util.Map groupBy(java.lang.Iterable,com.github.underscore.Function) -> groupBy
    java.util.Map groupBy(com.github.underscore.Function) -> groupBy
    java.util.Map indexBy(java.lang.Iterable,java.lang.String) -> indexBy
    java.util.Map indexBy(java.lang.String) -> indexBy
    java.util.Map countBy(java.lang.Iterable,com.github.underscore.Function) -> countBy
    java.util.Map countBy(com.github.underscore.Function) -> countBy
    java.lang.Object[] toArray(java.lang.Iterable) -> toArray
    java.lang.Object[] toArray() -> toArray
    java.util.Map toMap(java.lang.Iterable) -> toMap
    java.util.Map toMap() -> toMap
    java.util.Map toMap(java.util.List) -> toMap
    int size(java.lang.Iterable) -> size
    int size() -> size
    int size(java.lang.Object[]) -> size
    java.util.List partition(java.lang.Iterable,com.github.underscore.Predicate) -> partition
    java.util.List[] partition(java.lang.Object[],com.github.underscore.Predicate) -> partition
    java.lang.Object first(java.lang.Iterable) -> first
    java.lang.Object first(java.lang.Object[]) -> first
    java.util.List first(java.util.List,int) -> first
    java.lang.Object first() -> first
    java.util.List first(int) -> first
    java.lang.Object first(java.lang.Iterable,com.github.underscore.Predicate) -> first
    java.lang.Object first(com.github.underscore.Predicate) -> first
    java.lang.Object firstOrNull(java.lang.Iterable) -> firstOrNull
    java.lang.Object firstOrNull() -> firstOrNull
    java.lang.Object firstOrNull(java.lang.Iterable,com.github.underscore.Predicate) -> firstOrNull
    java.lang.Object firstOrNull(com.github.underscore.Predicate) -> firstOrNull
    java.lang.Object head(java.lang.Iterable) -> head
    java.lang.Object head(java.lang.Object[]) -> head
    java.util.List head(java.util.List,int) -> head
    java.lang.Object head() -> head
    java.util.List head(int) -> head
    java.util.List initial(java.util.List) -> initial
    java.util.List initial(java.util.List,int) -> initial
    java.lang.Object[] initial(java.lang.Object[]) -> initial
    java.lang.Object[] initial(java.lang.Object[],int) -> initial
    java.util.List initial() -> initial
    java.util.List initial(int) -> initial
    java.lang.Object last(java.lang.Object[]) -> last
    java.lang.Object last(java.util.List) -> last
    java.util.List last(java.util.List,int) -> last
    java.lang.Object last() -> last
    java.util.List last(int) -> last
    java.lang.Object last(java.util.List,com.github.underscore.Predicate) -> last
    java.lang.Object last(com.github.underscore.Predicate) -> last
    java.lang.Object lastOrNull(java.util.List) -> lastOrNull
    java.lang.Object lastOrNull() -> lastOrNull
    java.lang.Object lastOrNull(java.util.List,com.github.underscore.Predicate) -> lastOrNull
    java.lang.Object lastOrNull(com.github.underscore.Predicate) -> lastOrNull
    java.util.List rest(java.util.List) -> rest
    java.util.List rest(java.util.List,int) -> rest
    java.lang.Object[] rest(java.lang.Object[]) -> rest
    java.lang.Object[] rest(java.lang.Object[],int) -> rest
    java.util.List rest() -> rest
    java.util.List rest(int) -> rest
    java.util.List tail(java.util.List) -> tail
    java.util.List tail(java.util.List,int) -> tail
    java.lang.Object[] tail(java.lang.Object[]) -> tail
    java.lang.Object[] tail(java.lang.Object[],int) -> tail
    java.util.List tail() -> tail
    java.util.List tail(int) -> tail
    java.util.List drop(java.util.List) -> drop
    java.util.List drop(java.util.List,int) -> drop
    java.lang.Object[] drop(java.lang.Object[]) -> drop
    java.lang.Object[] drop(java.lang.Object[],int) -> drop
    java.util.List compact(java.util.List) -> compact
    java.lang.Object[] compact(java.lang.Object[]) -> compact
    java.util.List compact(java.util.List,java.lang.Object) -> compact
    java.lang.Object[] compact(java.lang.Object[],java.lang.Object) -> compact
    java.util.List compact() -> compact
    java.util.List compact(java.lang.Object) -> compact
    java.util.List flatten(java.util.List) -> flatten
    java.util.List flatten(java.util.List,boolean) -> flatten
    void flatten(java.util.List,java.util.List,int) -> flatten
    java.util.List flatten() -> flatten
    java.util.List flatten(boolean) -> flatten
    java.util.List without(java.util.List,java.lang.Object[]) -> without
    java.lang.Object[] without(java.lang.Object[],java.lang.Object[]) -> without
    java.util.List uniq(java.util.List) -> uniq
    java.lang.Object[] uniq(java.lang.Object[]) -> uniq
    java.util.Collection uniq(java.lang.Iterable,com.github.underscore.Function) -> uniq
    java.lang.Object[] uniq(java.lang.Object[],com.github.underscore.Function) -> uniq
    java.util.List distinct(java.util.List) -> distinct
    java.lang.Object[] distinct(java.lang.Object[]) -> distinct
    java.util.Collection distinctBy(java.lang.Iterable,com.github.underscore.Function) -> distinctBy
    java.lang.Object[] distinctBy(java.lang.Object[],com.github.underscore.Function) -> distinctBy
    java.util.List union(java.util.List,java.util.List[]) -> union
    java.util.List unionWith(java.util.List[]) -> unionWith
    java.lang.Object[] union(java.lang.Object[][]) -> union
    java.util.List intersection(java.util.List,java.util.List) -> intersection
    java.util.List intersection(java.util.List,java.util.List[]) -> intersection
    java.util.List intersectionWith(java.util.List[]) -> intersectionWith
    java.lang.Object[] intersection(java.lang.Object[][]) -> intersection
    java.util.List difference(java.util.List,java.util.List) -> difference
    java.util.List difference(java.util.List,java.util.List[]) -> difference
    java.util.List differenceWith(java.util.List[]) -> differenceWith
    java.lang.Object[] difference(java.lang.Object[][]) -> difference
    java.util.List zip(java.util.List[]) -> zip
    java.util.List unzip(java.util.List[]) -> unzip
    java.util.List object(java.util.List,java.util.List) -> object
    int findIndex(java.util.List,com.github.underscore.Predicate) -> findIndex
    int findIndex(java.lang.Object[],com.github.underscore.Predicate) -> findIndex
    int findLastIndex(java.util.List,com.github.underscore.Predicate) -> findLastIndex
    int findLastIndex(java.lang.Object[],com.github.underscore.Predicate) -> findLastIndex
    int sortedIndex(java.util.List,java.lang.Comparable) -> sortedIndex
    int sortedIndex(java.lang.Comparable[],java.lang.Comparable) -> sortedIndex
    int sortedIndex(java.util.List,java.lang.Comparable,java.lang.String) -> sortedIndex
    int sortedIndex(java.lang.Comparable[],java.lang.Comparable,java.lang.String) -> sortedIndex
    int indexOf(java.util.List,java.lang.Object) -> indexOf
    int indexOf(java.lang.Object[],java.lang.Object) -> indexOf
    int lastIndexOf(java.util.List,java.lang.Object) -> lastIndexOf
    int lastIndexOf(java.lang.Object[],java.lang.Object) -> lastIndexOf
    int[] range(int) -> range
    int[] range(int,int) -> range
    int[] range(int,int,int) -> range
    java.util.List chunk(java.lang.Iterable,int) -> chunk
    java.util.List chunk(int) -> chunk
    com.github.underscore.Function bind(com.github.underscore.Function) -> bind
    com.github.underscore.Function memoize(com.github.underscore.Function) -> memoize
    java.util.concurrent.ScheduledFuture delay(com.github.underscore.Supplier,int) -> delay
    java.util.concurrent.ScheduledFuture defer(com.github.underscore.Supplier) -> defer
    com.github.underscore.Supplier throttle(com.github.underscore.Supplier,int) -> throttle
    com.github.underscore.Supplier debounce(com.github.underscore.Supplier,int) -> debounce
    com.github.underscore.Function wrap(com.github.underscore.Function,com.github.underscore.Function) -> wrap
    com.github.underscore.Predicate negate(com.github.underscore.Predicate) -> negate
    com.github.underscore.Function compose(com.github.underscore.Function[]) -> compose
    com.github.underscore.Supplier after(int,com.github.underscore.Supplier) -> after
    com.github.underscore.Supplier before(int,com.github.underscore.Supplier) -> before
    com.github.underscore.Supplier once(com.github.underscore.Supplier) -> once
    java.util.Set keys(java.util.Map) -> keys
    java.util.Collection values(java.util.Map) -> values
    java.util.List mapObject(java.util.Map,com.github.underscore.Function) -> mapObject
    java.util.List pairs(java.util.Map) -> pairs
    java.util.List invert(java.util.Map) -> invert
    java.util.List functions(java.lang.Object) -> functions
    java.util.List methods(java.lang.Object) -> methods
    java.util.Map extend(java.util.Map,java.util.Map[]) -> extend
    java.lang.Object findKey(java.util.List,com.github.underscore.Predicate) -> findKey
    java.lang.Object findKey(java.lang.Object[],com.github.underscore.Predicate) -> findKey
    java.lang.Object findLastKey(java.util.List,com.github.underscore.Predicate) -> findLastKey
    java.lang.Object findLastKey(java.lang.Object[],com.github.underscore.Predicate) -> findLastKey
    java.util.List pick(java.util.Map,java.lang.Object[]) -> pick
    java.util.List pick(java.util.Map,com.github.underscore.Predicate) -> pick
    java.util.List omit(java.util.Map,java.lang.Object[]) -> omit
    java.util.List omit(java.util.Map,com.github.underscore.Predicate) -> omit
    java.util.Map defaults(java.util.Map,java.util.Map) -> defaults
    java.lang.Object clone(java.lang.Object) -> clone
    java.lang.Object[] clone(java.lang.Object[]) -> clone
    void tap(java.lang.Iterable,com.github.underscore.Consumer) -> tap
    boolean isMatch(java.util.Map,java.util.Map) -> isMatch
    boolean isEqual(java.lang.Object,java.lang.Object) -> isEqual
    boolean isEmpty(java.util.Map) -> isEmpty
    boolean isEmpty(java.lang.Iterable) -> isEmpty
    boolean isEmpty() -> isEmpty
    boolean isArray(java.lang.Object) -> isArray
    boolean isObject(java.lang.Object) -> isObject
    boolean isFunction(java.lang.Object) -> isFunction
    boolean isString(java.lang.Object) -> isString
    boolean isNumber(java.lang.Object) -> isNumber
    boolean isDate(java.lang.Object) -> isDate
    boolean isRegExp(java.lang.Object) -> isRegExp
    boolean isError(java.lang.Object) -> isError
    boolean isBoolean(java.lang.Object) -> isBoolean
    boolean isNull(java.lang.Object) -> isNull
    boolean has(java.util.Map,java.lang.Object) -> has
    java.lang.Object identity(java.lang.Object) -> identity
    com.github.underscore.Supplier constant(java.lang.Object) -> constant
    com.github.underscore.Function property(java.lang.Object) -> property
    com.github.underscore.Function propertyOf(java.util.Map) -> propertyOf
    com.github.underscore.Predicate matcher(java.util.Map) -> matcher
    void times(int,com.github.underscore.Supplier) -> times
    int random(int,int) -> random
    int random(int) -> random
    long now() -> now
    java.lang.String escape(java.lang.String) -> escape
    java.lang.String unescape(java.lang.String) -> unescape
    java.lang.Object result(java.lang.Iterable,com.github.underscore.Predicate) -> result
    java.lang.String uniqueId(java.lang.String) -> uniqueId
    java.lang.String uniquePassword() -> uniquePassword
    com.github.underscore.Template template(java.lang.String) -> template
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
    java.lang.Iterable iterate(java.lang.Object,com.github.underscore.UnaryOperator) -> iterate
    com.github.underscore.$$Chain chain(java.util.List) -> chain
    com.github.underscore.$$Chain chain(java.lang.Iterable) -> chain
    com.github.underscore.$$Chain chain(java.lang.Iterable,int) -> chain
    com.github.underscore.$$Chain chain(java.lang.Object[]) -> chain
    com.github.underscore.$$Chain chain(int[]) -> chain
    com.github.underscore.$$Chain chain() -> chain
    void mixin(java.lang.String,com.github.underscore.Function) -> mixin
    com.github.underscore.Optional call(java.lang.String) -> call
    java.util.List sort(java.lang.Iterable) -> sort
    java.lang.Comparable[] sort(java.lang.Comparable[]) -> sort
    java.util.List sort() -> sort
    java.lang.String join(java.lang.Iterable,java.lang.String) -> join
    java.lang.String join(java.lang.Iterable) -> join
    java.lang.String join(java.lang.Object[],java.lang.String) -> join
    java.lang.String join(java.lang.Object[]) -> join
    java.lang.String join(java.lang.String) -> join
    java.lang.String join() -> join
    java.util.List push(java.util.List,java.lang.Object[]) -> push
    java.util.List push(java.lang.Object[]) -> push
    com.github.underscore.Tuple pop(java.util.List) -> pop
    com.github.underscore.Tuple pop() -> pop
    java.util.List unshift(java.util.List,java.lang.Object[]) -> unshift
    java.util.List unshift(java.lang.Object[]) -> unshift
    com.github.underscore.Tuple shift(java.util.List) -> shift
    com.github.underscore.Tuple shift() -> shift
    java.lang.Object[] concat(java.lang.Object[],java.lang.Object[][]) -> concat
    java.util.List concat(java.lang.Iterable,java.lang.Iterable[]) -> concat
    java.util.List concatWith(java.lang.Iterable[]) -> concatWith
    java.util.List slice(java.lang.Iterable,int) -> slice
    java.lang.Object[] slice(java.lang.Object[],int) -> slice
    java.util.List slice(int) -> slice
    java.util.List slice(java.lang.Iterable,int,int) -> slice
    java.lang.Object[] slice(java.lang.Object[],int,int) -> slice
    java.util.List slice(int,int) -> slice
    java.util.List reverse(java.lang.Iterable) -> reverse
    java.lang.Object[] reverse(java.lang.Object[]) -> reverse
    java.util.List reverse(int[]) -> reverse
    java.util.List reverse() -> reverse
    java.lang.Iterable getIterable() -> getIterable
    java.lang.Iterable value() -> value
    com.github.underscore.Optional getString() -> getString
    java.util.concurrent.ScheduledFuture setTimeout(com.github.underscore.Supplier,int) -> setTimeout
    void clearTimeout(java.util.concurrent.ScheduledFuture) -> clearTimeout
    java.util.concurrent.ScheduledFuture setInterval(com.github.underscore.Supplier,int) -> setInterval
    void clearInterval(java.util.concurrent.ScheduledFuture) -> clearInterval
    java.util.List copyOf(java.lang.Iterable) -> copyOf
    java.util.List copyOf() -> copyOf
    java.util.List copyOfRange(java.lang.Iterable,int,int) -> copyOfRange
    java.util.List copyOfRange(int,int) -> copyOfRange
    java.lang.Object elementAt(java.util.List,int) -> elementAt
    java.lang.Object elementAt(int) -> elementAt
    java.lang.Object get(java.util.List,int) -> get
    java.lang.Object get(int) -> get
    com.github.underscore.Tuple set(java.util.List,int,java.lang.Object) -> set
    com.github.underscore.Tuple set(int,java.lang.Object) -> set
    java.lang.Object elementAtOrElse(java.util.List,int,java.lang.Object) -> elementAtOrElse
    java.lang.Object elementAtOrElse(int,java.lang.Object) -> elementAtOrElse
    java.lang.Object elementAtOrNull(java.util.List,int) -> elementAtOrNull
    java.lang.Object elementAtOrNull(int) -> elementAtOrNull
    int lastIndex(java.lang.Iterable) -> lastIndex
    int lastIndex(java.lang.Object[]) -> lastIndex
    int lastIndex(int[]) -> lastIndex
    java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.Object) -> checkNotNull
    java.util.List newArrayList() -> newArrayList
    java.util.List newArrayList(java.lang.Iterable) -> newArrayList
    java.util.List newArrayList(java.lang.Iterable,int) -> newArrayList
    java.util.List newIntegerList(int[]) -> newIntegerList
    java.util.List newArrayListWithExpectedSize(int) -> newArrayListWithExpectedSize
    java.util.Set newLinkedHashSet() -> newLinkedHashSet
    java.util.Set newLinkedHashSet(java.lang.Iterable) -> newLinkedHashSet
    java.util.Set newLinkedHashSetWithExpectedSize(int) -> newLinkedHashSetWithExpectedSize
    java.util.Map newLinkedHashMap() -> newLinkedHashMap
    void main(java.lang.String[]) -> main
    java.util.Map access$000() -> access$000
    void <clinit>() -> <clinit>
com.github.underscore.$$1 -> com.github.underscore.a:
    void <init>() -> <init>
com.github.underscore.$$10 -> com.github.underscore.b:
    java.lang.String val$propertyName -> a
    void <init>(java.lang.String) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$11 -> com.github.underscore.c:
    java.lang.String val$propertyName -> a
    void <init>(java.lang.String) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$12 -> com.github.underscore.d:
    com.github.underscore.Function val$func -> a
    void <init>(com.github.underscore.Function) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
com.github.underscore.$$13 -> com.github.underscore.e:
    com.github.underscore.Function val$func -> a
    void <init>(com.github.underscore.Function) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
com.github.underscore.$$14 -> com.github.underscore.f:
    com.github.underscore.Function val$func -> a
    void <init>(com.github.underscore.Function) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
com.github.underscore.$$15 -> com.github.underscore.g:
    java.lang.Object val$key -> a
    void <init>(java.lang.Object) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
com.github.underscore.$$16 -> com.github.underscore.h:
    java.lang.String val$property -> a
    void <init>(java.lang.String) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$17 -> com.github.underscore.i:
    void <init>() -> <init>
    boolean test(java.lang.Object) -> test
com.github.underscore.$$18 -> com.github.underscore.j:
    java.lang.Object val$falsyValue -> a
    void <init>(java.lang.Object) -> <init>
    boolean test(java.lang.Object) -> test
com.github.underscore.$$19 -> com.github.underscore.k:
    java.util.List val$valuesList -> a
    void <init>(java.util.List) -> <init>
    boolean test(java.lang.Object) -> test
com.github.underscore.$$1AfterFunction -> com.github.underscore.l:
    int count -> a
    com.github.underscore.Supplier localFunction -> b
    int index -> c
    java.lang.Object result -> d
    void <init>(int,com.github.underscore.Supplier) -> <init>
    java.lang.Object get() -> get
com.github.underscore.$$1BeforeFunction -> com.github.underscore.m:
    int count -> a
    com.github.underscore.Supplier localFunction -> b
    int index -> c
    java.lang.Object result -> d
    void <init>(int,com.github.underscore.Supplier) -> <init>
    java.lang.Object get() -> get
com.github.underscore.$$1ThrottleFunction -> com.github.underscore.n:
    com.github.underscore.Supplier localFunction -> a
    long previous -> b
    java.util.concurrent.ScheduledFuture timeout -> c
    int val$waitMilliseconds -> d
    void <init>(com.github.underscore.Supplier,int) -> <init>
    java.lang.Object get() -> get
com.github.underscore.$$2 -> com.github.underscore.o:
    java.lang.Object val$key -> a
    void <init>(java.lang.Object) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$20 -> com.github.underscore.p:
    java.util.List val$zipped -> a
    void <init>(java.util.List) -> <init>
    void accept(java.lang.Object) -> accept
com.github.underscore.$$21 -> com.github.underscore.q:
    int index -> a
    java.util.List val$values -> b
    void <init>(java.util.List) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$22 -> com.github.underscore.r:
    com.github.underscore.Function val$function -> a
    void <init>(com.github.underscore.Function) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$23 -> com.github.underscore.s:
    com.github.underscore.Function val$function -> a
    void <init>(com.github.underscore.Function) -> <init>
    java.lang.Object calc(java.lang.Object) -> calc
com.github.underscore.$$24 -> com.github.underscore.t:
    com.github.underscore.Supplier val$function -> a
    void <init>(com.github.underscore.Supplier) -> <init>
    java.lang.Object call() -> call
com.github.underscore.$$25 -> com.github.underscore.u:
    java.util.concurrent.ScheduledFuture timeout -> a
    com.github.underscore.Supplier val$function -> b
    int val$delayMilliseconds -> c
    void <init>(com.github.underscore.Supplier,int) -> <init>
    java.lang.Object get() -> get
com.github.underscore.$$26 -> com.github.underscore.v:
    com.github.underscore.Function val$wrapper -> a
    com.github.underscore.Function val$function -> b
    void <init>(com.github.underscore.Function,com.github.underscore.Function) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$27 -> com.github.underscore.w:
    com.github.underscore.Predicate val$pred -> a
    void <init>(com.github.underscore.Predicate) -> <init>
    boolean test(java.lang.Object) -> test
com.github.underscore.$$28 -> com.github.underscore.x:
    com.github.underscore.Function[] val$func -> a
    void <init>(com.github.underscore.Function[]) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$29 -> com.github.underscore.y:
    boolean executed -> a
    java.lang.Object result -> b
    com.github.underscore.Supplier val$function -> c
    void <init>(com.github.underscore.Supplier) -> <init>
    java.lang.Object get() -> get
com.github.underscore.$$3 -> com.github.underscore.z:
    com.github.underscore.Predicate val$pred -> a
    void <init>(com.github.underscore.Predicate) -> <init>
    boolean test(java.lang.Object) -> test
com.github.underscore.$$30 -> com.github.underscore.A:
    com.github.underscore.Function val$func -> a
    void <init>(com.github.underscore.Function) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$31 -> com.github.underscore.B:
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$32 -> com.github.underscore.C:
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$33 -> com.github.underscore.D:
    java.lang.Object[] val$keys -> a
    void <init>(java.lang.Object[]) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$34 -> com.github.underscore.E:
    com.github.underscore.Predicate val$pred -> a
    java.util.Map val$object -> b
    void <init>(com.github.underscore.Predicate,java.util.Map) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$35 -> com.github.underscore.F:
    java.lang.Object[] val$keys -> a
    void <init>(java.lang.Object[]) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$36 -> com.github.underscore.G:
    com.github.underscore.Predicate val$pred -> a
    void <init>(com.github.underscore.Predicate) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$37 -> com.github.underscore.H:
    java.lang.Object val$value -> a
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get() -> get
com.github.underscore.$$38 -> com.github.underscore.I:
    java.lang.Object val$key -> a
    void <init>(java.lang.Object) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$39 -> com.github.underscore.J:
    java.util.Map val$object -> a
    void <init>(java.util.Map) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$4 -> com.github.underscore.K:
    com.github.underscore.Predicate val$pred -> a
    void <init>(com.github.underscore.$,com.github.underscore.Predicate) -> <init>
    boolean test(java.lang.Object) -> test
com.github.underscore.$$40 -> com.github.underscore.L:
    java.util.Map val$object -> a
    void <init>(java.util.Map) -> <init>
    boolean test(java.lang.Object) -> test
com.github.underscore.$$41 -> com.github.underscore.M:
    com.github.underscore.Supplier val$function -> a
    void <init>(com.github.underscore.Supplier) -> <init>
    void run() -> run
com.github.underscore.$$5 -> com.github.underscore.N:
    com.github.underscore.PredicateIndexed val$pred -> a
    void <init>(com.github.underscore.PredicateIndexed) -> <init>
    boolean test(int,java.lang.Object) -> test
com.github.underscore.$$6 -> com.github.underscore.O:
    com.github.underscore.Predicate val$pred -> a
    void <init>(com.github.underscore.Predicate) -> <init>
    boolean test(java.lang.Object) -> test
com.github.underscore.$$7 -> com.github.underscore.P:
    com.github.underscore.Predicate val$pred -> a
    void <init>(com.github.underscore.Predicate) -> <init>
    boolean test(java.lang.Object) -> test
com.github.underscore.$$8 -> com.github.underscore.Q:
    java.lang.Object val$elem -> a
    void <init>(java.lang.Object) -> <init>
    boolean test(java.lang.Object) -> test
com.github.underscore.$$9 -> com.github.underscore.R:
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.$$Chain -> com.github.underscore.$$Chain:
    java.lang.Object item -> item
    java.util.List list -> list
    void <init>(java.lang.Object) -> <init>
    void <init>(java.util.List) -> <init>
    com.github.underscore.$$Chain first() -> first
    com.github.underscore.$$Chain first(int) -> first
    com.github.underscore.$$Chain firstOrNull() -> firstOrNull
    com.github.underscore.$$Chain firstOrNull(com.github.underscore.Predicate) -> firstOrNull
    com.github.underscore.$$Chain initial() -> initial
    com.github.underscore.$$Chain initial(int) -> initial
    com.github.underscore.$$Chain last() -> last
    com.github.underscore.$$Chain last(int) -> last
    com.github.underscore.$$Chain lastOrNull() -> lastOrNull
    com.github.underscore.$$Chain lastOrNull(com.github.underscore.Predicate) -> lastOrNull
    com.github.underscore.$$Chain rest() -> rest
    com.github.underscore.$$Chain rest(int) -> rest
    com.github.underscore.$$Chain compact() -> compact
    com.github.underscore.$$Chain compact(java.lang.Object) -> compact
    com.github.underscore.$$Chain flatten() -> flatten
    com.github.underscore.$$Chain map(com.github.underscore.Function) -> map
    com.github.underscore.$$Chain mapIndexed(com.github.underscore.BiFunction) -> mapIndexed
    com.github.underscore.$$Chain filter(com.github.underscore.Predicate) -> filter
    com.github.underscore.$$Chain filterIndexed(com.github.underscore.PredicateIndexed) -> filterIndexed
    com.github.underscore.$$Chain reject(com.github.underscore.Predicate) -> reject
    com.github.underscore.$$Chain rejectIndexed(com.github.underscore.PredicateIndexed) -> rejectIndexed
    com.github.underscore.$$Chain filterFalse(com.github.underscore.Predicate) -> filterFalse
    com.github.underscore.$$Chain reduce(com.github.underscore.BiFunction,java.lang.Object) -> reduce
    com.github.underscore.$$Chain reduceRight(com.github.underscore.BiFunction,java.lang.Object) -> reduceRight
    com.github.underscore.$$Chain find(com.github.underscore.Predicate) -> find
    com.github.underscore.$$Chain findLast(com.github.underscore.Predicate) -> findLast
    com.github.underscore.$$Chain max() -> max
    com.github.underscore.$$Chain max(com.github.underscore.Function) -> max
    com.github.underscore.$$Chain min() -> min
    com.github.underscore.$$Chain min(com.github.underscore.Function) -> min
    com.github.underscore.$$Chain sort() -> sort
    com.github.underscore.$$Chain sortWith(java.util.Comparator) -> sortWith
    com.github.underscore.$$Chain sortBy(com.github.underscore.Function) -> sortBy
    com.github.underscore.$$Chain sortBy(java.lang.Object) -> sortBy
    com.github.underscore.$$Chain groupBy(com.github.underscore.Function) -> groupBy
    com.github.underscore.$$Chain indexBy(java.lang.String) -> indexBy
    com.github.underscore.$$Chain countBy(com.github.underscore.Function) -> countBy
    com.github.underscore.$$Chain shuffle() -> shuffle
    com.github.underscore.$$Chain sample() -> sample
    com.github.underscore.$$Chain sample(int) -> sample
    com.github.underscore.$$Chain tap(com.github.underscore.Consumer) -> tap
    com.github.underscore.$$Chain forEach(com.github.underscore.Consumer) -> forEach
    com.github.underscore.$$Chain forEachRight(com.github.underscore.Consumer) -> forEachRight
    com.github.underscore.$$Chain every(com.github.underscore.Predicate) -> every
    com.github.underscore.$$Chain some(com.github.underscore.Predicate) -> some
    com.github.underscore.$$Chain contains(java.lang.Object) -> contains
    com.github.underscore.$$Chain invoke(java.lang.String,java.util.List) -> invoke
    com.github.underscore.$$Chain invoke(java.lang.String) -> invoke
    com.github.underscore.$$Chain pluck(java.lang.String) -> pluck
    com.github.underscore.$$Chain where(java.util.List) -> where
    com.github.underscore.$$Chain findWhere(java.util.List) -> findWhere
    com.github.underscore.$$Chain uniq() -> uniq
    com.github.underscore.$$Chain uniq(com.github.underscore.Function) -> uniq
    com.github.underscore.$$Chain distinct() -> distinct
    com.github.underscore.$$Chain distinctBy(com.github.underscore.Function) -> distinctBy
    com.github.underscore.$$Chain union(java.util.List[]) -> union
    com.github.underscore.$$Chain intersection(java.util.List[]) -> intersection
    com.github.underscore.$$Chain difference(java.util.List[]) -> difference
    com.github.underscore.$$Chain range(int) -> range
    com.github.underscore.$$Chain range(int,int) -> range
    com.github.underscore.$$Chain range(int,int,int) -> range
    com.github.underscore.$$Chain chunk(int) -> chunk
    com.github.underscore.$$Chain concat(java.util.List[]) -> concat
    com.github.underscore.$$Chain slice(int) -> slice
    com.github.underscore.$$Chain slice(int,int) -> slice
    com.github.underscore.$$Chain reverse() -> reverse
    com.github.underscore.$$Chain join() -> join
    com.github.underscore.$$Chain join(java.lang.String) -> join
    com.github.underscore.$$Chain push(java.lang.Object[]) -> push
    com.github.underscore.$$Chain pop() -> pop
    com.github.underscore.$$Chain shift() -> shift
    com.github.underscore.$$Chain unshift(java.lang.Object[]) -> unshift
    com.github.underscore.$$Chain skip(int) -> skip
    com.github.underscore.$$Chain limit(int) -> limit
    com.github.underscore.$$Chain toMap() -> toMap
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.Object item() -> item
    java.util.List value() -> value
    java.lang.String toString() -> toString
com.github.underscore.$$MyIterable -> com.github.underscore.$$a:
    com.github.underscore.UnaryOperator unaryOperator -> a
    boolean firstRun -> b
    java.lang.Object value -> c
    void <init>(java.lang.Object,com.github.underscore.UnaryOperator) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean access$100(com.github.underscore.$$MyIterable) -> a
    boolean access$102(com.github.underscore.$$MyIterable,boolean) -> a
    java.lang.Object access$202(com.github.underscore.$$MyIterable,java.lang.Object) -> a
    java.lang.Object access$200(com.github.underscore.$$MyIterable) -> b
    com.github.underscore.UnaryOperator access$300(com.github.underscore.$$MyIterable) -> c
com.github.underscore.$$MyIterable$1 -> com.github.underscore.S:
    com.github.underscore.$$MyIterable this$0 -> a
    void <init>(com.github.underscore.$$MyIterable) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.github.underscore.$$TemplateImpl -> com.github.underscore.$$b:
    java.lang.String template -> a
    void <init>(java.lang.String) -> <init>
    java.lang.String apply(java.util.Map) -> a
    java.util.List check(java.lang.Object) -> check
    java.lang.Object apply(java.lang.Object) -> apply
    void <init>(java.lang.String,byte) -> <init>
com.github.underscore.$$WherePredicate -> com.github.underscore.$$c:
    java.util.List properties -> a
    void <init>(java.util.List) -> <init>
    boolean test(java.lang.Object) -> test
    void <init>(java.util.List,byte) -> <init>
com.github.underscore.BiConsumer -> com.github.underscore.BiConsumer:
    void accept(java.lang.Object,java.lang.Object) -> accept
com.github.underscore.BiFunction -> com.github.underscore.BiFunction:
    java.lang.Object apply(java.lang.Object,java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
com.github.underscore.Consumer -> com.github.underscore.Consumer:
    void accept(java.lang.Object) -> accept
com.github.underscore.Function -> com.github.underscore.Function:
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
com.github.underscore.Function3 -> com.github.underscore.Function3:
    java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
com.github.underscore.MemoizeFunction -> com.github.underscore.MemoizeFunction:
    java.util.Map cache -> cache
    void <init>() -> <init>
    java.lang.Object calc(java.lang.Object) -> calc
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.Optional -> com.github.underscore.Optional:
    com.github.underscore.Optional EMPTY -> EMPTY
    java.lang.Object arg -> arg
    boolean absent -> absent
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    com.github.underscore.Optional of(java.lang.Object) -> of
    com.github.underscore.Optional fromNullable(java.lang.Object) -> fromNullable
    com.github.underscore.Optional absent() -> absent
    java.lang.Object get() -> get
    java.lang.Object or(java.lang.Object) -> or
    java.lang.Object orNull() -> orNull
    boolean isPresent() -> isPresent
    com.github.underscore.Optional map(com.github.underscore.Function) -> map
    java.lang.Object orThrow(com.github.underscore.Supplier) -> orThrow
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.github.underscore.Predicate -> com.github.underscore.Predicate:
    boolean test(java.lang.Object) -> test
    boolean equals(java.lang.Object) -> equals
com.github.underscore.PredicateIndexed -> com.github.underscore.PredicateIndexed:
    boolean test(int,java.lang.Object) -> test
    boolean equals(java.lang.Object) -> equals
com.github.underscore.Supplier -> com.github.underscore.Supplier:
    java.lang.Object get() -> get
    boolean equals(java.lang.Object) -> equals
com.github.underscore.Template -> com.github.underscore.Template:
    java.util.List check(java.lang.Object) -> check
com.github.underscore.Tuple -> com.github.underscore.Tuple:
    java.lang.Object first -> first
    java.lang.Object second -> second
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    com.github.underscore.Tuple create(java.lang.Object,java.lang.Object) -> create
    java.lang.Object fst() -> fst
    java.lang.Object snd() -> snd
    java.lang.String toString() -> toString
com.github.underscore.UnaryOperator -> com.github.underscore.UnaryOperator:
com.github.underscore.lodash.$ -> com.github.underscore.lodash.$:
    int DEFAULT_TRUNC_LENGTH -> DEFAULT_TRUNC_LENGTH
    java.lang.String DEFAULT_TRUNC_OMISSION -> DEFAULT_TRUNC_OMISSION
    java.lang.String NULL -> NULL
    java.lang.String ELEMENT -> ELEMENT
    java.lang.String CLOSED_ELEMENT -> CLOSED_ELEMENT
    java.lang.String EMPTY_ELEMENT -> EMPTY_ELEMENT
    java.lang.String NULL_ELEMENT -> NULL_ELEMENT
    java.util.regex.Pattern RE_LATIN_1 -> RE_LATIN_1
    java.util.regex.Pattern RE_PROP_NAME -> RE_PROP_NAME
    java.util.Map DEBURRED_LETTERS -> DEBURRED_LETTERS
    java.util.Map DEFAULT_HEADER_FIELDS -> DEFAULT_HEADER_FIELDS
    java.util.Set SUPPORTED_HTTP_METHODS -> SUPPORTED_HTTP_METHODS
    int BUFFER_LENGTH_1024 -> BUFFER_LENGTH_1024
    int RESPONSE_CODE_400 -> RESPONSE_CODE_400
    java.lang.String upper -> upper
    java.lang.String lower -> lower
    java.util.regex.Pattern reWords -> reWords
    void <init>(java.lang.Iterable) -> <init>
    void <init>(java.lang.String) -> <init>
    com.github.underscore.lodash.$$Chain chain(java.lang.String) -> chain
    com.github.underscore.lodash.$$Chain chain(java.util.List) -> chain
    com.github.underscore.lodash.$$Chain chain(java.lang.Iterable) -> chain
    com.github.underscore.lodash.$$Chain chain(java.lang.Iterable,int) -> chain
    com.github.underscore.lodash.$$Chain chain(java.lang.Object[]) -> chain
    com.github.underscore.lodash.$$Chain chain(int[]) -> chain
    com.github.underscore.lodash.$$Chain chain() -> chain
    java.util.List drop(java.lang.Iterable) -> drop
    java.util.List drop() -> drop
    java.util.List drop(java.lang.Iterable,java.lang.Integer) -> drop
    java.util.List drop(java.lang.Integer) -> drop
    java.util.List dropRight(java.lang.Iterable) -> dropRight
    java.util.List dropRight() -> dropRight
    java.util.List dropRight(java.lang.Iterable,java.lang.Integer) -> dropRight
    java.util.List dropRight(java.lang.Integer) -> dropRight
    java.util.List dropWhile(java.lang.Iterable,com.github.underscore.Predicate) -> dropWhile
    java.util.List dropWhile(com.github.underscore.Predicate) -> dropWhile
    java.util.List dropRightWhile(java.lang.Iterable,com.github.underscore.Predicate) -> dropRightWhile
    java.util.List dropRightWhile(com.github.underscore.Predicate) -> dropRightWhile
    java.util.List fill(java.util.List,java.lang.Object) -> fill
    java.util.List fill(java.lang.Object) -> fill
    java.util.List fill(java.util.List,java.lang.Object,java.lang.Integer,java.lang.Integer) -> fill
    java.util.List fill(java.lang.Object,java.lang.Integer,java.lang.Integer) -> fill
    java.util.List flattenDeep(java.util.List) -> flattenDeep
    java.util.List flattenDeep() -> flattenDeep
    java.util.List pull(java.util.List,java.lang.Object[]) -> pull
    java.util.List pull(java.lang.Object[]) -> pull
    java.util.List pullAt(java.util.List,java.lang.Integer[]) -> pullAt
    java.util.List pullAt(java.lang.Integer[]) -> pullAt
    java.util.List remove(java.util.List,com.github.underscore.Predicate) -> remove
    java.util.List remove(com.github.underscore.Predicate) -> remove
    java.util.List take(java.lang.Iterable) -> take
    java.util.List take() -> take
    java.util.List takeRight(java.lang.Iterable) -> takeRight
    java.util.List takeRight() -> takeRight
    java.util.List take(java.lang.Iterable,java.lang.Integer) -> take
    java.util.List take(java.lang.Integer) -> take
    java.util.List takeRight(java.lang.Iterable,java.lang.Integer) -> takeRight
    java.util.List takeRight(java.lang.Integer) -> takeRight
    java.util.List takeWhile(java.lang.Iterable,com.github.underscore.Predicate) -> takeWhile
    java.util.List takeWhile(com.github.underscore.Predicate) -> takeWhile
    java.util.List takeRightWhile(java.lang.Iterable,com.github.underscore.Predicate) -> takeRightWhile
    java.util.List takeRightWhile(com.github.underscore.Predicate) -> takeRightWhile
    java.util.List xor(java.util.List[]) -> xor
    java.util.List xor(java.util.List) -> xor
    java.util.List at(java.util.List,java.lang.Integer[]) -> at
    java.util.List at(java.lang.Integer[]) -> at
    java.lang.Number sum(java.lang.Iterable) -> sum
    java.lang.Number sum(java.lang.Iterable,com.github.underscore.Function) -> sum
    java.lang.Number sum() -> sum
    java.lang.Number sum(com.github.underscore.Function) -> sum
    java.lang.Number add(java.lang.Number,java.lang.Number) -> add
    java.math.BigDecimal sum(java.math.BigDecimal,java.math.BigDecimal) -> sum
    java.math.BigInteger sum(java.math.BigInteger,java.math.BigInteger) -> sum
    java.lang.Byte sum(java.lang.Byte,java.lang.Byte) -> sum
    java.lang.Double sum(java.lang.Double,java.lang.Double) -> sum
    java.lang.Float sum(java.lang.Float,java.lang.Float) -> sum
    java.lang.Integer sum(java.lang.Integer,java.lang.Integer) -> sum
    java.lang.Long sum(java.lang.Long,java.lang.Long) -> sum
    java.lang.Short sum(java.lang.Short,java.lang.Short) -> sum
    double mean(java.lang.Iterable) -> mean
    double mean() -> mean
    double median(java.lang.Iterable) -> median
    double median() -> median
    java.lang.String camelCase(java.lang.String) -> camelCase
    java.lang.String lowerFirst(java.lang.String) -> lowerFirst
    java.lang.String upperFirst(java.lang.String) -> upperFirst
    java.lang.String capitalize(java.lang.String) -> capitalize
    java.lang.String uncapitalize(java.lang.String) -> uncapitalize
    java.lang.String baseToString(java.lang.String) -> baseToString
    java.lang.String deburr(java.lang.String) -> deburr
    java.util.List words(java.lang.String) -> words
    com.github.underscore.Function createCompounder(com.github.underscore.Function3) -> createCompounder
    com.github.underscore.Function createCaseFirst(java.lang.String) -> createCaseFirst
    boolean endsWith(java.lang.String,java.lang.String) -> endsWith
    boolean endsWith(java.lang.String,java.lang.String,java.lang.Integer) -> endsWith
    java.lang.String kebabCase(java.lang.String) -> kebabCase
    java.lang.String repeat(java.lang.String,int) -> repeat
    java.lang.String createPadding(java.lang.String,int,java.lang.String) -> createPadding
    java.lang.String pad(java.lang.String,int) -> pad
    java.lang.String pad(java.lang.String,int,java.lang.String) -> pad
    com.github.underscore.Function3 createPadDir(boolean) -> createPadDir
    java.lang.String padStart(java.lang.String,java.lang.Integer) -> padStart
    java.lang.String padStart(java.lang.String,java.lang.Integer,java.lang.String) -> padStart
    java.lang.String padEnd(java.lang.String,java.lang.Integer) -> padEnd
    java.lang.String padEnd(java.lang.String,java.lang.Integer,java.lang.String) -> padEnd
    java.lang.String snakeCase(java.lang.String) -> snakeCase
    java.lang.String startCase(java.lang.String) -> startCase
    boolean startsWith(java.lang.String,java.lang.String) -> startsWith
    boolean startsWith(java.lang.String,java.lang.String,java.lang.Integer) -> startsWith
    int charsLeftIndex(java.lang.String,java.lang.String) -> charsLeftIndex
    int charsRightIndex(java.lang.String,java.lang.String) -> charsRightIndex
    java.lang.String trim(java.lang.String) -> trim
    java.lang.String trim(java.lang.String,java.lang.String) -> trim
    java.lang.String trimStart(java.lang.String) -> trimStart
    java.lang.String trimStart(java.lang.String,java.lang.String) -> trimStart
    java.lang.String trimEnd(java.lang.String) -> trimEnd
    java.lang.String trimEnd(java.lang.String,java.lang.String) -> trimEnd
    java.lang.String trunc(java.lang.String) -> trunc
    java.lang.String trunc(java.lang.String,java.lang.Integer) -> trunc
    java.util.List stringToPath(java.lang.String) -> stringToPath
    java.lang.Object baseGet(java.util.Map,java.lang.String) -> baseGet
    java.lang.Object get(java.util.Map,java.lang.String) -> get
    java.lang.String toJson(java.util.Collection) -> toJson
    java.lang.String toJson() -> toJson
    java.lang.String toJson(java.util.Map) -> toJson
    java.lang.String toXml(java.util.Collection) -> toXml
    java.lang.String toXml() -> toXml
    java.lang.String toXml(java.util.Map) -> toXml
    java.lang.Object fromJson(java.lang.String) -> fromJson
    java.lang.Object fromJson() -> fromJson
    java.lang.Object getValue(java.lang.Object) -> getValue
    java.util.Map createMap(org.w3c.dom.Node) -> createMap
    java.lang.Object fromXml(java.lang.String) -> fromXml
    java.lang.Object fromXml() -> fromXml
    com.github.underscore.lodash.$$FetchResponse fetch(java.lang.String) -> fetch
    com.github.underscore.lodash.$$FetchResponse fetch(java.lang.String,java.lang.Integer,java.lang.Integer) -> fetch
    com.github.underscore.lodash.$$FetchResponse fetch(java.lang.String,java.lang.String,java.lang.String) -> fetch
    com.github.underscore.lodash.$$FetchResponse fetch(java.lang.String,java.lang.String,java.lang.String,java.util.Map,java.lang.Integer,java.lang.Integer) -> fetch
    java.lang.String camelCase() -> camelCase
    java.lang.String lowerFirst() -> lowerFirst
    java.lang.String upperFirst() -> upperFirst
    java.lang.String capitalize() -> capitalize
    java.lang.String deburr() -> deburr
    boolean endsWith(java.lang.String) -> endsWith
    boolean endsWith(java.lang.String,java.lang.Integer) -> endsWith
    java.lang.String kebabCase() -> kebabCase
    java.lang.String repeat(int) -> repeat
    java.lang.String pad(int) -> pad
    java.lang.String pad(int,java.lang.String) -> pad
    java.lang.String padStart(int) -> padStart
    java.lang.String padStart(int,java.lang.String) -> padStart
    java.lang.String padEnd(int) -> padEnd
    java.lang.String padEnd(int,java.lang.String) -> padEnd
    java.lang.String snakeCase() -> snakeCase
    java.lang.String startCase() -> startCase
    boolean startsWith(java.lang.String) -> startsWith
    boolean startsWith(java.lang.String,java.lang.Integer) -> startsWith
    java.lang.String trim() -> trim
    java.lang.String trimWith(java.lang.String) -> trimWith
    java.lang.String trimStart() -> trimStart
    java.lang.String trimStartWith(java.lang.String) -> trimStartWith
    java.lang.String trimEnd() -> trimEnd
    java.lang.String trimEndWith(java.lang.String) -> trimEndWith
    java.lang.String trunc() -> trunc
    java.lang.String trunc(int) -> trunc
    java.lang.String uncapitalize() -> uncapitalize
    java.util.List words() -> words
    com.github.underscore.$$Chain chain() -> chain
    java.util.List access$000(java.lang.Iterable) -> access$000
    java.util.List access$100(java.lang.Iterable) -> access$100
    java.util.List access$200(java.lang.Iterable) -> access$200
    java.util.List access$300(int[]) -> access$300
    java.util.List access$400(int[]) -> access$400
    java.util.List access$500(int[]) -> access$500
    java.lang.String access$600(java.lang.String) -> access$600
    java.lang.String access$700(java.lang.String,int,java.lang.String) -> access$700
    java.util.List access$800() -> access$800
    java.util.Map access$900() -> access$900
    void <clinit>() -> <clinit>
com.github.underscore.lodash.$$1 -> com.github.underscore.lodash.a:
    void <init>() -> <init>
com.github.underscore.lodash.$$2 -> com.github.underscore.lodash.b:
    void <init>() -> <init>
com.github.underscore.lodash.$$3 -> com.github.underscore.lodash.c:
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) -> apply
com.github.underscore.lodash.$$4 -> com.github.underscore.lodash.d:
    com.github.underscore.Function3 val$callback -> a
    void <init>(com.github.underscore.Function3) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.lodash.$$5 -> com.github.underscore.lodash.e:
    java.lang.String val$methodName -> a
    void <init>(java.lang.String) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.github.underscore.lodash.$$6 -> com.github.underscore.lodash.f:
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) -> apply
com.github.underscore.lodash.$$7 -> com.github.underscore.lodash.g:
    boolean val$fromRight -> a
    void <init>(boolean) -> <init>
    java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) -> apply
com.github.underscore.lodash.$$8 -> com.github.underscore.lodash.h:
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) -> apply
com.github.underscore.lodash.$$9 -> com.github.underscore.lodash.i:
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) -> apply
com.github.underscore.lodash.$$Chain -> com.github.underscore.lodash.$$Chain:
    void <init>(java.lang.Object) -> <init>
    void <init>(java.util.List) -> <init>
    com.github.underscore.lodash.$$Chain first() -> first
    com.github.underscore.lodash.$$Chain first(int) -> first
    com.github.underscore.lodash.$$Chain firstOrNull() -> firstOrNull
    com.github.underscore.lodash.$$Chain firstOrNull(com.github.underscore.Predicate) -> firstOrNull
    com.github.underscore.lodash.$$Chain initial() -> initial
    com.github.underscore.lodash.$$Chain initial(int) -> initial
    com.github.underscore.lodash.$$Chain last() -> last
    com.github.underscore.lodash.$$Chain last(int) -> last
    com.github.underscore.lodash.$$Chain lastOrNull() -> lastOrNull
    com.github.underscore.lodash.$$Chain lastOrNull(com.github.underscore.Predicate) -> lastOrNull
    com.github.underscore.lodash.$$Chain rest() -> rest
    com.github.underscore.lodash.$$Chain rest(int) -> rest
    com.github.underscore.lodash.$$Chain compact() -> compact
    com.github.underscore.lodash.$$Chain compact(java.lang.Object) -> compact
    com.github.underscore.lodash.$$Chain flatten() -> flatten
    com.github.underscore.lodash.$$Chain map(com.github.underscore.Function) -> map
    com.github.underscore.lodash.$$Chain filter(com.github.underscore.Predicate) -> filter
    com.github.underscore.lodash.$$Chain filterIndexed(com.github.underscore.PredicateIndexed) -> filterIndexed
    com.github.underscore.lodash.$$Chain rejectIndexed(com.github.underscore.PredicateIndexed) -> rejectIndexed
    com.github.underscore.lodash.$$Chain reject(com.github.underscore.Predicate) -> reject
    com.github.underscore.lodash.$$Chain filterFalse(com.github.underscore.Predicate) -> filterFalse
    com.github.underscore.lodash.$$Chain reduce(com.github.underscore.BiFunction,java.lang.Object) -> reduce
    com.github.underscore.lodash.$$Chain reduceRight(com.github.underscore.BiFunction,java.lang.Object) -> reduceRight
    com.github.underscore.lodash.$$Chain find(com.github.underscore.Predicate) -> find
    com.github.underscore.lodash.$$Chain findLast(com.github.underscore.Predicate) -> findLast
    com.github.underscore.lodash.$$Chain max() -> max
    com.github.underscore.lodash.$$Chain max(com.github.underscore.Function) -> max
    com.github.underscore.lodash.$$Chain min() -> min
    com.github.underscore.lodash.$$Chain min(com.github.underscore.Function) -> min
    com.github.underscore.lodash.$$Chain sort() -> sort
    com.github.underscore.lodash.$$Chain sortWith(java.util.Comparator) -> sortWith
    com.github.underscore.lodash.$$Chain sortBy(com.github.underscore.Function) -> sortBy
    com.github.underscore.lodash.$$Chain sortBy(java.lang.Object) -> sortBy
    com.github.underscore.lodash.$$Chain groupBy(com.github.underscore.Function) -> groupBy
    com.github.underscore.lodash.$$Chain indexBy(java.lang.String) -> indexBy
    com.github.underscore.lodash.$$Chain countBy(com.github.underscore.Function) -> countBy
    com.github.underscore.lodash.$$Chain shuffle() -> shuffle
    com.github.underscore.lodash.$$Chain sample() -> sample
    com.github.underscore.lodash.$$Chain sample(int) -> sample
    com.github.underscore.lodash.$$Chain tap(com.github.underscore.Consumer) -> tap
    com.github.underscore.lodash.$$Chain forEach(com.github.underscore.Consumer) -> forEach
    com.github.underscore.lodash.$$Chain forEachRight(com.github.underscore.Consumer) -> forEachRight
    com.github.underscore.lodash.$$Chain every(com.github.underscore.Predicate) -> every
    com.github.underscore.lodash.$$Chain some(com.github.underscore.Predicate) -> some
    com.github.underscore.lodash.$$Chain contains(java.lang.Object) -> contains
    com.github.underscore.lodash.$$Chain invoke(java.lang.String,java.util.List) -> invoke
    com.github.underscore.lodash.$$Chain invoke(java.lang.String) -> invoke
    com.github.underscore.lodash.$$Chain pluck(java.lang.String) -> pluck
    com.github.underscore.lodash.$$Chain where(java.util.List) -> where
    com.github.underscore.lodash.$$Chain findWhere(java.util.List) -> findWhere
    com.github.underscore.lodash.$$Chain uniq() -> uniq
    com.github.underscore.lodash.$$Chain uniq(com.github.underscore.Function) -> uniq
    com.github.underscore.lodash.$$Chain distinct() -> distinct
    com.github.underscore.lodash.$$Chain distinctBy(com.github.underscore.Function) -> distinctBy
    com.github.underscore.lodash.$$Chain union(java.util.List[]) -> union
    com.github.underscore.lodash.$$Chain intersection(java.util.List[]) -> intersection
    com.github.underscore.lodash.$$Chain difference(java.util.List[]) -> difference
    com.github.underscore.lodash.$$Chain range(int) -> range
    com.github.underscore.lodash.$$Chain range(int,int) -> range
    com.github.underscore.lodash.$$Chain range(int,int,int) -> range
    com.github.underscore.lodash.$$Chain chunk(int) -> chunk
    com.github.underscore.lodash.$$Chain concat(java.util.List[]) -> concat
    com.github.underscore.lodash.$$Chain slice(int) -> slice
    com.github.underscore.lodash.$$Chain slice(int,int) -> slice
    com.github.underscore.lodash.$$Chain reverse() -> reverse
    com.github.underscore.lodash.$$Chain join() -> join
    com.github.underscore.lodash.$$Chain join(java.lang.String) -> join
    com.github.underscore.lodash.$$Chain skip(int) -> skip
    com.github.underscore.lodash.$$Chain limit(int) -> limit
    com.github.underscore.lodash.$$Chain toMap() -> toMap
    com.github.underscore.lodash.$$Chain drop() -> drop
    com.github.underscore.lodash.$$Chain drop(java.lang.Integer) -> drop
    com.github.underscore.lodash.$$Chain dropRight() -> dropRight
    com.github.underscore.lodash.$$Chain dropRight(java.lang.Integer) -> dropRight
    com.github.underscore.lodash.$$Chain dropWhile(com.github.underscore.Predicate) -> dropWhile
    com.github.underscore.lodash.$$Chain dropRightWhile(com.github.underscore.Predicate) -> dropRightWhile
    com.github.underscore.lodash.$$Chain fill(java.lang.Object) -> fill
    com.github.underscore.lodash.$$Chain fill(java.lang.Object,java.lang.Integer,java.lang.Integer) -> fill
    com.github.underscore.lodash.$$Chain flattenDeep() -> flattenDeep
    com.github.underscore.lodash.$$Chain pull(java.lang.Object[]) -> pull
    com.github.underscore.lodash.$$Chain pullAt(java.lang.Integer[]) -> pullAt
    com.github.underscore.lodash.$$Chain remove(com.github.underscore.Predicate) -> remove
    com.github.underscore.lodash.$$Chain take() -> take
    com.github.underscore.lodash.$$Chain takeRight() -> takeRight
    com.github.underscore.lodash.$$Chain take(java.lang.Integer) -> take
    com.github.underscore.lodash.$$Chain takeRight(java.lang.Integer) -> takeRight
    com.github.underscore.lodash.$$Chain takeWhile(com.github.underscore.Predicate) -> takeWhile
    com.github.underscore.lodash.$$Chain takeRightWhile(com.github.underscore.Predicate) -> takeRightWhile
    com.github.underscore.lodash.$$Chain xor(java.util.List) -> xor
    com.github.underscore.lodash.$$Chain at(java.lang.Integer[]) -> at
    com.github.underscore.lodash.$$Chain sum() -> sum
    com.github.underscore.lodash.$$Chain sum(com.github.underscore.Function) -> sum
    com.github.underscore.lodash.$$Chain mean() -> mean
    com.github.underscore.lodash.$$Chain median() -> median
    com.github.underscore.lodash.$$Chain camelCase() -> camelCase
    com.github.underscore.lodash.$$Chain lowerFirst() -> lowerFirst
    com.github.underscore.lodash.$$Chain upperFirst() -> upperFirst
    com.github.underscore.lodash.$$Chain capitalize() -> capitalize
    com.github.underscore.lodash.$$Chain deburr() -> deburr
    com.github.underscore.lodash.$$Chain endsWith(java.lang.String) -> endsWith
    com.github.underscore.lodash.$$Chain endsWith(java.lang.String,java.lang.Integer) -> endsWith
    com.github.underscore.lodash.$$Chain kebabCase() -> kebabCase
    com.github.underscore.lodash.$$Chain repeat(int) -> repeat
    com.github.underscore.lodash.$$Chain pad(int) -> pad
    com.github.underscore.lodash.$$Chain pad(int,java.lang.String) -> pad
    com.github.underscore.lodash.$$Chain padStart(int) -> padStart
    com.github.underscore.lodash.$$Chain padStart(int,java.lang.String) -> padStart
    com.github.underscore.lodash.$$Chain padEnd(int) -> padEnd
    com.github.underscore.lodash.$$Chain padEnd(int,java.lang.String) -> padEnd
    com.github.underscore.lodash.$$Chain snakeCase() -> snakeCase
    com.github.underscore.lodash.$$Chain startCase() -> startCase
    com.github.underscore.lodash.$$Chain startsWith(java.lang.String) -> startsWith
    com.github.underscore.lodash.$$Chain startsWith(java.lang.String,java.lang.Integer) -> startsWith
    com.github.underscore.lodash.$$Chain trim() -> trim
    com.github.underscore.lodash.$$Chain trim(java.lang.String) -> trim
    com.github.underscore.lodash.$$Chain trimStart() -> trimStart
    com.github.underscore.lodash.$$Chain trimStart(java.lang.String) -> trimStart
    com.github.underscore.lodash.$$Chain trimEnd() -> trimEnd
    com.github.underscore.lodash.$$Chain trunc() -> trunc
    com.github.underscore.lodash.$$Chain trunc(int) -> trunc
    com.github.underscore.lodash.$$Chain trimEnd(java.lang.String) -> trimEnd
    com.github.underscore.lodash.$$Chain uncapitalize() -> uncapitalize
    com.github.underscore.lodash.$$Chain words() -> words
    com.github.underscore.lodash.$$Chain toJson() -> toJson
    com.github.underscore.lodash.$$Chain fromJson() -> fromJson
    com.github.underscore.lodash.$$Chain toXml() -> toXml
    com.github.underscore.lodash.$$Chain fromXml() -> fromXml
    com.github.underscore.lodash.$$Chain fetch() -> fetch
    com.github.underscore.lodash.$$Chain fetch(java.lang.String,java.lang.String) -> fetch
    com.github.underscore.$$Chain toMap() -> toMap
    com.github.underscore.$$Chain limit(int) -> limit
    com.github.underscore.$$Chain skip(int) -> skip
    com.github.underscore.$$Chain join(java.lang.String) -> join
    com.github.underscore.$$Chain join() -> join
    com.github.underscore.$$Chain reverse() -> reverse
    com.github.underscore.$$Chain slice(int,int) -> slice
    com.github.underscore.$$Chain slice(int) -> slice
    com.github.underscore.$$Chain concat(java.util.List[]) -> concat
    com.github.underscore.$$Chain chunk(int) -> chunk
    com.github.underscore.$$Chain range(int,int,int) -> range
    com.github.underscore.$$Chain range(int,int) -> range
    com.github.underscore.$$Chain range(int) -> range
    com.github.underscore.$$Chain difference(java.util.List[]) -> difference
    com.github.underscore.$$Chain intersection(java.util.List[]) -> intersection
    com.github.underscore.$$Chain union(java.util.List[]) -> union
    com.github.underscore.$$Chain distinctBy(com.github.underscore.Function) -> distinctBy
    com.github.underscore.$$Chain distinct() -> distinct
    com.github.underscore.$$Chain uniq(com.github.underscore.Function) -> uniq
    com.github.underscore.$$Chain uniq() -> uniq
    com.github.underscore.$$Chain findWhere(java.util.List) -> findWhere
    com.github.underscore.$$Chain where(java.util.List) -> where
    com.github.underscore.$$Chain pluck(java.lang.String) -> pluck
    com.github.underscore.$$Chain invoke(java.lang.String) -> invoke
    com.github.underscore.$$Chain invoke(java.lang.String,java.util.List) -> invoke
    com.github.underscore.$$Chain contains(java.lang.Object) -> contains
    com.github.underscore.$$Chain some(com.github.underscore.Predicate) -> some
    com.github.underscore.$$Chain every(com.github.underscore.Predicate) -> every
    com.github.underscore.$$Chain forEachRight(com.github.underscore.Consumer) -> forEachRight
    com.github.underscore.$$Chain forEach(com.github.underscore.Consumer) -> forEach
    com.github.underscore.$$Chain tap(com.github.underscore.Consumer) -> tap
    com.github.underscore.$$Chain sample(int) -> sample
    com.github.underscore.$$Chain sample() -> sample
    com.github.underscore.$$Chain shuffle() -> shuffle
    com.github.underscore.$$Chain countBy(com.github.underscore.Function) -> countBy
    com.github.underscore.$$Chain indexBy(java.lang.String) -> indexBy
    com.github.underscore.$$Chain groupBy(com.github.underscore.Function) -> groupBy
    com.github.underscore.$$Chain sortBy(java.lang.Object) -> sortBy
    com.github.underscore.$$Chain sortBy(com.github.underscore.Function) -> sortBy
    com.github.underscore.$$Chain sortWith(java.util.Comparator) -> sortWith
    com.github.underscore.$$Chain sort() -> sort
    com.github.underscore.$$Chain min(com.github.underscore.Function) -> min
    com.github.underscore.$$Chain min() -> min
    com.github.underscore.$$Chain max(com.github.underscore.Function) -> max
    com.github.underscore.$$Chain max() -> max
    com.github.underscore.$$Chain findLast(com.github.underscore.Predicate) -> findLast
    com.github.underscore.$$Chain find(com.github.underscore.Predicate) -> find
    com.github.underscore.$$Chain reduceRight(com.github.underscore.BiFunction,java.lang.Object) -> reduceRight
    com.github.underscore.$$Chain reduce(com.github.underscore.BiFunction,java.lang.Object) -> reduce
    com.github.underscore.$$Chain filterFalse(com.github.underscore.Predicate) -> filterFalse
    com.github.underscore.$$Chain rejectIndexed(com.github.underscore.PredicateIndexed) -> rejectIndexed
    com.github.underscore.$$Chain reject(com.github.underscore.Predicate) -> reject
    com.github.underscore.$$Chain filterIndexed(com.github.underscore.PredicateIndexed) -> filterIndexed
    com.github.underscore.$$Chain filter(com.github.underscore.Predicate) -> filter
    com.github.underscore.$$Chain map(com.github.underscore.Function) -> map
    com.github.underscore.$$Chain flatten() -> flatten
    com.github.underscore.$$Chain compact(java.lang.Object) -> compact
    com.github.underscore.$$Chain compact() -> compact
    com.github.underscore.$$Chain rest(int) -> rest
    com.github.underscore.$$Chain rest() -> rest
    com.github.underscore.$$Chain lastOrNull(com.github.underscore.Predicate) -> lastOrNull
    com.github.underscore.$$Chain lastOrNull() -> lastOrNull
    com.github.underscore.$$Chain last(int) -> last
    com.github.underscore.$$Chain last() -> last
    com.github.underscore.$$Chain initial(int) -> initial
    com.github.underscore.$$Chain initial() -> initial
    com.github.underscore.$$Chain firstOrNull(com.github.underscore.Predicate) -> firstOrNull
    com.github.underscore.$$Chain firstOrNull() -> firstOrNull
    com.github.underscore.$$Chain first(int) -> first
    com.github.underscore.$$Chain first() -> first
com.github.underscore.lodash.$$FetchResponse -> com.github.underscore.lodash.$$FetchResponse:
    boolean ok -> ok
    int status -> status
    java.util.Map headerFields -> headerFields
    java.io.ByteArrayOutputStream stream -> stream
    void <init>(boolean,int,java.util.Map,java.io.ByteArrayOutputStream) -> <init>
    boolean isOk() -> isOk
    int getStatus() -> getStatus
    java.util.Map getHeaderFields() -> getHeaderFields
    byte[] blob() -> blob
    java.lang.String text() -> text
    java.lang.Object json() -> json
    java.lang.Object xml() -> xml
com.github.underscore.lodash.$$JsonArray -> com.github.underscore.lodash.$$a:
    java.lang.String json -> a
    int index -> b
    int line -> c
    int lineOffset -> d
    int current -> e
    java.lang.StringBuilder captureBuffer -> f
    int captureStart -> g
    void writeJson(java.util.Collection,com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void writeJson(byte[],com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void writeJson(short[],com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void writeJson(int[],com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void writeJson(long[],com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void writeJson(float[],com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void writeJson(double[],com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void writeJson(boolean[],com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void writeJson(char[],com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void writeJson(java.lang.Object[],com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void writeJson(java.util.Map,com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void <init>(java.lang.String) -> <init>
    java.lang.Object parse() -> a
    java.lang.Object readValue() -> b
    java.util.List readArray() -> c
    java.util.Map readObject() -> d
    java.lang.String readName() -> e
    java.lang.String readNull() -> f
    java.lang.Boolean readTrue() -> g
    java.lang.Boolean readFalse() -> h
    void readRequiredChar(char) -> a
    java.lang.String readString() -> i
    void readEscape() -> j
    java.lang.Number readNumber() -> k
    boolean readFraction() -> l
    boolean readExponent() -> m
    boolean readChar(char) -> b
    boolean readDigit() -> n
    void skipWhiteSpace() -> o
    void read() -> p
    void startCapture() -> q
    void pauseCapture() -> r
    java.lang.String endCapture() -> s
    com.github.underscore.lodash.$$ParseException expected(java.lang.String) -> a
    com.github.underscore.lodash.$$ParseException error(java.lang.String) -> b
    boolean isWhiteSpace() -> t
    boolean isDigit() -> u
    boolean isHexDigit() -> v
    boolean isEndOfText() -> w
    void writeJson(java.lang.Object,com.github.underscore.lodash.$$JsonStringBuilder) -> a
    void escape(java.lang.String,java.lang.StringBuilder) -> a
    void writeXml(java.util.Collection,com.github.underscore.lodash.$$XmlStringBuilder) -> a
    void writeXml(byte[],com.github.underscore.lodash.$$XmlStringBuilder) -> a
    void writeXml(short[],com.github.underscore.lodash.$$XmlStringBuilder) -> a
    void writeXml(int[],com.github.underscore.lodash.$$XmlStringBuilder) -> a
    void writeXml(long[],com.github.underscore.lodash.$$XmlStringBuilder) -> a
    void writeXml(float[],com.github.underscore.lodash.$$XmlStringBuilder) -> a
    void writeXml(double[],com.github.underscore.lodash.$$XmlStringBuilder) -> a
    void writeXml(boolean[],com.github.underscore.lodash.$$XmlStringBuilder) -> a
    void writeXml(char[],com.github.underscore.lodash.$$XmlStringBuilder) -> a
    void writeXml(java.lang.Object[],com.github.underscore.lodash.$$XmlStringBuilder) -> a
    void writeXml(java.util.Map,com.github.underscore.lodash.$$XmlStringBuilder) -> a
com.github.underscore.lodash.$$JsonStringBuilder -> com.github.underscore.lodash.$$b:
    java.lang.StringBuilder builder -> a
    int ident -> b
    void <init>() -> <init>
    com.github.underscore.lodash.$$JsonStringBuilder append(char) -> a
    com.github.underscore.lodash.$$JsonStringBuilder append(java.lang.String) -> a
    com.github.underscore.lodash.$$JsonStringBuilder fillSpaces() -> a
    com.github.underscore.lodash.$$JsonStringBuilder incIdent() -> b
    com.github.underscore.lodash.$$JsonStringBuilder decIdent() -> c
    com.github.underscore.lodash.$$JsonStringBuilder newLine() -> d
    java.lang.String toString() -> toString
com.github.underscore.lodash.$$NoHostnameVerifier -> com.github.underscore.lodash.$$c:
    void <init>() -> <init>
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
com.github.underscore.lodash.$$ParseException -> com.github.underscore.lodash.$$ParseException:
    int offset -> offset
    int line -> line
    int column -> column
    void <init>(java.lang.String,int,int,int) -> <init>
    int getOffset() -> getOffset
    int getLine() -> getLine
    int getColumn() -> getColumn
com.github.underscore.lodash.$$XmlStringBuilder -> com.github.underscore.lodash.$$d:
    java.lang.StringBuilder builder -> a
    int ident -> b
    void <init>() -> <init>
    void <init>(java.lang.StringBuilder,int) -> <init>
    com.github.underscore.lodash.$$XmlStringBuilder append(java.lang.String) -> a
    com.github.underscore.lodash.$$XmlStringBuilder fillSpaces() -> a
    com.github.underscore.lodash.$$XmlStringBuilder incIdent() -> b
    com.github.underscore.lodash.$$XmlStringBuilder decIdent() -> c
    com.github.underscore.lodash.$$XmlStringBuilder newLine() -> d
    java.lang.String toString() -> toString
com.github.underscore.lodash.$$XmlStringBuilderWithoutRoot -> com.github.underscore.lodash.$$e:
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.github.underscore.lodash.$$XmlValue -> com.github.underscore.lodash.$$f:
    void writeXml(java.lang.Object,com.github.underscore.lodash.$$XmlStringBuilder) -> a
    void escape(java.lang.String,java.lang.StringBuilder) -> a
