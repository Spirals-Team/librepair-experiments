(function(c,m){var i=new m.RestClient();var p=null;var o=null;var k="identifier";var d="N/A";var h=5;m.OntologyService=function f(s,t){if(s){o=s}if(t){p=t;p.entityPager={start:0,num:h,total:5}}};m.OntologyService.prototype.renderPage=function(){var s=[];s.push('<div class="row"><div class="col-md-offset-3 col-md-6 well">');s.push('<div class="row">');s.push('<div class="col-md-8">The total number of matched items is <strong><span id="matched-item-count"></span></strong></div>');s.push('<div class="col-md-4"><button id="matched-result-button" type="button" class="btn btn-primary pull-right">Show</button></div>');s.push("</div><br>");s.push('<div class="row">');s.push('<div class="col-md-8">The total number of unmatched items is <strong><span id="unmatched-item-count"></span></strong></div>');s.push('<div class="col-md-4"><button id="unmatched-result-button" type="button" class="btn btn-info pull-right">Show</button></div>');s.push("</div><br>");s.push('<div class="row">');s.push('<div class="col-md-12"><button id="sorta-download-button" class="btn btn-primary" type="button">Download</button></div>');s.push("</div>");s.push("</div></div>");o.empty().append(s.join(""));t(function(x){var w={};var v=x.numberOfMatched;var u=x.numberOfUnmatched;w.total=p.matched?v:u;n(w);c("#matched-item-count").html(v);c("#unmatched-item-count").html(u)});c("#sorta-download-button").click(function(){c(this).parents("form:eq(0)").attr({action:m.getContextUrl()+"/match/download/"+p.sortaJobExecutionId,method:"GET"}).submit()});c("#matched-result-button").click(function(){p.matched=true;m.OntologyService.prototype.renderPage()});c("#unmatched-result-button").click(function(){p.matched=false;m.OntologyService.prototype.renderPage()});function t(u){c.ajax({type:"GET",url:m.getContextUrl()+"/count/"+p.sortaJobExecutionId,contentType:"application/json",success:function(v){if(u!==null&&typeof u==="function"){u(v)}}})}};function n(s){c.extend(p.entityPager,s);c.ajax({type:"POST",url:m.getContextUrl()+"/match/retrieve",async:false,data:JSON.stringify(p),contentType:"application/json",success:function(w){var v=c("<div />").addClass("col-md-12");if(w.items.length>0){var y=c("<div />").addClass("row").appendTo(v);var z=[];z.push('<div class="col-md-3">');z.push('<div class="input-group"><span class="input-group-addon">Filter</span>');z.push('<input type="text" class="form-control" value="'+(p.filterQuery?p.filterQuery:"")+'" />');z.push('<span class="input-group-btn"><button class="btn btn-default"><span class="glyphicon glyphicon-search"></span></button></span>');z.push("</div></div>");var t=c("<div />").addClass("row").css({"margin-bottom":"10px"}).appendTo(v);t.append(z.join(""));t.append('<div class="col-md-6"><center><strong><p style="font-size:20px;">'+(p.matched?"Matched result":"Unmatched result")+"</p></strong></center></div>");var u=[];u.push('<div class="col-md-12"><table class="table">');u.push('<tr><th style="width:38%;">Input term</th><th style="width:38%;">Best candidate</th><th style="width:10%;">Score</th><th style="width:10%;">Manual Match</th>'+(p.matched?"<th>Remove</th>":"")+"</tr>");u.push("</table></div>");c("<div />").addClass("row").append(u.join("")).appendTo(v);var C=c(v).find("table:eq(0)");c.each(w.items,function(E,D){C.append(g(D,p.matched,s))});var x=t.find("button:eq(0)");var A=t.find("input:eq(0)");c(x).click(function(){if(p.filterQuery!==c(A).val()){p.filterQuery=c(A).val();n(s)}return false});c(A).keyup(function(D){if(D.keyCode===13||c(this).val()===""){c(x).click()}});c(y).pager({page:Math.floor(w.start/w.num)+(w.start%w.num==0?0:1)+1,nrItems:w.total,nrItemsPerPage:w.num,onPageChange:n})}else{var B=[];B.push('<div class="col-md-offset-3 col-md-6"><p>There are no results!</p>');if(p.filterQuery){B.push("<strong>Clear the query </strong>: "+p.filterQuery+"&nbsp;&nbsp;");B.push('<span class="glyphicon glyphicon-remove"></span>')}B.push("<br><br></div>");v.append(B.join(""));c(v).find("span.glyphicon-remove:eq(0)").click(function(){p.filterQuery="";n(s)})}o.children("div.row:gt(0)").empty();c("<div />").addClass("row").append(v).appendTo(o)}})}m.OntologyService.prototype.deleteMatchingTask=function(s,t){c.ajax({type:"POST",url:m.getContextUrl()+"/delete",async:false,data:JSON.stringify(s),contentType:"application/json",success:function(){if(t){t()}}})};function g(u,s,v){var w=c("<tr />");w.append(q(u.inputTerm));w.append(e(u.inputTerm,u.ontologyTerm));c("<td />").append(u.matchedTerm.score?u.matchedTerm.score.toFixed(2)+"%":d).appendTo(w);if(s){c("<td />").append('<span class="glyphicon '+(u.matchedTerm.validated?"glyphicon-ok":"glyphicon-remove")+'"></span>').appendTo(w);c("<td />").append(u.matchedTerm.validated?'<button type="button" class="btn btn-default"><span class="glyphicon glyphicon-trash"</span></button>':"").appendTo(w);w.find("button:eq(0)").click(function(){a(u.inputTerm.Identifier,p.sortaJobExecutionId,function(z){var x={};c.map(u.matchedTerm,function(B,A){if(A!=="identifier"){x[A]=B}if(A==="validated"){x[A]=false}if(A==="inputTerm"){x[A]=B.Identifier}});if(z.ontologyTerms&&z.ontologyTerms.length>0){var y=z.ontologyTerms[0];x.score=y.Score;x.matchTerm=y.ontologyTermIRI}else{x.score=0;x.matchTerm=null}i.update("/api/v1/"+p.sortaJobExecutionId+"/"+u.matchedTerm.identifier,x,j(),true)})})}else{var t=c('<button class="btn btn-default" type="button">Match</button>').click(function(){a(u.inputTerm.Identifier,p.sortaJobExecutionId,function(x){b(u.inputTerm,x,w,v)})});c("<td />").append(t).appendTo(w)}return w}function b(x,v,B,y){if(v.message){console.log("Error fetching candidate mappings",v.message);throw v.message}var s=c('<div class="row"></div>').css({"margin-bottom":"20px"});B.parents("table:eq(0)").hide();B.parents("div:eq(0)").append(s);var C=c('<button type="button" class="btn btn-warning">Cancel</button>').css({"margin-bottom":"10px","float":"right"}).click(function(){s.remove();B.parents("table:eq(0)").show()});var t=c('<button type="button" class="btn btn-danger">No match</button>').css({"margin-bottom":"10px","margin-right":"10px","float":"right"}).click(function(){r(x.Identifier,p.sortaJobExecutionId,function(F){if(F.items.length>0){var G=F.items[0];var E="/api/v1/"+p.sortaJobExecutionId+"/"+G.identifier;var D={};c.map(G,function(I,H){D[H]=I;if(H==="validated"){D[H]=true}if(H==="inputTerm"){console.log("inputTerm",I);D[H]=I.Identifier}if(H==="score"){D[H]=0}if(H==="matchTerm"){D[H]=null}});i.update(E,D,j(),true)}})});var z=c("<div>Adjusted score ?</div>").css({cursor:"pointer"}).popover({title:"Explanation",content:'<p style="color:black;font-weight:normal;">Adjusted scores are derived from the original scores (<strong>lexical similarity</strong>) combined with the weight of the words (<strong>inverse document frequency</strong>)</p>',placement:"auto",trigger:"hover",html:true});var A=c('<table class="table"></table>');var w=c("<tr />").appendTo(A);c("<th />").append("Input term").css({width:"30%"}).appendTo(w);c("<th />").append("Candidate mapping").css({width:"40%"}).appendTo(w);c("<th />").append("Score").css({width:"12%"}).appendTo(w);c("<th />").append(z).css({width:"12%"}).appendTo(w);c("<th />").append("Select").appendTo(w);var u;if(v.ontologyTerms&&v.ontologyTerms.length>0){u=c('<center><p style="font-size:15px;">The candidate ontology terms are sorted based on similarity score, please select one of them by clicking <span class="glyphicon glyphicon-ok"></span> button</p></center>');c.each(v.ontologyTerms,function(E,D){if(E>=20){return}var F=c("<tr />").appendTo(A);F.append(E==0?q(x):"<td></td>");F.append(e(x,D));F.append("<td>"+D.Score.toFixed(2)+"%</td>");F.append("<td>"+D.Combined_Score.toFixed(2)+"%</td>");F.append('<td><button type="button" class="btn btn-default"><span class="glyphicon glyphicon-ok"></span></button></td>');F.data("ontologyTerm",D);F.find("button:eq(0)").click(function(){r(x.Identifier,p.sortaJobExecutionId,function(I){if(I.items.length>0){var J=I.items[0];var H="/api/v1/"+p.sortaJobExecutionId+"/"+J.identifier;var G={};c.map(J,function(L,K){if(K==="validated"){G[K]=true}else{if(K==="inputTerm"){G[K]=L.Identifier}else{if(K==="matchTerm"){G.matchTerm=F.data("ontologyTerm").ontologyTermIRI}else{if(K==="score"){G.score=F.data("ontologyTerm").Score}else{G[K]=L}}}}});i.update(H,G,j(),true)}})})})}else{u=c('<center><p style="font-size:15px;">There are no candidate mappings for this input term!</p></center>');c("<tr />").append(q(x)).append("<td>"+d+"</td><td>"+d+"</td><td>"+d+"</td><td>"+d+"</td>").appendTo(A)}c('<div class="col-md-12"></div>').append(u).append(C).append(t).append(A).appendTo(s)}function j(){return{success:function(){m.OntologyService.prototype.renderPage()},error:function(){m.OntologyService.prototype.renderPage()}}}function r(t,s,u){i.getAsync("/api/v1/"+s,{q:[{field:"inputTerm",operator:"EQUALS",value:t}],expand:["inputTerm"]},function(v){if(u){u(v)}})}function a(t,s,u){c.ajax({type:"POST",url:m.getContextUrl()+"/match/entity",async:false,data:JSON.stringify({identifier:t,sortaJobExecutionId:s}),contentType:"application/json",success:function(v){if(v.message){throw v.message}if(u){u(v)}}})}function q(s){var t=c("<td />");if(s){c.map(s?s:{},function(v,u){if(u.toLowerCase()!==k.toLowerCase()){t.append("<div>"+u+" : "+v+"</div>")}})}return t}function e(v,u){var t=c("<td />");if(v&&u){var x=c("<div>Synonym : </div>");var s=l(u);if(s.length==0){x.append(d)}else{if(s.length==1){x.append(s.join())}else{x.addClass("show-popover").append("<strong>"+s.length+" synonyms, see more details</strong>").popover({content:s.join("<br><br>"),placement:"auto",trigger:"hover",html:true})}}if(u.ontologyTermIRI.startsWith("http")){t.append('<div>Name : <a href="'+u.ontologyTermIRI+'" target="_blank">'+u.ontologyTermName+"</a></div>").append(x)}else{t.append("<div>Name : "+u.ontologyTermName+"</div>").append(x)}var w={};c.each(u.ontologyTermDynamicAnnotation,function(z,y){if(!w[y.name]){w[y.name]=[]}w[y.name].push(y.value)});c.each(Object.keys(v),function(y,z){if(z.toLowerCase()!=="name"&&z.toLowerCase().search("synonym")===-1&&z.toLowerCase()!==k.toLowerCase()){t.append("<div>"+z+" : "+(w[z]?w[z].join():"N/A")+"</div>")}})}else{t.append(d)}return t}function l(t){var s=[];if(t.ontologyTermSynonym.length>0){c.each(t.ontologyTermSynonym,function(v,u){if(t.ontologyTermName!==u.ontologyTermSynonym&&c.inArray(u.ontologyTermSynonym,s)===-1){s.push(u.ontologyTermSynonym)}})}return s}}($,window.top.molgenis=window.top.molgenis||{}));