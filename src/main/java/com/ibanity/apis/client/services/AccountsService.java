package com.ibanity.apis.client.services;

import com.ibanity.apis.client.exceptions.ResourceNotFoundException;
import com.ibanity.apis.client.models.Account;
import com.ibanity.apis.client.models.AccountInformationAccessAuthorization;
import com.ibanity.apis.client.models.AccountInformationAccessRequest;
import com.ibanity.apis.client.models.CustomerAccessToken;
import com.ibanity.apis.client.paging.IbanityPagingSpec;

import java.util.List;
import java.util.UUID;

/**
 * Service for Accounts related APIs
 */
public interface AccountsService {

    /**
     * Get a specific Financial Institution Customer's account
     * @param customerAccessToken the token generated by the call to the corresponding service (See @link com.ibanity.services.CustomerAccessTokenService#createCustomerAccessToken(CustomerAccessToken)}
     * @param accountId the UUID of the account
     * @param financialInstitutionId the Id of the financial institution to be used
     * @return the account
     * @throws ResourceNotFoundException when the provided ID is not known
     */
    Account getCustomerAccount(CustomerAccessToken customerAccessToken, UUID accountId, UUID financialInstitutionId) throws ResourceNotFoundException;

    /**
     * Get ALL customer accounts (from all authorized financial institutions)
     * note: In an account object's, the financialInstitution property object, only the financialInstitution.id is populated
     * @param customerAccessToken the token generated by the call to the corresponding service (See @link com.ibanity.services.CustomerAccessTokenService#createCustomerAccessToken(CustomerAccessToken)}
     * @return list of all customer's accounts
     */
    List<Account> getCustomerAccounts(CustomerAccessToken customerAccessToken);

    /**
     * Get ALL customer accounts (from all authorized financial institutions)
     * note: In an account object's, the financialInstitution property object, only the financialInstitution.id is populated
     * @param customerAccessToken the token generated by the call to the corresponding service (See @link com.ibanity.services.CustomerAccessTokenService#createCustomerAccessToken(CustomerAccessToken)}
     * @param pagingSpec The paging specification to be used for tuning the resulting list
     * @return list of all customer's accounts
     */
    List<Account> getCustomerAccounts(CustomerAccessToken customerAccessToken, IbanityPagingSpec pagingSpec);

    /**
     * Get customer's accounts from a particular financial institution
     * note: In an account object's, the financialInstitution property object, only the financialInstitution.id is populated
     * @param customerAccessToken the token generated by the call to the corresponding service (See @link com.ibanity.services.CustomerAccessTokenService#createCustomerAccessToken(CustomerAccessToken)}
     * @param financialInstitutionId the Id of the financial institution to be used
     * @return list of customer's accounts in the specified financial institution
     * @throws ResourceNotFoundException when the provided ID is not known
     */
    List<Account> getCustomerAccounts(CustomerAccessToken customerAccessToken, UUID financialInstitutionId) throws ResourceNotFoundException;

    /**
     * Get customer's accounts from a particular financial institution
     * note: In an account object's, the financialInstitution property object, only the financialInstitution.id is populated
     * @param customerAccessToken the token generated by the call to the corresponding service (See @link com.ibanity.services.CustomerAccessTokenService#createCustomerAccessToken(CustomerAccessToken)}
     * @param financialInstitutionId the Id of the financial institution to be used
     * @param pagingSpec The paging specification to be used for tuning the resulting list
     * @return list of customer's accounts in the specified financial institution
     * @throws ResourceNotFoundException when the provided ID is not known
     */
    List<Account> getCustomerAccounts(CustomerAccessToken customerAccessToken, UUID financialInstitutionId, IbanityPagingSpec pagingSpec) throws ResourceNotFoundException;

    /**
     * Get an account information request that will contain the URI to be redirected to the PSU (end-user) Web Browser.
     * The Redirect URI will redirect the end-user to the Financial Institution in order to authorize Ibanity to access the selected bank accounts
     * @param customerAccessToken the token generated by the call to the corresponding service (See @link com.ibanity.services.CustomerAccessTokenService#createCustomerAccessToken(CustomerAccessToken)}
     * @param accountInformationAccessRequest Information related to the request:
     *                                        redirect URI : to redirect the end-user to the TPP page after the authorization flow has been completed, this URI needs to be a URI referenced in the Ibanity Portal
     *                                        consentReference: the consent reference
     *                                        financialInstitution.id : the ID of the financial institution to which we're gonna ask the accounts access
     * @return an accountInformationAccessRequest containing a redirect URI (property: links.redirect) to be provided, as redirect response, to the end-user browser
     */
    AccountInformationAccessRequest getAccountInformationAccessRequest(CustomerAccessToken customerAccessToken, AccountInformationAccessRequest accountInformationAccessRequest);

    /**
     * Get the list of Account Access Authorizations
     * @param customerAccessToken the token generated by the call to the corresponding service (See @link com.ibanity.services.CustomerAccessTokenService#createCustomerAccessToken(CustomerAccessToken)}
     * @param financialInstitutionId the financial institution id
     * @param accountInformationAccessRequestId the account access request id
     * @return the list of authorizations details
     * @throws ResourceNotFoundException when the provided ID is not known
     */
    List<AccountInformationAccessAuthorization> getAccountsInformationAccessAuthorizations(CustomerAccessToken customerAccessToken, UUID financialInstitutionId,  UUID accountInformationAccessRequestId) throws ResourceNotFoundException ;

    /**
     * Get the list of Account Access Authorizations
     * @param customerAccessToken the token generated by the call to the corresponding service (See @link com.ibanity.services.CustomerAccessTokenService#createCustomerAccessToken(CustomerAccessToken)}
     * @param financialInstitutionId the financial institution id
     * @param accountInformationAccessRequestId the account access request id
     * @param pagingSpec The paging specification to be used for tuning the resulting list
     * @return the list of authorizations details
     * @throws ResourceNotFoundException when the provided ID is not known
     */
    List<AccountInformationAccessAuthorization> getAccountsInformationAccessAuthorizations(CustomerAccessToken customerAccessToken, UUID financialInstitutionId,  UUID accountInformationAccessRequestId, IbanityPagingSpec pagingSpec) throws ResourceNotFoundException;

    /**
     * Revoke an Account Access Authorization
     * @param customerAccessToken the token generated by the call to the corresponding service (See @link com.ibanity.services.CustomerAccessTokenService#createCustomerAccessToken(CustomerAccessToken)}
     * @param accountInformationAccessAuthorization The Account Information Access Authorization which ID and accountInformation.id are set
     * @param financialInstitutionId The Id of the accounts' Financial Institution for which we want to Revoke the authorization
     * @throws ResourceNotFoundException when the provided ID is not known
     */
    void revokeAccountsAccessAuthorization(CustomerAccessToken customerAccessToken, UUID financialInstitutionId, AccountInformationAccessAuthorization accountInformationAccessAuthorization) throws ResourceNotFoundException;
}
