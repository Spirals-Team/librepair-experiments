<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="introduction" xmlns="http://docbook.org/ns/docbook"
	version="5.0" xmlns:xl="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">
	<title>Introduction</title>

	<section xml:id="introduction-overwiew">
		<title>Overview</title>

		<para>
			We can briefly define HDIV as a Java Web Application Security
			Framework that controls the information flow between the server and
			the client,
			avoiding many of the most important web risks.

			HDIV extends
			web
			application behaviour by adding Security
			functionalities,
			maintaining
			the API and the framework specification.
			This implies that
			we can use
			HDIV in applications developed in Spring
			MVC, Grails,
			JSTL,
			Struts 1.x,
			Struts 2.x and JSF in a
			transparent way to the
			programmer,
			without adding any complexity to
			the application
			development.
		</para>

		<para>
			The security functionalities added to the web applications are
			the following:
		</para>

		<itemizedlist>

			<listitem>
				<para>
					<emphasis role="bold">Integrity</emphasis>
					:
					HDIV guarantees integrity of all the data
					generated by the server
					which should not be modified by the client
					(links, hidden fields,
					combo values, radio buttons, destiny pages,
					etc.). Within HDIV this
					kind of data is known as non editable data.
					Thanks to this, HDIV
					helps to eliminate most of the
					vulnerabilities based on parameter
					tampering.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Editable Data Validation</emphasis>
					:
					Editable validation is the data that comes from
					<code>textbox</code>
					and
					<code>textarea</code>
					fields within a form. In other words,
					it is new data that
					comes from
					the client side and by default it is untrusted data.
					HDIV
					eliminates
					to a large extent, the
					risk originated by
					Cross-site
					scripting (XSS)
					and
					SQL Injection attacks using generic
					validations
					applied at
					application level.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Confidentiality</emphasis>
					:
					HDIV also guarantees the confidentiality of the non editable data.
					Usually much of the data sent to the client has key
					information for
					the attackers, such as database registry
					identifiers, column or
					table names, web directories, etc. All these
					values are hidden by
					HDIV to avoid there malicious use. For
					example a link of this type,
					<code>http://www.host.com?data1=12</code>
					is
					replaced by
					<code>http://www.host.com?data1=0</code>
					, guaranteeing
					confidentiality of the
					values representing database
					identifiers.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Anti Cross-site request forgery (CSRF)
						token
					</emphasis>
					:
					A Random token is placed in each form and link of the HTML
					response, ensuring that this value will be submitted with the next
					request.
					This random string provides protection because the
					compromised site not only needs to know the URL
					and valid request
					format for the target site,
					it also must know
					the random string which
					changes for each page visited.
				</para>
			</listitem>

		</itemizedlist>

	</section>

	<section xml:id="introduction-coveredrisks">
		<title>Risks covered based on OWASP top ten</title>

		<para>HDIV covered risks:</para>

		<itemizedlist>

			<listitem>
				<para>
					<emphasis role="bold">A1 (Injection)</emphasis>
					: the source of the problem of sql injection
					risk is based on SQL
					queries with are not been parameterized
					(without
					<code>PreparedStatement</code>
					in Java
					environments). First of all
					HDIV
					minimizes the existence of
					untrusted
					data thanks to the web
					information flow control system
					that
					avoids the
					manipulation of
					data generated by the server side.
					This
					architecture minimizes the
					risk to only new data generated
					legally
					from editable
					form
					elements. It is important to note that
					even using a
					<code>PreparedStatement</code>
					,
					if the query is based on untrusted data
					generated
					previously at the
					server side
					(e.g.
					ID of an item within a
					list) a SQL
					injection
					risk is
					possible.

					In
					addition HDIV implements an internal
					system that detects
					SQL
					Injection
					risks within source-code.
				</para>
				<sbr />
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">A2 (Broken authentication and session
						management)
					</emphasis>
					: HDIV
					does not include a parallel authentication system, delegating
					this
					responsibility to application servers.
				</para>
				<sbr />
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">A3 (XSS)</emphasis>
					: the source of the problem of XSS risks is based on
					the generation
					of HTML output that uses non-escaped
					untrusted data. First of all,
					HDIV minimizes the existence of untrusted
					data, thanks to the web
					information flow control system it implements. This minimizes the
					risk to new data generated legally from
					editable form elements.

					In
					addition, HDIV implements an internal system that detects
					XSS risks
					within source-code.
				</para>
				<sbr />
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">A4 (Insecure direct object reference)
					</emphasis>
					: the source of this risk comes from the
					manipulation or updating of
					data generated previously at the server
					side. For instance, a list
					is sent to the client with an ID for each
					item. The client
					manipulates the id and tries to access a
					forbidden ID. HDIV checks
					all
					the data
					generated at the
					server side ensuring its integrity.
					There is also an option
					to ensure the
					confidentiality of data
					generated at
					the server side avoiding the
					display of critical
					information (credit
					cards, etc.).
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A5 (security misconfiguration)</emphasis>
					: current application security
					architectures do not follow the
					security
					by default. On the
					contrary, programmers must apply
					security
					measures to
					avoid access to private or
					confidential resources.
					The
					information flow control
					system implemented by HDIV allows control
					of the
					resources (links and forms)
					exposed by the application, and
					prevents breaking
					the original contract
					from the server.

					In other
					words, even when the
					programmer does not use access control
					systems
					or ACL
					(Java EE or Spring
					Security) HDIV is able to know
					which
					resource is legally
					accessible by each
					user.
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A6 (Sensitive data exposure)</emphasis>
					: HDIV offers confidentiality
					to all data generated at
					the server
					side. That is to say, HDIV
					replaces original parameter values
					generated at the server side by
					relative values (0,1,2,4, etc.) to
					avoid exposing critical data
					to the client.
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A7 (Missing function level access control)
					</emphasis>
					: current application security
					architectures do not follow the
					security
					by default. On the
					contrary, programmers must apply
					security
					measures to
					avoid access to private or
					confidential resources.
					The
					information flow control
					system implemented by HDIV allows control
					of the
					resources (links and forms)
					exposed by the application, and
					prevents breaking
					the original contract
					from the server.

					In other
					words,
					even when the
					programmer
					does not use access control
					systems or
					ACL
					(Java EE or
					Spring
					Security) HDIV is able to know
					which resource is
					legally
					accessible by each
					user.
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A8 (CSRF)</emphasis>
					: HDIV adds random tokens to each link or form in
					the application,
					making it extremely difficult to implement a CSRF
					attack because the
					attacker does not know what the value is.

					In
					order to offer a high
					level of security HDIV does not use a
					random token per session but
					creates a new token for each
					requested page instead.
					Even tokens used
					by links and forms within the
					same page are different,
					preventing
					reuse of link tokens to exploit
					a web form. One token is created for
					data retrieval requests (GET,
					HEAD, TRACE and OPTIONS HTTP methods)
					and another for data
					modification (POST, PATCH, PUT and DELETE
					methods).
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A9 (using components with known
						vulnerabilities)
					</emphasis>
					: although
					HDIV can not update out of date versions of software used
					by the web applications, the web
					information flow control system
					impedes the exploitation of known and unknown
					vulnerabilities
					whiting the software.

					In many cases
					(see: Struts cancel
					vulnerability)
					risks are based on an
					unexpected use of a web
					application. HDIV
					does not allow the
					original contract to be broken
					and so
					it is more difficult
					to exploit existing risks.
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A10 (Unvalidated redirects and forwards)
					</emphasis>
					: this vulnerability
					is mainly related to the manipulation of
					data
					generated previously at the server side. HDIV
					controls all the data
					from the server, preventing
					redirection to malicious
					web sites.
				</para>
			</listitem>

		</itemizedlist>
	</section>

</chapter>
  