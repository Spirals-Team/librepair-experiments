<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="configuration" xmlns="http://docbook.org/ns/docbook"
	version="5.0" xmlns:xl="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">
	<title>Configuration</title>
	<para>
		HDIV configuration is based on Spring configuration. HDIV has a
		custom schema to reduce the configuration tasks. First of all we need
		a Spring configuration file to add HDIV configuration.
	</para>

	<programlisting language="xml">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:hdiv="http://www.hdiv.org/schema/hdiv" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd 
                           http://www.hdiv.org/schema/hdiv http://www.hdiv.org/schema/hdiv/hdiv.xsd">
]]></programlisting>

	<para>
		From HDIV version 2.1.7, it is possible to configure HDIV in Java
		instead of XML.
	</para>
	<para>
		Example configuration:
		<programlisting language="java">
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void configure(SecurityConfigBuilder builder) {

        // Configuration options
    }

}
]]></programlisting>

		For an example application showing this feature:
		<link
			xl:href="https://github.com/hdiv/hdiv-spring-mvc-showcase/tree/javaconfig">https://github.com/hdiv/hdiv-spring-mvc-showcase/tree/javaconfig
		</link>
	</para>

	<para>
		In the case of Grails framework the configuration is realized through
		Config.groovy file updating
		<link xl:href="http://grails.org/plugin/hdiv">HDIV plugin</link>
		configuration options.
	</para>

	<section xml:id="configuration-startpages">
		<title>Start Pages</title>

		<para>
			By default the HDIV filter does not allow any request that has
			not
			been registered previously. Of course, when a user accesses for
			the first time, it is not possible to register the resource (url)
			requested
			by the user. In this case HDIV uses the concept of
			start
			pages - URLs to witch HDIV makes no
			validation. We
			can see start pages
			as the home pages
			of your web site.
		</para>
		<para>
			Note that
			HDIV is usually applied only to authenticated parts
			of
			the web page.
		</para>
		<para>
			This example shows the configuration code to define a
			start page to
			access the home page of web site.
			<programlisting language="xml">
<![CDATA[<hdiv:config>
    <hdiv:startPages>/home.html</hdiv:startPages>
</hdiv:config>
]]></programlisting>

		</para>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void addExclusions(ExclusionRegistry registry) {

        registry.addUrlExclusions("/home.html").method("GET");
    }

}
]]></programlisting>
		</para>

		<para>For Grails users update Config.groovy file:</para>
		<programlisting language="xml">
<![CDATA[grails {
    plugin {
        hdiv {
            config {
                startPages = [GET: '/home.html']
            }
        }
    }
}
]]></programlisting>

	</section>

	<section xml:id="configuration-editabledata">
		<title>Editable data validation</title>

		<para>
			As explained above HDIV offers a generic validation
			functionality to
			commit the application of validation rules
			to all editable
			data sent by
			the client. This includes information that comes from web form fields
			such as
			<code>textbox</code>
			and
			<code>textarea</code>
			.
		</para>
		<para>
			HDIV includes a
			default group of
			validation
			rules that try to avoid
			the
			most common risks
			such as XSS and
			SQL Injection.
		</para>
		<para>
			In order to activate HDIV editable
			validation with the
			default
			configuration, it is necessary to add the
			code below to your
			Spring
			configuration:
		</para>

		<programlisting language="xml">
<![CDATA[<hdiv:editableValidations registerDefaults="true">
</hdiv:editableValidations>
]]></programlisting>

		<para>
			In addition to the default validations it is possible to create
			your own custom validations. To do this, first
			it is necessary to
			create a validation entity, which could contain two kinds of
			patterns:
		</para>
		<itemizedlist>

			<listitem>
				<para>
					<emphasis role="bold">AcceptedPattern</emphasis>
					: the parameter value must match the pattern (whitelist), otherwise
					HDIV generates an error message that is visible
					within the original
					form.
					It is also possible to redirect
					the user to
					HDIV's generic error
					page. For this option add
					<code>showErrorPageOnEditableValidation="true"</code>
					to HDIV config.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">RejectedPattern</emphasis>
					if the parameter value matches the defined pattern (blacklist),
					HDIV
					generates an error that is visible within the
					original form or
					the HDIV generic error page.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			In order to create a validation it is necessary to create a
			validation
			entity within HDIV config file:
		</para>
		<programlisting language="xml">
<![CDATA[<hdiv:validation id="customValidation" componentType="text">
    <hdiv:acceptedPattern><[a-zA-Z0-9@.\-_]*$></hdiv:acceptedPattern>
    <hdiv:rejectedPattern><[(\s|\S)*(--)(\s|\S)*></hdiv:rejectedPattern>
</hdiv:validation>
]]></programlisting>

		<para>Once validation has been defined, it is necessary to make an
			additional step to activate it. To do this, add a validation rule to
			the
			editableValidations entity.
			The validation rule is applied to a
			specific url pattern. We see here an example to
			apply the validation
			as defined above:
		</para>

		<programlisting language="xml">
<![CDATA[<hdiv:editableValidations registerDefaults="true">
    <hdiv:validationRule url=".*" enableDefaults="true">customValidation</hdiv:validationRule>
</hdiv:editableValidations>
]]></programlisting>

		<para>
			All editable fields of the request are validated by default. It
			is
			possible to refine the configuration to apply selected rules
			to only
			some fields.
			In the next example the
			<code>customValidation</code>
			rule is applied only to
			<code>name</code>
			and
			<code>description</code>
			fields:
		</para>

		<programlisting language="xml">
<![CDATA[<hdiv:editableValidations registerDefaults="true">
    <hdiv:validationRule url="/example/form.html" parameters="name, description">customValidation</hdiv:validationRule>
</hdiv:editableValidations>
]]></programlisting>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void addRules(RuleRegistry registry) {

        registry.addRule("customValidation").acceptedPattern("^[a-zA-Z0-9@.\\-_]*$");
    }

    @Override
    public void configureEditableValidation(ValidationConfigurer validationConfigurer) {

        validationConfigurer.addValidation(".*").rules("customValidation");
    }

}
]]></programlisting>
		</para>

		<para>
			For Grails framework, this configuration must be
			included
			within
			Config.groovy file. In following code shows the
			validations
			defined
			within the
			HDIV and Grails reference application:
		</para>
		<programlisting language="xml">
<![CDATA[grails {
    plugin {
        hdiv {

            config { ...
            }

            validations = [[id: 'safeText', acceptedPattern: '^[a-zA-Z0-9@.\\-_]*$']]

            editableValidations = [
                [id: 'editableParametersValidations', registerDefaults: true,
                 validationRules: [[url: '/secure/.*', enableDefaults: true,  validationIds: 'safeText'],
                                   [url: '/safetext/.*', enableDefaults: false, validationIds: 'safeText']]
                ]
            ]
        }
    }
}]]></programlisting>

	</section>

</chapter>
