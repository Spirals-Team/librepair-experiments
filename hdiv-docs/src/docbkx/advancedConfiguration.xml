<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="advanceConfiguration" xmlns="http://docbook.org/ns/docbook"
	version="5.0" xmlns:xl="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">
	<title>Advanced Configuration</title>
	<para>
		In addition to the configuration options presented in the chapter
		above, HDIV offers more advanced options to cover all user needs.
	</para>

	<section xml:id="advancedConfiguration-startparameters">
		<title>Start Parameters</title>

		<para>
			By default the HDIV filter does not allow any request parameter
			that
			has not been registered previously by HDIV.
			In some cases
			parameters
			are not created on the server side or they have a random
			value, in which case they are incorporated as parameter
			names for
			which HDIV makes no kind of validation.
		</para>
		<para>
			The following shows the configuration code to define a
			start
			parameter.
			<programlisting language="xml">
<![CDATA[
<hdiv:config>
    <hdiv:startParameters>paramName</hdiv:startParameters>
</hdiv:config>
]]></programlisting>

		</para>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void addExclusions(ExclusionRegistry registry) {

        registry.addParamExclusions("paramName");
    }

}
]]></programlisting>
		</para>

		<para>
			In the examples above, the parameter is not validated in all the
			application. If we want to prevent validation in some pages,
			there is
			another configuration option.
		</para>

		<para>
			<programlisting language="xml">
<![CDATA[
<hdiv:config>
    <hdiv:paramsWithoutValidation>
        <hdiv:mapping url="/section/.*" parameters="paramName"/>
    </hdiv:paramsWithoutValidation>
</hdiv:config>
]]></programlisting>

		</para>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void addExclusions(ExclusionRegistry registry) {

        registry.addParamExclusions("paramName").forUrls("/section/.*");;
    }

}
]]></programlisting>
		</para>

	</section>

	<section xml:id="advancedConfiguration-sessionexpiration">
		<title>Session expiration</title>
		<para>
			When a user makes a request to an expired web session, HDIV
			adds the
			possibility of redirecting the user to the
			<code>loginPage</code>
			instead of
			showing HDIV error pages.
		</para>
		<para>
			If the web session has not expired but the page's state has been
			removed from session, the user is redirected to the
			<code>homePage</code>
			to continue
			browsing without showing the error page.
		</para>
		<para>
			In this case the following can be use:
		</para>
		<programlisting language="xml">
<![CDATA[
<hdiv:sessionExpired loginPage="/login.html" homePage="/"/>
]]></programlisting>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void configure(SecurityConfigBuilder builder) {

        builder
            .sessionExpired()
                .homePage("/").loginPage("/login.html");
    }

}
]]></programlisting>
		</para>

	</section>

	<section xml:id="advancedConfiguration-executionStrategy">
		<title>Execution strategy</title>

		<para>
			HDIV has only one strategy:
		</para>

		<itemizedlist>
			<listitem>
				<para>
					<emphasis role="bold">Memory</emphasis>
					: All the states of the page are
					stored in the user's HttpSession.
					To be able to
					associate user requests
					with the state stored in the
					session, an extra
					parameter
					<code>_HDIV_STATE_</code>
					is added to each request.
					This parameter contains
					the identifier
					which allows access to
					the state from the HttpSession.
					In this
					strategy,
					non editable
					values are hidden
					to guarantee
					confidentiality.
				</para>
			</listitem>

		</itemizedlist>

	</section>

	<section xml:id="advancedConfiguration-confidentiality">
		<title>Confidentiality</title>
		<para>
			HDIV guarantees the confidentiality of data. Usually
			data sent to
			the client has key information for
			attackers,
			such as database registry
			identifiers, column or table
			names, web
			directories, etc.
			All these
			values are hidden by HDIV to
			avoid there
			malicious use.
		</para>
		<para>
			For example, a link of this type,
			<code>http://www.host.com?data1=34</code>
			is replaced
			by
			<code>http://www.host.com?data1=0</code>
			, guaranteeing confidentiality of the
			values representing database
			identifiers.
		</para>
		<para>
			By default
			confidentiality
			is activated (true value) but can be
			switched off in the configuration file:
		</para>
		<programlisting language="xml">
 					<![CDATA[
<hdiv:config confidentiality="false">
</hdiv:config> 
]]></programlisting>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void configure(SecurityConfigBuilder builder) {

        builder.confidentiality(false);
    }

}
]]></programlisting>
		</para>

		<para>
			If you are a Grails user, configuration is implemented within
			plugin
			configuration:
		</para>
		<programlisting language="xml">
 					<![CDATA[
grails {
    plugin {
        hdiv {
            config {
                confidentiality='false'
            }
        }
    }
}
]]></programlisting>

	</section>

	<section xml:id="advancedConfiguration-errorpage">
		<title>Error page</title>
		<para>
			When HDIV detects a malicious request it redirects the user to
			the error page.
		</para>
		<para>
			It is important to note that when the possible attack is
			related
			only to
			editable data, the user is not redirected to the
			error page
			and the
			error is
			displayed within the original form.
		</para>
		<para>
			For HDIV 2.1.7 and later versions, custom error page
			configuration is not
			mandatory. If it is not configured, a default
			error page is shown.
		</para>
		<para>
			In the
			code bellow we see the previous configuration (start pages
			configuration) and the definition of an error page:

			<programlisting language="xml">
 				<![CDATA[
<hdiv:config errorPage="/error.jsp">
    <hdiv:startPages>/home.html</hdiv:startPages>
</hdiv:config>
]]></programlisting>
		</para>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void configure(SecurityConfigBuilder builder) {

        builder.errorPage("/errorPage.html");
    }

}
]]></programlisting>
		</para>

		<para>For Grails users, update the Config.groovy file:</para>
		<programlisting language="xml">
 			<![CDATA[
 grails {
    plugin {
        hdiv {
            config {
                errorPage = '/error.jsp'
            }
        }
    }
}
]]></programlisting>
	</section>

	<section xml:id="advancedConfiguration-cache">
		<title>Cache configuration</title>
		<para>
			When HDIV is executing using the memory strategy, the amount of
			memory stored within
			the HttpSession should be limited.
			By default, the
			cache size is 5 so HDIV stores all the data
			related to
			the last 5 pages
			visited by the user. This means that if
			the user accesses one of the
			previous 5 pages, and uses a link or
			button, it is a
			valid request for
			HDIV.
		</para>
		<para>
			If it is necessary to reduce the memory
			consumption
			to improve the
			app
			scalability, it is good practice to
			reduce the default value.
			But if
			you need to increase back button support to more
			than 5 pages,
			increase the default value.
		</para>
		<para>
			It is possible to overwrite this
			attribute within HDIV config:
		</para>
		<programlisting language="xml">
 					<![CDATA[
<hdiv:config maxPagesPerSession="5">
</hdiv:config> 
]]></programlisting>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void configure(SecurityConfigBuilder builder) {

        builder.maxPagesPerSession(10);
    }

}
]]></programlisting>
		</para>

		<para>
			If you are a Grails user, configuration is implemented within
			plugin configuration:
		</para>
		<programlisting language="xml">
 					<![CDATA[
grails {
    plugin {
        hdiv {
            config {
                maxPagesPerSession='5'
            }
        }
    }
}
]]></programlisting>

	</section>

	<section xml:id="advancedConfiguration-cookies">
		<title>Cookies</title>
		<para>
			By default HDIV validates cookie integrity and confidentiality.
			It is possible to disable these features
			within HDIV configuration.
		</para>
		<para>
			Here we define
			the required code to disable these features:
		</para>
		<programlisting language="xml">
 					<![CDATA[
<hdiv:config avoidCookiesIntegrity="true" avoidCookiesConfidentiality="true">
</hdiv:config> 
]]></programlisting>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void configure(SecurityConfigBuilder builder) {

        builder.cookiesConfidentiality(false).cookiesIntegrity(false);
    }

}
]]></programlisting>
		</para>

		<para>
			For Grails users using HDIV plugin:
		</para>
		<programlisting language="xml">
 					<![CDATA[
grails {
    plugin {
        hdiv {
            config {
                avoidCookiesIntegrity='true'
                avoidCookiesConfidentiality='true'
            }
        }
    }
}
]]></programlisting>

	</section>

	<section xml:id="advancedConfiguration-urlextensions">
		<title>Protected and excluded url extensions</title>
		<para>
			In addition to start pages configuration and the url mapping
			defined by
			HDIV Filter, HDIV allows validation exclusion of some
			extensions.
			Equally, it is possible to include other
			extensions.
		</para>
		<programlisting language="xml">
 					<![CDATA[
<hdiv:config excludedExtensions="css,png" protectedExtensions=".*,aaa">
</hdiv:config> 
]]></programlisting>

		<para>
			For Grails users using HDIV plugin:
		</para>
		<programlisting language="xml">
 					<![CDATA[
grails {
    plugin {
        hdiv {
            config {
                excludedExtensions='css,png'
                protectedExtensions='.*,aaa'
            }
        }
    }
}
]]></programlisting>

	</section>

	<section xml:id="advancedConfiguration-debugmode">
		<title>Debug mode</title>
		<para>
			A debug execution mode is offered in order to apply HDIV in
			production environments without any functional or integration
			problems. In other words HDIV
			processes and validates all the requests
			but does not change the original request execution, only logging the
			possible attack but without stopping it.
		</para>
		<para>
			It is possible to configure this option from HDIV configuration:
		</para>
		<programlisting language="xml">
 					<![CDATA[
<hdiv:config debugMode="true">
</hdiv:config> 
]]></programlisting>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void configure(SecurityConfigBuilder builder) {

        builder.debugMode(true);
    }

}
]]></programlisting>
		</para>

		<para>
			If you are a Grails user, configuration is implemented within
			plugin configuration:
		</para>
		<programlisting language="xml">
 					<![CDATA[
grails {
    plugin {
        hdiv {
            config {
                debugMode='true'
            }
        }
    }
}
]]></programlisting>

	</section>

	<section xml:id="advancedConfiguration-logger">
		<title>Logger</title>
		<para>
			HDIV has a logger that prints all attacks
			detected in a file,
			helping system administrators to check all attacks on
			the application.

			HDIV uses the Commons Logging API, which
			can be configured to work
			with an underlaying log system, for example, Log4j or Java Logging.

			Attacks detected are logged by HDIV in a file.
		</para>

		<programlisting language="">
 			<![CDATA[
# 
# Configuration for a rolling log file ("hdiv.log"). 
# 
log4j.appender.R=org.apache.log4j.DailyRollingFileAppender 
log4j.appender.R.DatePattern='.'yyyy-MM-dd 
# 
# Edit the next line to point to your logs directory. 
# The last part of the name is the log file name. 
# 
log4j.appender.R.File=C://hdiv.log 
log4j.appender.R.layout=org.apache.log4j.PatternLayout 
# 
# Print the date in ISO 8601 format 
# 
log4j.appender.R.layout.ConversionPattern=%d [%t] %-5p - %m%n 
# 
# Application logging options 
# 
log4j.logger.org.hdiv=INFO,R
]]></programlisting>

		<para>
			The configuration avobe logs attack information in the
			<code>c:/hdiv.log</code>
			file, following the format defined in the
			<code>log4j.appender.R.layout.ConversionPattern</code>
			property:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<code>%d</code>
					: Date of the log event
				</para>
			</listitem>
			<listitem>
				<para>
					<code>[%t]</code>
					: Name of the thread that generated the log event
				</para>
			</listitem>
			<listitem>
				<para>
					<code>%-5p</code>
					: Priority of the event that generated the logging
				</para>
			</listitem>
			<listitem>
				<para>
					<code>%m</code>
					: Message associated with the logging event
				</para>
			</listitem>
			<listitem>
				<para>
					<code>%n</code>
					: New line character
				</para>
			</listitem>
		</itemizedlist>
		<para>
			Log4j documentation can be checked for
			different log message
			formats.

			Log messages written by HDIV have
			the following format:
		</para>
		<programlisting language="">
		<![CDATA[
[attack type];[url];[parameterName];[parameterValue];[originalParameterValue];[userLocalIP];[IP];[userId];[validationRuleName]
]]></programlisting>

		<para>
			[attack type]: Type of attack detected by HDIV. Possible
			values
			are:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<code>INVALID_ACTION</code>
					: The action or url received in the request does not match the one
					expected.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>INVALID_PARAMETER_NAME</code>
					: The parameter received in the request does not exist in the
					excepted request.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>NOT_RECEIVED_ALL_REQUIRED_PARAMETERS</code>
					: All the required parameters for the request have not been
					received.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>INVALID_PARAMETER_VALUE</code>
					: Incorrect parameter value.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>NOT_RECEIVED_ALL_PARAMETER_VALUES</code>
					: For a certain parameter, the expected number of values have not
					been received.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>REPEATED_VALUES_FOR_PARAMETER</code>
					: Repeated values have been received for the same parameter.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>INVALID_CONFIDENTIAL_VALUE</code>
					: Incorrect parameter value received if confidentiality is
					activated.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>HDIV_PARAMETER_DOES_NOT_EXIST</code>
					: The HDIV parameter has not been received in the request.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>INVALID_HDIV_PARAMETER_VALUE</code>
					: The HDIV parameter has an incorrect value.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>INVALID_PAGE_ID</code>
					: The HDIV parameter has an incorrect page identifier.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>INVALID_EDITABLE_VALUE</code>
					: Error in the editable parameter validation.
				</para>
			</listitem>
			<listitem>
				<para>
					<code>INVALID_COOKIE</code>
					: The cookie received in the request has an incorrect value.
				</para>
			</listitem>
		</itemizedlist>

		<para>
			[url]: the url or action name of the HTTP request.
		</para>
		<para>
			[parameterName]: the parameter in the HTTP request.
		</para>
		<para>
			[parameterValue]: parameter value submitted by the user.
		</para>
		<para>
			[originalParameterValue]: original parameter value if it has
			been manipulated by the user.
		</para>
		<para>
			[userLocalIP]: IP address if the request has been made through a
			Proxy.
		</para>
		<para>
			[IP]: IP address the request was made from.
		</para>
		<para>
			[userId]: User identifier. Each web application gets
			user ID in a
			different way. This is why the IUserData
			interface
			has been created.
			This interface allows
			implementation of specific system to get user ID.
		</para>
		<para>
			[validationRuleName]: If the log is related to an editable
			value, this field contains the validation rule that has stopped the
			request.
		</para>
		<para>
			Some examples of attacks detected by HDIV:
		</para>
		<programlisting language="">
	<![CDATA[
2013-09-22 10:56:07,214 [http-80-Processor25] INFO – INVALID_ACTION;action1;param1;value1;188.15.1.25;201.166.24.12;45652146M 
2013-09-22 10:58:15,500 [http-80-Processor25] INFO – INVALID_CONFIDENTIAL_VALUE;action3;param2;value3;188.15.1.25;201.166.24.12;15235687G 
2013-09-22 11:01:24,124 [http-80-Processor25] INFO – NOT_RECEIVED_ALL_REQUIRED_PARAMETERS;action5;param1;value1;188.15.1.25;201.166.24.12;15235687G 
2013-09-22 11:15:00,411 [http-80-Processor25] INFO – INVALID_PARAMETER_NAME;action1;param5;value2;188.15.1.25;201.166.24.12;45652146M
]]></programlisting>
		<para>
			Finally, HDIV includes user ID within the log files.
			To modify the
			default setting it is possible to create a
			class that implements the
			<code>IUserData</code>
			interface.

			It is possible to enable this in the HDIV config file
			defining the name of the bean that
			implements the
			<code>IUserData</code>
			interface:
		</para>
		<programlisting language="xml">
 					<![CDATA[
<hdiv:config userData="testUserData">
</hdiv:config> 
]]></programlisting>
		<para>
			If you are a Grails user, it is enabled within
			plugin
			configuration:
		</para>
		<programlisting language="xml">
 					<![CDATA[
grails {
    plugin {
        hdiv {
            config {
                userData='testUserData'
            }
        }
    }
}
]]></programlisting>

	</section>

	<section xml:id="advancedConfiguration-avoidValidationInUrlsWithoutParams">
		<title>Avoid validation in urls without parameters</title>
		<para>
			HDIV provides a configuration option to disable protection of
			those urls without parameters, delegating this task to
			Spring Security
			or another access protection system.
		</para>
		<para>
			It is possible to enable this option in the HDIV config file:
		</para>
		<programlisting language="xml">
 					<![CDATA[
<hdiv:config avoidValidationInUrlsWithoutParams="true">
</hdiv:config> 
]]></programlisting>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void configure(SecurityConfigBuilder builder) {

        builder.validateUrlsWithoutParams(false);
    }

}
]]></programlisting>
		</para>

		<para>
			If you are a Grails user, it is enabled within
			plugin
			configuration:
		</para>
		<programlisting language="xml">
 					<![CDATA[
grails {
    plugin {
        hdiv {
            config {
                avoidValidationInUrlsWithoutParams='true'
            }
        }
    }
}
]]></programlisting>

	</section>

	<section xml:id="advancedConfiguration-longLivingPages">
		<title>Long-living pages</title>
		<para>
			Pages whose link and forms never expire. When the page is
			rendered, the states created for links and forms are marked never to
			expire.
		</para>
		<para>
			There is a
			<code>scope</code>
			attribute to configure if the states are
			stored in user session (
			<code>user-session</code>
			scope) or servlet context
			(
			<code>app</code>
			scope). In the second case, the states are shared by all
			users of the
			application.
		</para>
		<para>
			It is possible to configure this option in the HDIV config file:
		</para>
		<programlisting language="xml">
 					<![CDATA[
<hdiv:config>
    <hdiv:longLivingPages>/home.html</hdiv:longLivingPages>
</hdiv:config> 
]]></programlisting>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void addLongLivingPages(LongLivingPagesRegistry registry) {
    
        registry.addLongLivingPages("/home.html");
    }

}
]]></programlisting>
		</para>

		<para>
			If you are a Grails user, within
			plugin configuration:
		</para>
		<programlisting language="xml">
 					<![CDATA[
grails {
    plugin {
        hdiv {
            config {
                avoidValidationInUrlsWithoutParams='true'
            }
        }
    }
}
]]></programlisting>

	</section>

	<section xml:id="advancedConfiguration-randomName">
		<title>Random name HDIV parameter</title>
		<para>
			_HDIV_STATE_ is the default name of the HDIV parameter.
		</para>
		<para>
			There is a configuration option to enable the subtitution of the
			constant parameter name with a random name. In this case a per user
			random string is generated and used as the parameter name.
		</para>
		<para>
			It is possible to configure this option in the HDIV config file:
		</para>
		<programlisting language="xml">
 					<![CDATA[
<hdiv:config randomName="true">
</hdiv:config> 
]]></programlisting>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void configure(SecurityConfigBuilder builder) {

        builder.randomName(true);
    }

}
]]></programlisting>
		</para>

		<para>
			If you are a Grails user, within
			plugin configuration:
		</para>
		<programlisting language="xml">
 					<![CDATA[
grails {
    plugin {
        hdiv {
            config {
                randomName='true'
            }
        }
    }
}
]]></programlisting>

	</section>

	<section xml:id="advancedConfiguration-reuseExistingPageInAjaxRequest">
		<title>Reuse existing page in Ajax request</title>
		<para>
			If this option is enabled, ajax requests do not create a new
			page
			in session (in Memory strategy). New form and link states are
			stored
			in the current page.
		</para>
		<para>
			This option is recommended when Ajax is used to show dialog or
			tab content and to prevent HDIV state expiration.
		</para>
		<para>
			To detect if a request is an Ajax request,
			<code>X-Requested-With</code>
			header is used. It is submitted by all major JavaScript libraries.
		</para>
		<para>
			If you want to avoid this feature in a especific
			request, you can send
			<code>X-HDIV-EXCLUDE-PAGE-REUSE</code>
			header in the
			Ajax request, and it will disable page reusing for that
			request.
		</para>
		<para>
			It is possible to configure this option in HDIV config file:
		</para>
		<programlisting language="xml">
 					<![CDATA[
<hdiv:config reuseExistingPageInAjaxRequest="true">
</hdiv:config> 
]]></programlisting>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void configure(SecurityConfigBuilder builder) {

        builder.reuseExistingPageInAjaxRequest(true);
    }

}
]]></programlisting>
		</para>

		<para>
			If you are a Grails user, within
			plugin configuration:
		</para>
		<programlisting language="xml">
 					<![CDATA[
grails {
    plugin {
        hdiv {
            config {
                reuseExistingPageInAjaxRequest='true'
            }
        }
    }
}
]]></programlisting>

	</section>

	<section xml:id="advancedConfiguration-showErrorPageOnEditableValidation">
		<title>Show error page on editable validation error</title>
		<para>
			By default, editable validation errors are shown as
			general
			validation errors.
		</para>
		<para>
			If this option is enabled,
			the user is redirected to the error
			page and the request is not executed.
		</para>
		<para>
			It is possible to configure this option in HDIV config file:
		</para>
		<programlisting language="xml">
 					<![CDATA[
<hdiv:config showErrorPageOnEditableValidation="true">
</hdiv:config> 
]]></programlisting>

		<para>
			In JavaConfig mode:
			<programlisting language="java">
		
<![CDATA[@Configuration
@EnableHdivWebSecurity
public class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {

    @Override
    public void configure(SecurityConfigBuilder builder) {

        builder.showErrorPageOnEditableValidation(true);
    }

}
]]></programlisting>
		</para>

		<para>
			If you are a Grails user, within
			plugin configuration:
		</para>
		<programlisting language="xml">
 					<![CDATA[
grails {
    plugin {
        hdiv {
            config {
                showErrorPageOnEditableValidation='true'
            }
        }
    }
}
]]></programlisting>

	</section>

</chapter>
