protocol  SystemPropertiesProtocol {
 @namespace("java.io")
 record IoConfig {

  /**org/spf4j/base/Runtime.<clinit>:81*/
  union {null, string} tmpdir = null;
 }

 @namespace("java")
 record JavaConfig {

 /** Category: io */
  java.io.IoConfig io;

  /**org/spf4j/base/Runtime.<clinit>:82*/
  union {null, string} version = null;

  /**org/spf4j/base/Runtime.<clinit>:86*/
  union {null, string} home = null;
 }

 @namespace("os")
 record OsConfig {

  /**org/spf4j/base/Runtime.<clinit>:136*/
  union {null, string} name = null;
 }

 @namespace("line")
 record LineConfig {

  /**org/spf4j/base/Strings.<clinit>:74*/
  string separator = "\n";
 }

 @namespace("spf4j.lifoTp")
 record LifoTpConfig {

  /**org/spf4j/concurrent/LifoThreadPoolExecutorSQP.<clinit>:97*/
  int llQueueSizeThreshold = 64000;

  /**org/spf4j/concurrent/LifoThreadPoolExecutorSQP.<clinit>:95*/
  long coreMaxWaitNanos = 1000000000;

  /**org/spf4j/concurrent/SpinLimiter.<clinit>:42*/
  union {null, int} maxSpinning = null;
 }

 @namespace("spf4j.failsafe")
 record FailsafeConfig {

  /**org/spf4j/failsafe/RetryPolicy$Builder.<clinit>:138*/
  long defaultInitialRetryDelayNanos = 10000;

  /**org/spf4j/failsafe/RetryPolicy$Builder.<clinit>:144*/
  int defaultMaxNrRetries = 1000;

  /**org/spf4j/failsafe/RetryPolicy$Builder.<clinit>:135*/
  long defaultMaxRetryDelayMillis = 5000;

  /**org/spf4j/failsafe/RetryPolicy$Builder.<clinit>:141*/
  int defaultInitialNoDelayRetries = 3;

  /**org/spf4j/failsafe/RetryPolicy$Builder.<clinit>:132*/
  int defaultMaxExceptionChain = 10;

  /**org/spf4j/failsafe/RetryPolicy.<clinit>:61*/
  union {null, string} defaultRetryPolicySupplier = null;
 }

 @namespace("spf4j.os")
 record OsConfig {

  /**org/spf4j/os/OperatingSystem.<clinit>:79*/
  long abortTimeoutMillis = 5000;
 }

 @namespace("spf4j.timing")
 record TimingConfig {

  /**org/spf4j/base/Timing.<clinit>:49*/
  long updateIntervalMinutes = 60;
 }

 @namespace("spf4j.jdbc.heartBeats.sql")
 record SqlConfig {

  /**org/spf4j/concurrent/jdbc/HeartBeatTableDesc.<clinit>:63*/
  string intervalMillisColumn = "INTERVAL_MILLIS";

  /**org/spf4j/concurrent/jdbc/HeartBeatTableDesc.<clinit>:64*/
  string lastHeartBeatMillisColumn = "LAST_HEARTBEAT_INSTANT_MILLIS";

  /**org/spf4j/concurrent/jdbc/HeartBeatTableDesc.<clinit>:65*/
  string dbType = "H2";

  /**org/spf4j/concurrent/jdbc/HeartBeatTableDesc.<clinit>:62*/
  string ownerColumn = "OWNER";

  /**org/spf4j/concurrent/jdbc/HeartBeatTableDesc.<clinit>:61*/
  string tableName = "HEARTBEATS";
 }

 @namespace("spf4j.jdbc.heartBeats")
 record HeartBeatsConfig {

  /**org/spf4j/concurrent/jdbc/JdbcHeartBeat.<clinit>:94*/
  int defaultIntervalMillis = 10000;

 /** Category: sql */
  spf4j.jdbc.heartBeats.sql.SqlConfig sql;
 }

 @namespace("spf4j.jdbc.semaphore.sql")
 record SqlConfig {

  /**org/spf4j/concurrent/jdbc/SemaphoreTablesDesc.<clinit>:51*/
  string semaphoreNameColumn = "SEMAPHORE_NAME";

  /**org/spf4j/concurrent/jdbc/SemaphoreTablesDesc.<clinit>:52*/
  string availablePermitsColumn = "AVAILABLE_PERMITS";

  /**org/spf4j/concurrent/jdbc/SemaphoreTablesDesc.<clinit>:55*/
  string lastUpdatedAtColumn = "LAST_UPDATED_AT";

  /**org/spf4j/concurrent/jdbc/SemaphoreTablesDesc.<clinit>:53*/
  string totalPermitsColumn = "TOTAL_PERMITS";

  /**org/spf4j/concurrent/jdbc/SemaphoreTablesDesc.<clinit>:56*/
  string permitsByOwnerColumn = "PERMITS_BY_OWNER";

  /**org/spf4j/concurrent/jdbc/SemaphoreTablesDesc.<clinit>:54*/
  string lastUpdatedByColumn = "LAST_UPDATED_BY";

  /**org/spf4j/concurrent/jdbc/SemaphoreTablesDesc.<clinit>:58*/
  string permitsColumn = "PERMITS";

  /**org/spf4j/concurrent/jdbc/SemaphoreTablesDesc.<clinit>:50*/
  string tableName = "SEMAPHORES";
 }

 @namespace("spf4j.jdbc.semaphore")
 record SemaphoreConfig {

  /**org/spf4j/concurrent/jdbc/JdbcSemaphore.<clinit>:92*/
  int cleanupTimeoutSeconds = 60;

  /**org/spf4j/concurrent/jdbc/JdbcSemaphore.<init>:170*/
  int jdbcTimeoutSeconds = 10;

  /**org/spf4j/concurrent/jdbc/JdbcSemaphore.<init>:177*/
  int defaultMaxPollIntervalMillis = 1000;

 /** Category: sql */
  spf4j.jdbc.semaphore.sql.SqlConfig sql;
 }

 @namespace("spf4j.jdbc")
 record JdbcConfig {

 /** Category: heartBeats */
  spf4j.jdbc.heartBeats.HeartBeatsConfig heartBeats;

 /** Category: semaphore */
  spf4j.jdbc.semaphore.SemaphoreConfig semaphore;

  /**org/spf4j/jdbc/JdbcTemplate.<clinit>:65*/
  int maxdbcTimeoutSeconds = 86400;

  /**org/spf4j/jdbc/DbType.<clinit>:44*/
  string defaultDbType = "H2";
 }

 @namespace("spf4j.encoding")
 record EncodingConfig {

  /**org/spf4j/base/Strings.<clinit>:100*/
  boolean lenient = false;
 }

 @namespace("spf4j.tsdb2")
 record Tsdb2Config {

  /**org/spf4j/tsdb2/TSDBReader.<clinit>:73*/
  boolean lenientRead = false;
 }

 @namespace("spf4j.jul2slf4jBridge")
 record Jul2slf4jBridgeConfig {

  /**org/spf4j/log/SLF4JBridgeHandler.<clinit>:71*/
  boolean alwaysTryInferSource = false;
 }

 @namespace("spf4j.throwables")
 record ThrowablesConfig {

  /**org/spf4j/base/Throwables.<clinit>:78*/
  int defaultMaxSuppressChain = 100;

  /**org/spf4j/base/Throwables.<clinit>:113*/
  string defaultStackTraceAbbreviation = "true";

  /**org/spf4j/base/Throwables.<clinit>:109*/
  string defaultStackTracePackageDetail = "SHORT";
 }

 @namespace("spf4j.threadUsageSampler")
 record ThreadUsageSamplerConfig {

  /**org/spf4j/perf/cpu/ThreadUsageSampler$1.doRun:73*/
  string peakThreadsOnShutdown = "out";
 }

 @namespace("spf4j.execContext")
 record ExecContextConfig {

  /**org/spf4j/base/ExecutionContexts.<clinit>:55*/
  union {null, long} defaultTimeoutNanos = null;
 }

 @namespace("spf4j.executors.defaultExecutor")
 record DefaultExecutorConfig {

  /**org/spf4j/concurrent/DefaultExecutor.<clinit>:55*/
  int maxIdleMillis = 60000;

  /**org/spf4j/concurrent/DefaultExecutor.<clinit>:58*/
  string implementation = "spf4j";

  /**org/spf4j/concurrent/DefaultExecutor.<clinit>:54*/
  int coreThreads = 0;

  /**org/spf4j/concurrent/DefaultExecutor.<clinit>:56*/
  boolean daemon = false;
 }

 @namespace("spf4j.executors.defaultScheduler")
 record DefaultSchedulerConfig {

  /**org/spf4j/concurrent/DefaultScheduler.<clinit>:55*/
  int coreThreads = 2;

  /**org/spf4j/concurrent/DefaultScheduler.<clinit>:58*/
  int priority = 5;

  /**org/spf4j/concurrent/DefaultScheduler.<clinit>:57*/
  boolean daemon = false;
 }

 @namespace("spf4j.executors")
 record ExecutorsConfig {

 /** Category: defaultExecutor */
  spf4j.executors.defaultExecutor.DefaultExecutorConfig defaultExecutor;

 /** Category: defaultScheduler */
  spf4j.executors.defaultScheduler.DefaultSchedulerConfig defaultScheduler;
 }

 @namespace("spf4j.perf.ms")
 record MsConfig {

  /**org/spf4j/perf/impl/RecorderFactory.buildStoreFromConfig:104*/
  union {null, string} defaultTsdbFolderPath = null;

  /**org/spf4j/perf/impl/RecorderFactory.buildStoreFromConfig:107*/
  union {null, string} defaultTsdbFileNamePrefix = null;

  /**org/spf4j/stackmonitor/Sampler.<clinit>:77*/
  int stopFlagReadMIllis = 2000;

  /**org/spf4j/stackmonitor/Sampler.<clinit>:79*/
  union {null, string} defaultSsdumpFolder = null;

  /**org/spf4j/stackmonitor/Sampler.<clinit>:83*/
  union {null, string} defaultSsdumpFilePrefix = null;

  /**org/spf4j/perf/impl/RecorderFactory.<clinit>:72*/
  union {null, string} config = null;

  /**org/spf4j/perf/impl/RecorderFactory.<clinit>:78*/
  int flushIntervalMillis = 60000;
 }

 @namespace("spf4j.perf")
 record PerfConfig {

 /** Category: ms */
  spf4j.perf.ms.MsConfig ms;
 }

 @namespace("spf4j.sntpClient")
 record SntpClientConfig {

  /**org/spf4j/net/SntpClient.<clinit>:71*/
  int defaultSocketTimeoutMillis = 5000;
 }

 @namespace("spf4j")
 record Spf4jConfig {

  /**org/spf4j/base/ExecutionContexts.initFactory:76*/
  union {null, string} execContentFactoryWrapperClass = null;

 /** Category: lifoTp */
  spf4j.lifoTp.LifoTpConfig lifoTp;

 /** Category: failsafe */
  spf4j.failsafe.FailsafeConfig failsafe;

 /** Category: os */
  spf4j.os.OsConfig os;

 /** Category: timing */
  spf4j.timing.TimingConfig timing;

  /**org/spf4j/base/Runtime.<clinit>:80*/
  int waitForShutdownMillis = 30000;

 /** Category: jdbc */
  spf4j.jdbc.JdbcConfig jdbc;

  /**org/spf4j/io/appenders/SpecificRecordAppender.<clinit>:62*/
  boolean strictAvroObjectAppenders = false;

  /**org/spf4j/base/TimeSource.<clinit>:31*/
  union {null, string} timeSource = null;

 /** Category: encoding */
  spf4j.encoding.EncodingConfig encoding;

 /** Category: tsdb2 */
  spf4j.tsdb2.Tsdb2Config tsdb2;

 /** Category: jul2slf4jBridge */
  spf4j.jul2slf4jBridge.Jul2slf4jBridgeConfig jul2slf4jBridge;

 /** Category: throwables */
  spf4j.throwables.ThrowablesConfig throwables;

  /**org/spf4j/base/Runtime.<clinit>:140*/
  boolean dumpNonDaemonThreadInfoOnShutdown = false;

  /**org/spf4j/base/ExecutionContexts.initFactory:65*/
  union {null, string} execContentFactoryClass = null;

 /** Category: threadUsageSampler */
  spf4j.threadUsageSampler.ThreadUsageSamplerConfig threadUsageSampler;

 /** Category: execContext */
  spf4j.execContext.ExecContextConfig execContext;

 /** Category: executors */
  spf4j.executors.ExecutorsConfig executors;

  /**org/spf4j/base/Runtime.<clinit>:127*/
  boolean useUIDForProcessId = false;

 /** Category: perf */
  spf4j.perf.PerfConfig perf;

 /** Category: sntpClient */
  spf4j.sntpClient.SntpClientConfig sntpClient;
 }

 @namespace("sun.cpu")
 record CpuConfig {

  /**org/spf4j/base/Runtime.<clinit>:78*/
  union {null, string} endian = null;
 }

 @namespace("sun.arch.data")
 record DataConfig {

  /**org/spf4j/unix/JVMArguments.ofSolaris:302*/
  union {null, string} model = null;
 }

 @namespace("sun.arch")
 record ArchConfig {

 /** Category: data */
  sun.arch.data.DataConfig data;
 }

 @namespace("sun")
 record SunConfig {

 /** Category: cpu */
  sun.cpu.CpuConfig cpu;

 /** Category: arch */
  sun.arch.ArchConfig arch;
 }

 @namespace("user")
 record UserConfig {

  /**org/spf4j/base/Runtime.<clinit>:83*/
  union {null, string} name = null;

  /**org/spf4j/base/Runtime.<clinit>:84*/
  union {null, string} dir = null;

  /**org/spf4j/base/Runtime.<clinit>:85*/
  union {null, string} home = null;
 }

 record SystemProperties {

 /** Category: java */
  java.JavaConfig java;

 /** Category: os */
  os.OsConfig os;

 /** Category: line */
  line.LineConfig line;

 /** Category: spf4j */
  spf4j.Spf4jConfig spf4j;

 /** Category: sun */
  sun.SunConfig sun;

 /** Category: user */
  user.UserConfig user;
 }

}
