/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.spf4j.base.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** a throwable */
@org.apache.avro.specific.AvroGenerated
public class JThrowable extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7363934803121880754L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JThrowable\",\"namespace\":\"org.spf4j.base.avro\",\"doc\":\"a throwable\",\"fields\":[{\"name\":\"className\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"exception class name\"},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"exception message\",\"default\":null},{\"name\":\"stackTrace\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"JStackTraceElement\",\"doc\":\"record representing the samples where a particular method was executed\",\"fields\":[{\"name\":\"className\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"java class name\"},{\"name\":\"methodName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"java method name\"},{\"name\":\"location\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"JFileLocation\",\"doc\":\"a location in a file\",\"fields\":[{\"name\":\"fileName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"file name\"},{\"name\":\"lineNumber\",\"type\":\"int\",\"doc\":\"line number\"}]}],\"doc\":\"location\"},{\"name\":\"packageInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"JPackageInfo\",\"doc\":\"record representing a jar archive info\",\"fields\":[{\"name\":\"url\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the package url\",\"default\":null},{\"name\":\"version\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"version from manifest\",\"default\":null}]}],\"doc\":\"package info\"}]}},\"doc\":\"the stack trace\",\"default\":[]},{\"name\":\"cause\",\"type\":[\"null\",\"JThrowable\"],\"doc\":\"exception cause\",\"default\":[]},{\"name\":\"suppressed\",\"type\":{\"type\":\"array\",\"items\":\"JThrowable\"},\"doc\":\"suppressed exceptions\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** exception class name */
  @Deprecated public java.lang.String className;
  /** exception message */
  @Deprecated public java.lang.String message;
  /** the stack trace */
  @Deprecated public java.util.List<org.spf4j.base.avro.JStackTraceElement> stackTrace;
  /** exception cause */
  @Deprecated public org.spf4j.base.avro.JThrowable cause;
  /** suppressed exceptions */
  @Deprecated public java.util.List<org.spf4j.base.avro.JThrowable> suppressed;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public JThrowable() {}

  /**
   * All-args constructor.
   * @param className exception class name
   * @param message exception message
   * @param stackTrace the stack trace
   * @param cause exception cause
   * @param suppressed suppressed exceptions
   */
  public JThrowable(java.lang.String className, java.lang.String message, java.util.List<org.spf4j.base.avro.JStackTraceElement> stackTrace, org.spf4j.base.avro.JThrowable cause, java.util.List<org.spf4j.base.avro.JThrowable> suppressed) {
    this.className = className;
    this.message = message;
    this.stackTrace = stackTrace;
    this.cause = cause;
    this.suppressed = suppressed;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return className;
    case 1: return message;
    case 2: return stackTrace;
    case 3: return cause;
    case 4: return suppressed;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: className = (java.lang.String)value$; break;
    case 1: message = (java.lang.String)value$; break;
    case 2: stackTrace = (java.util.List<org.spf4j.base.avro.JStackTraceElement>)value$; break;
    case 3: cause = (org.spf4j.base.avro.JThrowable)value$; break;
    case 4: suppressed = (java.util.List<org.spf4j.base.avro.JThrowable>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'className' field.
   * @return exception class name
   */
  public java.lang.String getClassName() {
    return className;
  }

  /**
   * Sets the value of the 'className' field.
   * exception class name
   * @param value the value to set.
   */
  public void setClassName(java.lang.String value) {
    this.className = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return exception message
   */
  public java.lang.String getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   * exception message
   * @param value the value to set.
   */
  public void setMessage(java.lang.String value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'stackTrace' field.
   * @return the stack trace
   */
  public java.util.List<org.spf4j.base.avro.JStackTraceElement> getStackTrace() {
    return stackTrace;
  }

  /**
   * Sets the value of the 'stackTrace' field.
   * the stack trace
   * @param value the value to set.
   */
  public void setStackTrace(java.util.List<org.spf4j.base.avro.JStackTraceElement> value) {
    this.stackTrace = value;
  }

  /**
   * Gets the value of the 'cause' field.
   * @return exception cause
   */
  public org.spf4j.base.avro.JThrowable getCause() {
    return cause;
  }

  /**
   * Sets the value of the 'cause' field.
   * exception cause
   * @param value the value to set.
   */
  public void setCause(org.spf4j.base.avro.JThrowable value) {
    this.cause = value;
  }

  /**
   * Gets the value of the 'suppressed' field.
   * @return suppressed exceptions
   */
  public java.util.List<org.spf4j.base.avro.JThrowable> getSuppressed() {
    return suppressed;
  }

  /**
   * Sets the value of the 'suppressed' field.
   * suppressed exceptions
   * @param value the value to set.
   */
  public void setSuppressed(java.util.List<org.spf4j.base.avro.JThrowable> value) {
    this.suppressed = value;
  }

  /**
   * Creates a new JThrowable RecordBuilder.
   * @return A new JThrowable RecordBuilder
   */
  public static org.spf4j.base.avro.JThrowable.Builder newBuilder() {
    return new org.spf4j.base.avro.JThrowable.Builder();
  }

  /**
   * Creates a new JThrowable RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new JThrowable RecordBuilder
   */
  public static org.spf4j.base.avro.JThrowable.Builder newBuilder(org.spf4j.base.avro.JThrowable.Builder other) {
    return new org.spf4j.base.avro.JThrowable.Builder(other);
  }

  /**
   * Creates a new JThrowable RecordBuilder by copying an existing JThrowable instance.
   * @param other The existing instance to copy.
   * @return A new JThrowable RecordBuilder
   */
  public static org.spf4j.base.avro.JThrowable.Builder newBuilder(org.spf4j.base.avro.JThrowable other) {
    return new org.spf4j.base.avro.JThrowable.Builder(other);
  }

  /**
   * RecordBuilder for JThrowable instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JThrowable>
    implements org.apache.avro.data.RecordBuilder<JThrowable> {

    /** exception class name */
    private java.lang.String className;
    /** exception message */
    private java.lang.String message;
    /** the stack trace */
    private java.util.List<org.spf4j.base.avro.JStackTraceElement> stackTrace;
    /** exception cause */
    private org.spf4j.base.avro.JThrowable cause;
    private org.spf4j.base.avro.JThrowable.Builder causeBuilder;
    /** suppressed exceptions */
    private java.util.List<org.spf4j.base.avro.JThrowable> suppressed;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.spf4j.base.avro.JThrowable.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.className)) {
        this.className = data().deepCopy(fields()[0].schema(), other.className);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stackTrace)) {
        this.stackTrace = data().deepCopy(fields()[2].schema(), other.stackTrace);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cause)) {
        this.cause = data().deepCopy(fields()[3].schema(), other.cause);
        fieldSetFlags()[3] = true;
      }
      if (other.hasCauseBuilder()) {
        this.causeBuilder = org.spf4j.base.avro.JThrowable.newBuilder(other.getCauseBuilder());
      }
      if (isValidValue(fields()[4], other.suppressed)) {
        this.suppressed = data().deepCopy(fields()[4].schema(), other.suppressed);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing JThrowable instance
     * @param other The existing instance to copy.
     */
    private Builder(org.spf4j.base.avro.JThrowable other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.className)) {
        this.className = data().deepCopy(fields()[0].schema(), other.className);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stackTrace)) {
        this.stackTrace = data().deepCopy(fields()[2].schema(), other.stackTrace);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cause)) {
        this.cause = data().deepCopy(fields()[3].schema(), other.cause);
        fieldSetFlags()[3] = true;
      }
      this.causeBuilder = null;
      if (isValidValue(fields()[4], other.suppressed)) {
        this.suppressed = data().deepCopy(fields()[4].schema(), other.suppressed);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'className' field.
      * exception class name
      * @return The value.
      */
    public java.lang.String getClassName() {
      return className;
    }

    /**
      * Sets the value of the 'className' field.
      * exception class name
      * @param value The value of 'className'.
      * @return This builder.
      */
    public org.spf4j.base.avro.JThrowable.Builder setClassName(java.lang.String value) {
      validate(fields()[0], value);
      this.className = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'className' field has been set.
      * exception class name
      * @return True if the 'className' field has been set, false otherwise.
      */
    public boolean hasClassName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'className' field.
      * exception class name
      * @return This builder.
      */
    public org.spf4j.base.avro.JThrowable.Builder clearClassName() {
      className = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * exception message
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * exception message
      * @param value The value of 'message'.
      * @return This builder.
      */
    public org.spf4j.base.avro.JThrowable.Builder setMessage(java.lang.String value) {
      validate(fields()[1], value);
      this.message = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * exception message
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'message' field.
      * exception message
      * @return This builder.
      */
    public org.spf4j.base.avro.JThrowable.Builder clearMessage() {
      message = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'stackTrace' field.
      * the stack trace
      * @return The value.
      */
    public java.util.List<org.spf4j.base.avro.JStackTraceElement> getStackTrace() {
      return stackTrace;
    }

    /**
      * Sets the value of the 'stackTrace' field.
      * the stack trace
      * @param value The value of 'stackTrace'.
      * @return This builder.
      */
    public org.spf4j.base.avro.JThrowable.Builder setStackTrace(java.util.List<org.spf4j.base.avro.JStackTraceElement> value) {
      validate(fields()[2], value);
      this.stackTrace = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'stackTrace' field has been set.
      * the stack trace
      * @return True if the 'stackTrace' field has been set, false otherwise.
      */
    public boolean hasStackTrace() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'stackTrace' field.
      * the stack trace
      * @return This builder.
      */
    public org.spf4j.base.avro.JThrowable.Builder clearStackTrace() {
      stackTrace = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'cause' field.
      * exception cause
      * @return The value.
      */
    public org.spf4j.base.avro.JThrowable getCause() {
      return cause;
    }

    /**
      * Sets the value of the 'cause' field.
      * exception cause
      * @param value The value of 'cause'.
      * @return This builder.
      */
    public org.spf4j.base.avro.JThrowable.Builder setCause(org.spf4j.base.avro.JThrowable value) {
      validate(fields()[3], value);
      this.causeBuilder = null;
      this.cause = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'cause' field has been set.
      * exception cause
      * @return True if the 'cause' field has been set, false otherwise.
      */
    public boolean hasCause() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'cause' field and creates one if it doesn't exist yet.
     * exception cause
     * @return This builder.
     */
    public org.spf4j.base.avro.JThrowable.Builder getCauseBuilder() {
      if (causeBuilder == null) {
        if (hasCause()) {
          setCauseBuilder(org.spf4j.base.avro.JThrowable.newBuilder(cause));
        } else {
          setCauseBuilder(org.spf4j.base.avro.JThrowable.newBuilder());
        }
      }
      return causeBuilder;
    }

    /**
     * Sets the Builder instance for the 'cause' field
     * exception cause
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.spf4j.base.avro.JThrowable.Builder setCauseBuilder(org.spf4j.base.avro.JThrowable.Builder value) {
      clearCause();
      causeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'cause' field has an active Builder instance
     * exception cause
     * @return True if the 'cause' field has an active Builder instance
     */
    public boolean hasCauseBuilder() {
      return causeBuilder != null;
    }

    /**
      * Clears the value of the 'cause' field.
      * exception cause
      * @return This builder.
      */
    public org.spf4j.base.avro.JThrowable.Builder clearCause() {
      cause = null;
      causeBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'suppressed' field.
      * suppressed exceptions
      * @return The value.
      */
    public java.util.List<org.spf4j.base.avro.JThrowable> getSuppressed() {
      return suppressed;
    }

    /**
      * Sets the value of the 'suppressed' field.
      * suppressed exceptions
      * @param value The value of 'suppressed'.
      * @return This builder.
      */
    public org.spf4j.base.avro.JThrowable.Builder setSuppressed(java.util.List<org.spf4j.base.avro.JThrowable> value) {
      validate(fields()[4], value);
      this.suppressed = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'suppressed' field has been set.
      * suppressed exceptions
      * @return True if the 'suppressed' field has been set, false otherwise.
      */
    public boolean hasSuppressed() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'suppressed' field.
      * suppressed exceptions
      * @return This builder.
      */
    public org.spf4j.base.avro.JThrowable.Builder clearSuppressed() {
      suppressed = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public JThrowable build() {
      try {
        JThrowable record = new JThrowable();
        record.className = fieldSetFlags()[0] ? this.className : (java.lang.String) defaultValue(fields()[0]);
        record.message = fieldSetFlags()[1] ? this.message : (java.lang.String) defaultValue(fields()[1]);
        record.stackTrace = fieldSetFlags()[2] ? this.stackTrace : (java.util.List<org.spf4j.base.avro.JStackTraceElement>) defaultValue(fields()[2]);
        if (causeBuilder != null) {
          record.cause = this.causeBuilder.build();
        } else {
          record.cause = fieldSetFlags()[3] ? this.cause : (org.spf4j.base.avro.JThrowable) defaultValue(fields()[3]);
        }
        record.suppressed = fieldSetFlags()[4] ? this.suppressed : (java.util.List<org.spf4j.base.avro.JThrowable>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
