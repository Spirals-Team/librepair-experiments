/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.spf4j.base.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** a location in a file */
@org.apache.avro.specific.AvroGenerated
public class JFileLocation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2714454546738818126L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JFileLocation\",\"namespace\":\"org.spf4j.base.avro\",\"doc\":\"a location in a file\",\"fields\":[{\"name\":\"fileName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"file name\"},{\"name\":\"lineNumber\",\"type\":\"int\",\"doc\":\"line number\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** file name */
  @Deprecated public java.lang.String fileName;
  /** line number */
  @Deprecated public int lineNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public JFileLocation() {}

  /**
   * All-args constructor.
   * @param fileName file name
   * @param lineNumber line number
   */
  public JFileLocation(java.lang.String fileName, java.lang.Integer lineNumber) {
    this.fileName = fileName;
    this.lineNumber = lineNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fileName;
    case 1: return lineNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fileName = (java.lang.String)value$; break;
    case 1: lineNumber = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fileName' field.
   * @return file name
   */
  public java.lang.String getFileName() {
    return fileName;
  }

  /**
   * Sets the value of the 'fileName' field.
   * file name
   * @param value the value to set.
   */
  public void setFileName(java.lang.String value) {
    this.fileName = value;
  }

  /**
   * Gets the value of the 'lineNumber' field.
   * @return line number
   */
  public java.lang.Integer getLineNumber() {
    return lineNumber;
  }

  /**
   * Sets the value of the 'lineNumber' field.
   * line number
   * @param value the value to set.
   */
  public void setLineNumber(java.lang.Integer value) {
    this.lineNumber = value;
  }

  /**
   * Creates a new JFileLocation RecordBuilder.
   * @return A new JFileLocation RecordBuilder
   */
  public static org.spf4j.base.avro.JFileLocation.Builder newBuilder() {
    return new org.spf4j.base.avro.JFileLocation.Builder();
  }

  /**
   * Creates a new JFileLocation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new JFileLocation RecordBuilder
   */
  public static org.spf4j.base.avro.JFileLocation.Builder newBuilder(org.spf4j.base.avro.JFileLocation.Builder other) {
    return new org.spf4j.base.avro.JFileLocation.Builder(other);
  }

  /**
   * Creates a new JFileLocation RecordBuilder by copying an existing JFileLocation instance.
   * @param other The existing instance to copy.
   * @return A new JFileLocation RecordBuilder
   */
  public static org.spf4j.base.avro.JFileLocation.Builder newBuilder(org.spf4j.base.avro.JFileLocation other) {
    return new org.spf4j.base.avro.JFileLocation.Builder(other);
  }

  /**
   * RecordBuilder for JFileLocation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JFileLocation>
    implements org.apache.avro.data.RecordBuilder<JFileLocation> {

    /** file name */
    private java.lang.String fileName;
    /** line number */
    private int lineNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.spf4j.base.avro.JFileLocation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fileName)) {
        this.fileName = data().deepCopy(fields()[0].schema(), other.fileName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[1].schema(), other.lineNumber);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing JFileLocation instance
     * @param other The existing instance to copy.
     */
    private Builder(org.spf4j.base.avro.JFileLocation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.fileName)) {
        this.fileName = data().deepCopy(fields()[0].schema(), other.fileName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[1].schema(), other.lineNumber);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'fileName' field.
      * file name
      * @return The value.
      */
    public java.lang.String getFileName() {
      return fileName;
    }

    /**
      * Sets the value of the 'fileName' field.
      * file name
      * @param value The value of 'fileName'.
      * @return This builder.
      */
    public org.spf4j.base.avro.JFileLocation.Builder setFileName(java.lang.String value) {
      validate(fields()[0], value);
      this.fileName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fileName' field has been set.
      * file name
      * @return True if the 'fileName' field has been set, false otherwise.
      */
    public boolean hasFileName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fileName' field.
      * file name
      * @return This builder.
      */
    public org.spf4j.base.avro.JFileLocation.Builder clearFileName() {
      fileName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineNumber' field.
      * line number
      * @return The value.
      */
    public java.lang.Integer getLineNumber() {
      return lineNumber;
    }

    /**
      * Sets the value of the 'lineNumber' field.
      * line number
      * @param value The value of 'lineNumber'.
      * @return This builder.
      */
    public org.spf4j.base.avro.JFileLocation.Builder setLineNumber(int value) {
      validate(fields()[1], value);
      this.lineNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lineNumber' field has been set.
      * line number
      * @return True if the 'lineNumber' field has been set, false otherwise.
      */
    public boolean hasLineNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lineNumber' field.
      * line number
      * @return This builder.
      */
    public org.spf4j.base.avro.JFileLocation.Builder clearLineNumber() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public JFileLocation build() {
      try {
        JFileLocation record = new JFileLocation();
        record.fileName = fieldSetFlags()[0] ? this.fileName : (java.lang.String) defaultValue(fields()[0]);
        record.lineNumber = fieldSetFlags()[1] ? this.lineNumber : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
