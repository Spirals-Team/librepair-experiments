/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.spf4j.tsdb2.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** table definition, name, column names and descriptions */
@org.apache.avro.specific.AvroGenerated
public class TableDef extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5489525796364750633L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TableDef\",\"namespace\":\"org.spf4j.tsdb2.avro\",\"doc\":\"table definition, name, column names and descriptions\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"def id\",\"default\":-1},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"table name\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"table description\",\"default\":\"\"},{\"name\":\"columns\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ColumnDef\",\"doc\":\"column definition\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"column name\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Type\",\"symbols\":[\"LONG\",\"DOUBLE\"]},\"doc\":\"column value type\",\"default\":\"LONG\"},{\"name\":\"unitOfMeasurement\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"unit of measurement for the data\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Column description\",\"default\":\"\"}]}},\"doc\":\"column definitions\",\"default\":[]},{\"name\":\"sampleTime\",\"type\":\"int\",\"doc\":\"the interval\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** def id */
  @Deprecated public long id;
  /** table name */
  @Deprecated public java.lang.String name;
  /** table description */
  @Deprecated public java.lang.String description;
  /** column definitions */
  @Deprecated public java.util.List<org.spf4j.tsdb2.avro.ColumnDef> columns;
  /** the interval */
  @Deprecated public int sampleTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TableDef() {}

  /**
   * All-args constructor.
   * @param id def id
   * @param name table name
   * @param description table description
   * @param columns column definitions
   * @param sampleTime the interval
   */
  public TableDef(java.lang.Long id, java.lang.String name, java.lang.String description, java.util.List<org.spf4j.tsdb2.avro.ColumnDef> columns, java.lang.Integer sampleTime) {
    this.id = id;
    this.name = name;
    this.description = description;
    this.columns = columns;
    this.sampleTime = sampleTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return description;
    case 3: return columns;
    case 4: return sampleTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: description = (java.lang.String)value$; break;
    case 3: columns = (java.util.List<org.spf4j.tsdb2.avro.ColumnDef>)value$; break;
    case 4: sampleTime = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return def id
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * def id
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return table name
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * table name
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return table description
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * table description
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'columns' field.
   * @return column definitions
   */
  public java.util.List<org.spf4j.tsdb2.avro.ColumnDef> getColumns() {
    return columns;
  }

  /**
   * Sets the value of the 'columns' field.
   * column definitions
   * @param value the value to set.
   */
  public void setColumns(java.util.List<org.spf4j.tsdb2.avro.ColumnDef> value) {
    this.columns = value;
  }

  /**
   * Gets the value of the 'sampleTime' field.
   * @return the interval
   */
  public java.lang.Integer getSampleTime() {
    return sampleTime;
  }

  /**
   * Sets the value of the 'sampleTime' field.
   * the interval
   * @param value the value to set.
   */
  public void setSampleTime(java.lang.Integer value) {
    this.sampleTime = value;
  }

  /**
   * Creates a new TableDef RecordBuilder.
   * @return A new TableDef RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.TableDef.Builder newBuilder() {
    return new org.spf4j.tsdb2.avro.TableDef.Builder();
  }

  /**
   * Creates a new TableDef RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TableDef RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.TableDef.Builder newBuilder(org.spf4j.tsdb2.avro.TableDef.Builder other) {
    return new org.spf4j.tsdb2.avro.TableDef.Builder(other);
  }

  /**
   * Creates a new TableDef RecordBuilder by copying an existing TableDef instance.
   * @param other The existing instance to copy.
   * @return A new TableDef RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.TableDef.Builder newBuilder(org.spf4j.tsdb2.avro.TableDef other) {
    return new org.spf4j.tsdb2.avro.TableDef.Builder(other);
  }

  /**
   * RecordBuilder for TableDef instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TableDef>
    implements org.apache.avro.data.RecordBuilder<TableDef> {

    /** def id */
    private long id;
    /** table name */
    private java.lang.String name;
    /** table description */
    private java.lang.String description;
    /** column definitions */
    private java.util.List<org.spf4j.tsdb2.avro.ColumnDef> columns;
    /** the interval */
    private int sampleTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.spf4j.tsdb2.avro.TableDef.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.columns)) {
        this.columns = data().deepCopy(fields()[3].schema(), other.columns);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sampleTime)) {
        this.sampleTime = data().deepCopy(fields()[4].schema(), other.sampleTime);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TableDef instance
     * @param other The existing instance to copy.
     */
    private Builder(org.spf4j.tsdb2.avro.TableDef other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.columns)) {
        this.columns = data().deepCopy(fields()[3].schema(), other.columns);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sampleTime)) {
        this.sampleTime = data().deepCopy(fields()[4].schema(), other.sampleTime);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * def id
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * def id
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.TableDef.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * def id
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * def id
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.TableDef.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * table name
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * table name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.TableDef.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * table name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * table name
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.TableDef.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * table description
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * table description
      * @param value The value of 'description'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.TableDef.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * table description
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * table description
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.TableDef.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'columns' field.
      * column definitions
      * @return The value.
      */
    public java.util.List<org.spf4j.tsdb2.avro.ColumnDef> getColumns() {
      return columns;
    }

    /**
      * Sets the value of the 'columns' field.
      * column definitions
      * @param value The value of 'columns'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.TableDef.Builder setColumns(java.util.List<org.spf4j.tsdb2.avro.ColumnDef> value) {
      validate(fields()[3], value);
      this.columns = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'columns' field has been set.
      * column definitions
      * @return True if the 'columns' field has been set, false otherwise.
      */
    public boolean hasColumns() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'columns' field.
      * column definitions
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.TableDef.Builder clearColumns() {
      columns = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sampleTime' field.
      * the interval
      * @return The value.
      */
    public java.lang.Integer getSampleTime() {
      return sampleTime;
    }

    /**
      * Sets the value of the 'sampleTime' field.
      * the interval
      * @param value The value of 'sampleTime'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.TableDef.Builder setSampleTime(int value) {
      validate(fields()[4], value);
      this.sampleTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sampleTime' field has been set.
      * the interval
      * @return True if the 'sampleTime' field has been set, false otherwise.
      */
    public boolean hasSampleTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sampleTime' field.
      * the interval
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.TableDef.Builder clearSampleTime() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public TableDef build() {
      try {
        TableDef record = new TableDef();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.columns = fieldSetFlags()[3] ? this.columns : (java.util.List<org.spf4j.tsdb2.avro.ColumnDef>) defaultValue(fields()[3]);
        record.sampleTime = fieldSetFlags()[4] ? this.sampleTime : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
