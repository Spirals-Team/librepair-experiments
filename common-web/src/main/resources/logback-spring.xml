<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <include resource="org/springframework/boot/logging/logback/base.xml" />

    <property name="log.path" value="/logs" />

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <withJansi>true</withJansi>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 如果是true日志被追加到文件结尾，如果是false清空现存文件，默认是true -->
        <append>true</append>
        <File>logs/logback.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天滚动一次的日志 只保留30天内的日志文件 -->
            <FileNamePattern>
                logs/logback.%d{yyyy-MM-dd}.log.zip
                <maxHistory>30</maxHistory>
            </FileNamePattern>

            <!-- 每分钟滚动一次日志 -->
            <!-- <FileNamePattern>
                logs/logback.%d{yyyy-MM-dd_HH-mm}.log.zip
            </FileNamePattern> -->
        </rollingPolicy>
        <!-- 对日志进行格式化 -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </layout>
    </appender>


    <appender name="LOGBACK_ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <file>logs/logback-error.log</file>

        <!--
            定义滚动策略 作用:根据固定窗口算法重命名文件的滚动策略 class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy
            <fileNamePattern>:表示当触发了回滚策略后，按这个文件命名规则生成归档文件，命名规则中的%i表示在maxIndex和minIndex之间的一个整数值
            <minIndex>:最小索引值
            <maxIndex>:最大索引值
         -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>logs/logback-error.log.%i</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>20</maxIndex>
        </rollingPolicy>

        <!--
            定义按文件大小触发滚动策略triggeringPolicy 作用:查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender触发当前活动文件滚动
            只有一个参数 maxSize 这是活动文件的大小，默认值是10MB
        -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>50MB</maxFileSize>
        </triggeringPolicy>

        <!--
            配置日志级别过滤器 作用:根据日志级别进行过滤，如果日志级别等于配置级别过滤器会根据onMath和onMismatch接收或拒绝日志
            参数:
                <level>:设置过滤级别
                <onMatch>:用于配置符合过滤条件的操作
                <onMismatch>:用于配置不符合过滤条件的操作
                此处配置为只接收ERROR日志级别信息
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            <!--json-->
            <!--<pattern>-->
            <!--{"timestamp":"%d{yyyy-MM-dd'T'HH:mm:ss.SSS}","thread":"%t","line":"%line","log_level":"%p","class_name":"%C;","msg":"%m%n", "caller":"%caller{1}"}-->
            <!--</pattern>-->
        </encoder>
    </appender>


    <appender name="LOGBACK_ALL_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <file>logs/logback-all.log</file>

        <!--
            定义滚动策略 作用:根据固定窗口算法重命名文件的滚动策略 class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy
            <fileNamePattern>:表示当触发了回滚策略后，按这个文件命名规则生成归档文件，命名规则中的%i表示在maxIndex和minIndex之间的一个整数值
            <minIndex>:最小索引值
            <maxIndex>:最大索引值
         -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>logs/logback-all.log.%i</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>20</maxIndex>
        </rollingPolicy>

        <!--
            定义按文件大小触发滚动策略triggeringPolicy 作用:查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender触发当前活动文件滚动
            只有一个参数 maxSize 这是活动文件的大小，默认值是10MB
        -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>50MB</maxFileSize>
        </triggeringPolicy>

        <!--
            配置临界值过滤器 作用:过滤掉低于指定临界值的日志，当日志级别等于或高于临界值时过滤器返回NEUTRAL，当日志级别低于临界值时，日志会被拒绝
            此处配置为INFO 即过滤掉日志级别小于INFO的日志信息
        -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>

        <encoder>
            <pattern>
                {"timestamp":"%d{yyyy-MM-dd'T'HH:mm:ss.SSS}","thread":"%t","line":"%line","log_level":"%p","class_name":"%C;","msg":"%m%n", "caller":"%caller{1}"}
            </pattern>
        </encoder>
    </appender>


    <springProfile name="dev">

    </springProfile>

    <springProfile name="pro">
        <root level="INFO">
            <appender-ref ref="STDOUT" />
            <appender-ref ref="FILE" />
            <appender-ref ref="LOGBACK_ALL_LOG" />
            <appender-ref ref="LOGBACK_ERROR_LOG" />
        </root>
    </springProfile>


</configuration>