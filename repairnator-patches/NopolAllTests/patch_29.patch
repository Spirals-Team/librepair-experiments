--- /root/workspace/eclipse/ditto/410293879/services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/rabbitmq/RabbitMQClientActor.java
+++ /root/workspace/eclipse/ditto/410293879/services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/rabbitmq/RabbitMQClientActor.java
@@ -314,37 +314,39 @@
         final CompletableFuture<Status.Status> future = new CompletableFuture<>();
-        if (rmqConnectionActor == null) {
-            final ActorRef self = getSelf();
-            try {
-                final ConnectionFactory connectionFactory = rabbitConnectionFactoryFactory
-                        .createConnectionFactory(connection, new RabbitMQExceptionHandler(throwable -> {
-                            self.tell(new ImmutableConnectionFailure(origin, throwable, null), self);
-                            future.complete(new Status.Failure(throwable));
-                        }));
-
-                final Props props = com.newmotion.akka.rabbitmq.ConnectionActor.props(connectionFactory,
-                        timeout, (rmqConnection, connectionActorRef) -> {
-                            log.info("Established RMQ connection: {}", rmqConnection);
-                            self.tell((ClientConnected) () -> Optional.ofNullable(createConnectionSender), origin);
-                            return null;
-                        });
-                rmqConnectionActor = startChildActor(RMQ_CONNECTION_ACTOR_NAME, props);
-
-                rmqPublisherActor = startRmqPublisherActor().orElse(null);
-
-                // create publisher channel
-                rmqConnectionActor.tell(
-                        CreateChannel.apply(
-                                ChannelActor.props((channel, s) -> {
-                                    log.info("Did set up publisher channel: {}", channel);
-                                    future.complete(new Status.Success("channel created"));
-                                    return null;
-                                }),
-                                Option.apply(PUBLISHER_CHANNEL)), rmqPublisherActor);
-            } catch (final Exception exception) {
-                self.tell(new ImmutableConnectionFailure(origin, exception, null), self);
-                future.complete(new Status.Failure(exception));
+        if (true) {
+            if (rmqConnectionActor == null) {
+                final ActorRef self = getSelf();
+                try {
+                    final ConnectionFactory connectionFactory = rabbitConnectionFactoryFactory
+                    .createConnectionFactory(connection, new RabbitMQExceptionHandler(throwable -> {
+                        self.tell(new ImmutableConnectionFailure(origin, throwable, null), self);
+                        future.complete(new Status.Failure(throwable));
+                    }));
+                    
+                    final Props props = com.newmotion.akka.rabbitmq.ConnectionActor.props(connectionFactory,
+                    timeout, (rmqConnection, connectionActorRef) -> {
+                        log.info("Established RMQ connection: {}", rmqConnection);
+                        self.tell((ClientConnected) () -> Optional.ofNullable(createConnectionSender), origin);
+                        return null;
+                    });
+                    rmqConnectionActor = startChildActor(RMQ_CONNECTION_ACTOR_NAME, props);
+                    
+                    rmqPublisherActor = startRmqPublisherActor().orElse(null);
+                    
+                    // create publisher channel
+                    rmqConnectionActor.tell(
+                    CreateChannel.apply(
+                    ChannelActor.props((channel, s) -> {
+                        log.info("Did set up publisher channel: {}", channel);
+                        future.complete(new Status.Success("channel created"));
+                        return null;
+                    }),
+                    Option.apply(PUBLISHER_CHANNEL)), rmqPublisherActor);
+                } catch (final Exception exception) {
+                    self.tell(new ImmutableConnectionFailure(origin, exception, null), self);
+                    future.complete(new Status.Failure(exception));
+                }
+            } else {
+                log.debug("Connection <{}> is already open.", connectionId());
+                future.complete(new Status.Success("already connected"));
             }
-        } else {
-            log.debug("Connection <{}> is already open.", connectionId());
-            future.complete(new Status.Success("already connected"));
         }
