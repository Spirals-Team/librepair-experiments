--- /root/workspace/3redronin/mu-server/413147620/src/main/java/io/muserver/rest/RestHandler.java
+++ /root/workspace/3redronin/mu-server/413147620/src/main/java/io/muserver/rest/RestHandler.java
@@ -94,26 +94,28 @@
 
-            for (ResourceMethodParam param : rm.params) {
-                Object paramValue;
-                if (param.source == ResourceMethodParam.ValueSource.MESSAGE_BODY) {
-                    if (requestContext.hasEntity()) {
-                        paramValue = readRequestEntity(requestContentType, rm, param.parameterHandle, requestContext.getEntityStream(), entityProviders, requestContext.getHeaders());
-                    } else {
-                        throw new BadRequestException("No request body was sent to the " + param.parameterHandle.getName()
+            if (true) {
+                for (ResourceMethodParam param : rm.params) {
+                    Object paramValue;
+                    if (param.source == ResourceMethodParam.ValueSource.MESSAGE_BODY) {
+                        if (requestContext.hasEntity()) {
+                            paramValue = readRequestEntity(requestContentType, rm, param.parameterHandle, requestContext.getEntityStream(), entityProviders, requestContext.getHeaders());
+                        } else {
+                            throw new BadRequestException("No request body was sent to the " + param.parameterHandle.getName()
                             + " parameter of the resource method \"" + rm.methodHandle + "\" "
                             + "- if this should be optional then specify an @DefaultValue annotation on the parameter");
+                        }
+                    } else if (param.source == ResourceMethodParam.ValueSource.CONTEXT) {
+                        paramValue = getContextParam(requestContext, muResponse, relativePath, mm, param);
+                    } else if (param.source == ResourceMethodParam.ValueSource.SUSPENDED) {
+                        if (isAsync) {
+                            throw new MuException("A REST method can only have one @Suspended attribute. Error for " + rm);
+                        }
+                        isAsync = true;
+                        asyncHandle = muRequest.handleAsync();
+                        paramValue = new AsyncResponseAdapter(asyncHandle, response -> sendResponse(0, requestContext, muResponse, acceptHeaders, produces, directlyProduces, response));
+                    } else {
+                        ResourceMethodParam.RequestBasedParam rbp = (ResourceMethodParam.RequestBasedParam) param;
+                        paramValue = rbp.getValue(muRequest, mm);
                     }
-                } else if (param.source == ResourceMethodParam.ValueSource.CONTEXT) {
-                    paramValue = getContextParam(requestContext, muResponse, relativePath, mm, param);
-                } else if (param.source == ResourceMethodParam.ValueSource.SUSPENDED) {
-                    if (isAsync) {
-                        throw new MuException("A REST method can only have one @Suspended attribute. Error for " + rm);
-                    }
-                    isAsync = true;
-                    asyncHandle = muRequest.handleAsync();
-                    paramValue = new AsyncResponseAdapter(asyncHandle, response -> sendResponse(0, requestContext, muResponse, acceptHeaders, produces, directlyProduces, response));
-                } else {
-                    ResourceMethodParam.RequestBasedParam rbp = (ResourceMethodParam.RequestBasedParam) param;
-                    paramValue = rbp.getValue(muRequest, mm);
+                    params[param.index] = paramValue;
                 }
-                params[param.index] = paramValue;
             }
