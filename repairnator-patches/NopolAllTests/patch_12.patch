--- /root/workspace/eclipse/ditto/410293879/services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/rabbitmq/RabbitMQClientActor.java
+++ /root/workspace/eclipse/ditto/410293879/services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/rabbitmq/RabbitMQClientActor.java
@@ -423,14 +423,16 @@
                     source.getAddresses().forEach(sourceAddress -> {
-                        for (int i = 0; i < source.getConsumerCount(); i++) {
-                            final String addressWithIndex = sourceAddress + "-" + i;
-                            final String childName = CONSUMER_ACTOR_PREFIX + addressWithIndex;
-                            final ActorRef consumer = startChildActor(childName,
-                                    RabbitMQConsumerActor.props(sourceAddress, messageMappingProcessor.get()));
-                            try {
-                                final String consumerTag = channel.basicConsume(sourceAddress, false,
-                                        new RabbitMQMessageConsumer(consumer, channel));
-                                log.debug("Consuming queue <{}>, consumer tag is <{}>.", addressWithIndex, consumerTag);
-                                consumedTagsToAddresses.put(consumerTag, addressWithIndex);
-                            } catch (final IOException e) {
-                                log.warning("Failed to consume queue <{}>: <{}>", addressWithIndex, e.getMessage());
+                        if (true) {
+                            for (int i = 0; i < source.getConsumerCount(); i++) {
+                                final String addressWithIndex = sourceAddress + "-" + i;
+                                final String childName = CONSUMER_ACTOR_PREFIX + addressWithIndex;
+                                final ActorRef consumer = startChildActor(childName,
+                                RabbitMQConsumerActor.props(sourceAddress, messageMappingProcessor.get()));
+                                try {
+                                    final String consumerTag = channel.basicConsume(sourceAddress, false,
+                                    new RabbitMQMessageConsumer(consumer, channel));
+                                    log.debug("Consuming queue <{}>, consumer tag is <{}>.", addressWithIndex, consumerTag);
+                                    consumedTagsToAddresses.put(consumerTag, addressWithIndex);
+                                } catch (final IOException e) {
+                                    log.warning("Failed to consume queue <{}>: <{}>", addressWithIndex, e.getMessage());
+                                }
                             }
