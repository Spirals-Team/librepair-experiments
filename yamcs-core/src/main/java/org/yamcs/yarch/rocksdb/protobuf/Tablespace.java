// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tablespace.proto

package org.yamcs.yarch.rocksdb.protobuf;

public final class Tablespace {
  private Tablespace() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface TimeBasedPartitionOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string partitionDir = 1;
    /**
     * <code>optional string partitionDir = 1;</code>
     */
    boolean hasPartitionDir();
    /**
     * <code>optional string partitionDir = 1;</code>
     */
    java.lang.String getPartitionDir();
    /**
     * <code>optional string partitionDir = 1;</code>
     */
    com.google.protobuf.ByteString
        getPartitionDirBytes();

    // optional int64 partitionStart = 2;
    /**
     * <code>optional int64 partitionStart = 2;</code>
     */
    boolean hasPartitionStart();
    /**
     * <code>optional int64 partitionStart = 2;</code>
     */
    long getPartitionStart();

    // optional int64 partitionEnd = 3;
    /**
     * <code>optional int64 partitionEnd = 3;</code>
     */
    boolean hasPartitionEnd();
    /**
     * <code>optional int64 partitionEnd = 3;</code>
     */
    long getPartitionEnd();
  }
  /**
   * Protobuf type {@code TimeBasedPartition}
   */
  public static final class TimeBasedPartition extends
      com.google.protobuf.GeneratedMessage
      implements TimeBasedPartitionOrBuilder {
    // Use TimeBasedPartition.newBuilder() to construct.
    private TimeBasedPartition(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TimeBasedPartition(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TimeBasedPartition defaultInstance;
    public static TimeBasedPartition getDefaultInstance() {
      return defaultInstance;
    }

    public TimeBasedPartition getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TimeBasedPartition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              partitionDir_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              partitionStart_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              partitionEnd_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.yamcs.yarch.rocksdb.protobuf.Tablespace.internal_static_TimeBasedPartition_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.yamcs.yarch.rocksdb.protobuf.Tablespace.internal_static_TimeBasedPartition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.class, org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.Builder.class);
    }

    public static com.google.protobuf.Parser<TimeBasedPartition> PARSER =
        new com.google.protobuf.AbstractParser<TimeBasedPartition>() {
      public TimeBasedPartition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TimeBasedPartition(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TimeBasedPartition> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string partitionDir = 1;
    public static final int PARTITIONDIR_FIELD_NUMBER = 1;
    private java.lang.Object partitionDir_;
    /**
     * <code>optional string partitionDir = 1;</code>
     */
    public boolean hasPartitionDir() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string partitionDir = 1;</code>
     */
    public java.lang.String getPartitionDir() {
      java.lang.Object ref = partitionDir_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          partitionDir_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string partitionDir = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPartitionDirBytes() {
      java.lang.Object ref = partitionDir_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        partitionDir_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int64 partitionStart = 2;
    public static final int PARTITIONSTART_FIELD_NUMBER = 2;
    private long partitionStart_;
    /**
     * <code>optional int64 partitionStart = 2;</code>
     */
    public boolean hasPartitionStart() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 partitionStart = 2;</code>
     */
    public long getPartitionStart() {
      return partitionStart_;
    }

    // optional int64 partitionEnd = 3;
    public static final int PARTITIONEND_FIELD_NUMBER = 3;
    private long partitionEnd_;
    /**
     * <code>optional int64 partitionEnd = 3;</code>
     */
    public boolean hasPartitionEnd() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 partitionEnd = 3;</code>
     */
    public long getPartitionEnd() {
      return partitionEnd_;
    }

    private void initFields() {
      partitionDir_ = "";
      partitionStart_ = 0L;
      partitionEnd_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getPartitionDirBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, partitionStart_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, partitionEnd_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getPartitionDirBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, partitionStart_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, partitionEnd_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code TimeBasedPartition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartitionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.yamcs.yarch.rocksdb.protobuf.Tablespace.internal_static_TimeBasedPartition_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.yamcs.yarch.rocksdb.protobuf.Tablespace.internal_static_TimeBasedPartition_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.class, org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.Builder.class);
      }

      // Construct using org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        partitionDir_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        partitionStart_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        partitionEnd_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.yamcs.yarch.rocksdb.protobuf.Tablespace.internal_static_TimeBasedPartition_descriptor;
      }

      public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition getDefaultInstanceForType() {
        return org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.getDefaultInstance();
      }

      public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition build() {
        org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition buildPartial() {
        org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition result = new org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.partitionDir_ = partitionDir_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.partitionStart_ = partitionStart_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.partitionEnd_ = partitionEnd_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition) {
          return mergeFrom((org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition other) {
        if (other == org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.getDefaultInstance()) return this;
        if (other.hasPartitionDir()) {
          bitField0_ |= 0x00000001;
          partitionDir_ = other.partitionDir_;
          onChanged();
        }
        if (other.hasPartitionStart()) {
          setPartitionStart(other.getPartitionStart());
        }
        if (other.hasPartitionEnd()) {
          setPartitionEnd(other.getPartitionEnd());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string partitionDir = 1;
      private java.lang.Object partitionDir_ = "";
      /**
       * <code>optional string partitionDir = 1;</code>
       */
      public boolean hasPartitionDir() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string partitionDir = 1;</code>
       */
      public java.lang.String getPartitionDir() {
        java.lang.Object ref = partitionDir_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          partitionDir_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string partitionDir = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPartitionDirBytes() {
        java.lang.Object ref = partitionDir_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          partitionDir_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string partitionDir = 1;</code>
       */
      public Builder setPartitionDir(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        partitionDir_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string partitionDir = 1;</code>
       */
      public Builder clearPartitionDir() {
        bitField0_ = (bitField0_ & ~0x00000001);
        partitionDir_ = getDefaultInstance().getPartitionDir();
        onChanged();
        return this;
      }
      /**
       * <code>optional string partitionDir = 1;</code>
       */
      public Builder setPartitionDirBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        partitionDir_ = value;
        onChanged();
        return this;
      }

      // optional int64 partitionStart = 2;
      private long partitionStart_ ;
      /**
       * <code>optional int64 partitionStart = 2;</code>
       */
      public boolean hasPartitionStart() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 partitionStart = 2;</code>
       */
      public long getPartitionStart() {
        return partitionStart_;
      }
      /**
       * <code>optional int64 partitionStart = 2;</code>
       */
      public Builder setPartitionStart(long value) {
        bitField0_ |= 0x00000002;
        partitionStart_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 partitionStart = 2;</code>
       */
      public Builder clearPartitionStart() {
        bitField0_ = (bitField0_ & ~0x00000002);
        partitionStart_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 partitionEnd = 3;
      private long partitionEnd_ ;
      /**
       * <code>optional int64 partitionEnd = 3;</code>
       */
      public boolean hasPartitionEnd() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 partitionEnd = 3;</code>
       */
      public long getPartitionEnd() {
        return partitionEnd_;
      }
      /**
       * <code>optional int64 partitionEnd = 3;</code>
       */
      public Builder setPartitionEnd(long value) {
        bitField0_ |= 0x00000004;
        partitionEnd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 partitionEnd = 3;</code>
       */
      public Builder clearPartitionEnd() {
        bitField0_ = (bitField0_ & ~0x00000004);
        partitionEnd_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TimeBasedPartition)
    }

    static {
      defaultInstance = new TimeBasedPartition(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:TimeBasedPartition)
  }

  public interface TablespaceRecordOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 tbsIndex = 1;
    /**
     * <code>optional uint32 tbsIndex = 1;</code>
     */
    boolean hasTbsIndex();
    /**
     * <code>optional uint32 tbsIndex = 1;</code>
     */
    int getTbsIndex();

    // optional .TablespaceRecord.Type type = 2;
    /**
     * <code>optional .TablespaceRecord.Type type = 2;</code>
     */
    boolean hasType();
    /**
     * <code>optional .TablespaceRecord.Type type = 2;</code>
     */
    org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type getType();

    // optional string instanceName = 3;
    /**
     * <code>optional string instanceName = 3;</code>
     *
     * <pre>
     * used for all record types
     *if not specified then instanceName = tablespaceName
     * </pre>
     */
    boolean hasInstanceName();
    /**
     * <code>optional string instanceName = 3;</code>
     *
     * <pre>
     * used for all record types
     *if not specified then instanceName = tablespaceName
     * </pre>
     */
    java.lang.String getInstanceName();
    /**
     * <code>optional string instanceName = 3;</code>
     *
     * <pre>
     * used for all record types
     *if not specified then instanceName = tablespaceName
     * </pre>
     */
    com.google.protobuf.ByteString
        getInstanceNameBytes();

    // optional string tableName = 4;
    /**
     * <code>optional string tableName = 4;</code>
     *
     * <pre>
     *used for TABLE_PARTITION and HISTOGRAM
     * </pre>
     */
    boolean hasTableName();
    /**
     * <code>optional string tableName = 4;</code>
     *
     * <pre>
     *used for TABLE_PARTITION and HISTOGRAM
     * </pre>
     */
    java.lang.String getTableName();
    /**
     * <code>optional string tableName = 4;</code>
     *
     * <pre>
     *used for TABLE_PARTITION and HISTOGRAM
     * </pre>
     */
    com.google.protobuf.ByteString
        getTableNameBytes();

    // optional string histogramColumnName = 5;
    /**
     * <code>optional string histogramColumnName = 5;</code>
     *
     * <pre>
     *used for HISTOGRAM 
     * </pre>
     */
    boolean hasHistogramColumnName();
    /**
     * <code>optional string histogramColumnName = 5;</code>
     *
     * <pre>
     *used for HISTOGRAM 
     * </pre>
     */
    java.lang.String getHistogramColumnName();
    /**
     * <code>optional string histogramColumnName = 5;</code>
     *
     * <pre>
     *used for HISTOGRAM 
     * </pre>
     */
    com.google.protobuf.ByteString
        getHistogramColumnNameBytes();

    // optional bytes partitionValue = 6;
    /**
     * <code>optional bytes partitionValue = 6;</code>
     *
     * <pre>
     * used for TABLE_PARTITION: if partitioned by value - the value
     * </pre>
     */
    boolean hasPartitionValue();
    /**
     * <code>optional bytes partitionValue = 6;</code>
     *
     * <pre>
     * used for TABLE_PARTITION: if partitioned by value - the value
     * </pre>
     */
    com.google.protobuf.ByteString getPartitionValue();

    // optional .TimeBasedPartition partition = 7;
    /**
     * <code>optional .TimeBasedPartition partition = 7;</code>
     *
     * <pre>
     * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
     *  - partitionDir is subdirectory name (usually something like 2017/11)
     *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
     * </pre>
     */
    boolean hasPartition();
    /**
     * <code>optional .TimeBasedPartition partition = 7;</code>
     *
     * <pre>
     * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
     *  - partitionDir is subdirectory name (usually something like 2017/11)
     *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
     * </pre>
     */
    org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition getPartition();
    /**
     * <code>optional .TimeBasedPartition partition = 7;</code>
     *
     * <pre>
     * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
     *  - partitionDir is subdirectory name (usually something like 2017/11)
     *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
     * </pre>
     */
    org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartitionOrBuilder getPartitionOrBuilder();

    // optional string parameterFqn = 8;
    /**
     * <code>optional string parameterFqn = 8;</code>
     *
     * <pre>
     *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
     *tbsIndex is the parameter id 
     *parameterType is a number assigned to (rawType,engType) combination
     *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
     * </pre>
     */
    boolean hasParameterFqn();
    /**
     * <code>optional string parameterFqn = 8;</code>
     *
     * <pre>
     *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
     *tbsIndex is the parameter id 
     *parameterType is a number assigned to (rawType,engType) combination
     *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
     * </pre>
     */
    java.lang.String getParameterFqn();
    /**
     * <code>optional string parameterFqn = 8;</code>
     *
     * <pre>
     *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
     *tbsIndex is the parameter id 
     *parameterType is a number assigned to (rawType,engType) combination
     *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
     * </pre>
     */
    com.google.protobuf.ByteString
        getParameterFqnBytes();

    // optional uint32 parameterType = 9;
    /**
     * <code>optional uint32 parameterType = 9;</code>
     */
    boolean hasParameterType();
    /**
     * <code>optional uint32 parameterType = 9;</code>
     */
    int getParameterType();

    // optional string partitioningSchema = 10;
    /**
     * <code>optional string partitioningSchema = 10;</code>
     *
     * <pre>
     *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
     * </pre>
     */
    boolean hasPartitioningSchema();
    /**
     * <code>optional string partitioningSchema = 10;</code>
     *
     * <pre>
     *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
     * </pre>
     */
    java.lang.String getPartitioningSchema();
    /**
     * <code>optional string partitioningSchema = 10;</code>
     *
     * <pre>
     *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
     * </pre>
     */
    com.google.protobuf.ByteString
        getPartitioningSchemaBytes();
  }
  /**
   * Protobuf type {@code TablespaceRecord}
   *
   * <pre>
   **
   *  This is used to encode values in the tablespace metadata database .
   * </pre>
   */
  public static final class TablespaceRecord extends
      com.google.protobuf.GeneratedMessage
      implements TablespaceRecordOrBuilder {
    // Use TablespaceRecord.newBuilder() to construct.
    private TablespaceRecord(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TablespaceRecord(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TablespaceRecord defaultInstance;
    public static TablespaceRecord getDefaultInstance() {
      return defaultInstance;
    }

    public TablespaceRecord getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TablespaceRecord(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              tbsIndex_ = input.readUInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type value = org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                type_ = value;
              }
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              instanceName_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              tableName_ = input.readBytes();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              histogramColumnName_ = input.readBytes();
              break;
            }
            case 50: {
              bitField0_ |= 0x00000020;
              partitionValue_ = input.readBytes();
              break;
            }
            case 58: {
              org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = partition_.toBuilder();
              }
              partition_ = input.readMessage(org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(partition_);
                partition_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              bitField0_ |= 0x00000080;
              parameterFqn_ = input.readBytes();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              parameterType_ = input.readUInt32();
              break;
            }
            case 82: {
              bitField0_ |= 0x00000200;
              partitioningSchema_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.yamcs.yarch.rocksdb.protobuf.Tablespace.internal_static_TablespaceRecord_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.yamcs.yarch.rocksdb.protobuf.Tablespace.internal_static_TablespaceRecord_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.class, org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Builder.class);
    }

    public static com.google.protobuf.Parser<TablespaceRecord> PARSER =
        new com.google.protobuf.AbstractParser<TablespaceRecord>() {
      public TablespaceRecord parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TablespaceRecord(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TablespaceRecord> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code TablespaceRecord.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TABLE_PARTITION = 1;</code>
       *
       * <pre>
       *used to store table (partition) data
       *relevant information: instanceName, tableName and optionally partitionValue, partitionDir, partitionStart and partitionEnd
       * </pre>
       */
      TABLE_PARTITION(0, 1),
      /**
       * <code>HISTOGRAM = 2;</code>
       *
       * <pre>
       *used to store table histogram data
       *relevant information: instanceName, tableName, columnName
       * </pre>
       */
      HISTOGRAM(1, 2),
      /**
       * <code>PARCHIVE_PGID2PG = 4;</code>
       *
       * <pre>
       *used as part of the ParameterArchive to keep the parameter group id -&gt; parameter group (list of parameter ids) mapping
       *relevant information: instanceName
       *there is only one record of this type for each instance and ParameterArchive
       * </pre>
       */
      PARCHIVE_PGID2PG(2, 4),
      /**
       * <code>PARCHIVE_DATA = 5;</code>
       *
       * <pre>
       *used to store ParameterArchive data. There is one record for each separate parameter 
       *(taking into account that a different type represents a different parameter in the ParameterArchive even if it has the same name)
       *relevant information: instanceName, parameterFqn, parameterType
       * </pre>
       */
      PARCHIVE_DATA(3, 5),
      /**
       * <code>PARCHIVE_PINFO = 6;</code>
       *
       * <pre>
       *used to store information about the partitions of the ParameterArchive in case they are partitioned by time
       * relevant information: instanceName, partitioningSchema
       *there is only one record of this type for each instance and ParameterArchive
       * </pre>
       */
      PARCHIVE_PINFO(4, 6),
      /**
       * <code>TAGDB = 7;</code>
       *
       * <pre>
       *used by the tag database
       * relevant information: instanceName
       * </pre>
       */
      TAGDB(5, 7),
      ;

      /**
       * <code>TABLE_PARTITION = 1;</code>
       *
       * <pre>
       *used to store table (partition) data
       *relevant information: instanceName, tableName and optionally partitionValue, partitionDir, partitionStart and partitionEnd
       * </pre>
       */
      public static final int TABLE_PARTITION_VALUE = 1;
      /**
       * <code>HISTOGRAM = 2;</code>
       *
       * <pre>
       *used to store table histogram data
       *relevant information: instanceName, tableName, columnName
       * </pre>
       */
      public static final int HISTOGRAM_VALUE = 2;
      /**
       * <code>PARCHIVE_PGID2PG = 4;</code>
       *
       * <pre>
       *used as part of the ParameterArchive to keep the parameter group id -&gt; parameter group (list of parameter ids) mapping
       *relevant information: instanceName
       *there is only one record of this type for each instance and ParameterArchive
       * </pre>
       */
      public static final int PARCHIVE_PGID2PG_VALUE = 4;
      /**
       * <code>PARCHIVE_DATA = 5;</code>
       *
       * <pre>
       *used to store ParameterArchive data. There is one record for each separate parameter 
       *(taking into account that a different type represents a different parameter in the ParameterArchive even if it has the same name)
       *relevant information: instanceName, parameterFqn, parameterType
       * </pre>
       */
      public static final int PARCHIVE_DATA_VALUE = 5;
      /**
       * <code>PARCHIVE_PINFO = 6;</code>
       *
       * <pre>
       *used to store information about the partitions of the ParameterArchive in case they are partitioned by time
       * relevant information: instanceName, partitioningSchema
       *there is only one record of this type for each instance and ParameterArchive
       * </pre>
       */
      public static final int PARCHIVE_PINFO_VALUE = 6;
      /**
       * <code>TAGDB = 7;</code>
       *
       * <pre>
       *used by the tag database
       * relevant information: instanceName
       * </pre>
       */
      public static final int TAGDB_VALUE = 7;


      public final int getNumber() { return value; }

      public static Type valueOf(int value) {
        switch (value) {
          case 1: return TABLE_PARTITION;
          case 2: return HISTOGRAM;
          case 4: return PARCHIVE_PGID2PG;
          case 5: return PARCHIVE_DATA;
          case 6: return PARCHIVE_PINFO;
          case 7: return TAGDB;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Type(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:TablespaceRecord.Type)
    }

    private int bitField0_;
    // optional uint32 tbsIndex = 1;
    public static final int TBSINDEX_FIELD_NUMBER = 1;
    private int tbsIndex_;
    /**
     * <code>optional uint32 tbsIndex = 1;</code>
     */
    public boolean hasTbsIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 tbsIndex = 1;</code>
     */
    public int getTbsIndex() {
      return tbsIndex_;
    }

    // optional .TablespaceRecord.Type type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type type_;
    /**
     * <code>optional .TablespaceRecord.Type type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .TablespaceRecord.Type type = 2;</code>
     */
    public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type getType() {
      return type_;
    }

    // optional string instanceName = 3;
    public static final int INSTANCENAME_FIELD_NUMBER = 3;
    private java.lang.Object instanceName_;
    /**
     * <code>optional string instanceName = 3;</code>
     *
     * <pre>
     * used for all record types
     *if not specified then instanceName = tablespaceName
     * </pre>
     */
    public boolean hasInstanceName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string instanceName = 3;</code>
     *
     * <pre>
     * used for all record types
     *if not specified then instanceName = tablespaceName
     * </pre>
     */
    public java.lang.String getInstanceName() {
      java.lang.Object ref = instanceName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          instanceName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string instanceName = 3;</code>
     *
     * <pre>
     * used for all record types
     *if not specified then instanceName = tablespaceName
     * </pre>
     */
    public com.google.protobuf.ByteString
        getInstanceNameBytes() {
      java.lang.Object ref = instanceName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instanceName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string tableName = 4;
    public static final int TABLENAME_FIELD_NUMBER = 4;
    private java.lang.Object tableName_;
    /**
     * <code>optional string tableName = 4;</code>
     *
     * <pre>
     *used for TABLE_PARTITION and HISTOGRAM
     * </pre>
     */
    public boolean hasTableName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string tableName = 4;</code>
     *
     * <pre>
     *used for TABLE_PARTITION and HISTOGRAM
     * </pre>
     */
    public java.lang.String getTableName() {
      java.lang.Object ref = tableName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tableName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string tableName = 4;</code>
     *
     * <pre>
     *used for TABLE_PARTITION and HISTOGRAM
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTableNameBytes() {
      java.lang.Object ref = tableName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tableName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string histogramColumnName = 5;
    public static final int HISTOGRAMCOLUMNNAME_FIELD_NUMBER = 5;
    private java.lang.Object histogramColumnName_;
    /**
     * <code>optional string histogramColumnName = 5;</code>
     *
     * <pre>
     *used for HISTOGRAM 
     * </pre>
     */
    public boolean hasHistogramColumnName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string histogramColumnName = 5;</code>
     *
     * <pre>
     *used for HISTOGRAM 
     * </pre>
     */
    public java.lang.String getHistogramColumnName() {
      java.lang.Object ref = histogramColumnName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          histogramColumnName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string histogramColumnName = 5;</code>
     *
     * <pre>
     *used for HISTOGRAM 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHistogramColumnNameBytes() {
      java.lang.Object ref = histogramColumnName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        histogramColumnName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bytes partitionValue = 6;
    public static final int PARTITIONVALUE_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString partitionValue_;
    /**
     * <code>optional bytes partitionValue = 6;</code>
     *
     * <pre>
     * used for TABLE_PARTITION: if partitioned by value - the value
     * </pre>
     */
    public boolean hasPartitionValue() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bytes partitionValue = 6;</code>
     *
     * <pre>
     * used for TABLE_PARTITION: if partitioned by value - the value
     * </pre>
     */
    public com.google.protobuf.ByteString getPartitionValue() {
      return partitionValue_;
    }

    // optional .TimeBasedPartition partition = 7;
    public static final int PARTITION_FIELD_NUMBER = 7;
    private org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition partition_;
    /**
     * <code>optional .TimeBasedPartition partition = 7;</code>
     *
     * <pre>
     * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
     *  - partitionDir is subdirectory name (usually something like 2017/11)
     *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
     * </pre>
     */
    public boolean hasPartition() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .TimeBasedPartition partition = 7;</code>
     *
     * <pre>
     * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
     *  - partitionDir is subdirectory name (usually something like 2017/11)
     *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
     * </pre>
     */
    public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition getPartition() {
      return partition_;
    }
    /**
     * <code>optional .TimeBasedPartition partition = 7;</code>
     *
     * <pre>
     * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
     *  - partitionDir is subdirectory name (usually something like 2017/11)
     *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
     * </pre>
     */
    public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartitionOrBuilder getPartitionOrBuilder() {
      return partition_;
    }

    // optional string parameterFqn = 8;
    public static final int PARAMETERFQN_FIELD_NUMBER = 8;
    private java.lang.Object parameterFqn_;
    /**
     * <code>optional string parameterFqn = 8;</code>
     *
     * <pre>
     *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
     *tbsIndex is the parameter id 
     *parameterType is a number assigned to (rawType,engType) combination
     *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
     * </pre>
     */
    public boolean hasParameterFqn() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string parameterFqn = 8;</code>
     *
     * <pre>
     *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
     *tbsIndex is the parameter id 
     *parameterType is a number assigned to (rawType,engType) combination
     *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
     * </pre>
     */
    public java.lang.String getParameterFqn() {
      java.lang.Object ref = parameterFqn_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          parameterFqn_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string parameterFqn = 8;</code>
     *
     * <pre>
     *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
     *tbsIndex is the parameter id 
     *parameterType is a number assigned to (rawType,engType) combination
     *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
     * </pre>
     */
    public com.google.protobuf.ByteString
        getParameterFqnBytes() {
      java.lang.Object ref = parameterFqn_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        parameterFqn_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional uint32 parameterType = 9;
    public static final int PARAMETERTYPE_FIELD_NUMBER = 9;
    private int parameterType_;
    /**
     * <code>optional uint32 parameterType = 9;</code>
     */
    public boolean hasParameterType() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 parameterType = 9;</code>
     */
    public int getParameterType() {
      return parameterType_;
    }

    // optional string partitioningSchema = 10;
    public static final int PARTITIONINGSCHEMA_FIELD_NUMBER = 10;
    private java.lang.Object partitioningSchema_;
    /**
     * <code>optional string partitioningSchema = 10;</code>
     *
     * <pre>
     *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
     * </pre>
     */
    public boolean hasPartitioningSchema() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional string partitioningSchema = 10;</code>
     *
     * <pre>
     *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
     * </pre>
     */
    public java.lang.String getPartitioningSchema() {
      java.lang.Object ref = partitioningSchema_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          partitioningSchema_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string partitioningSchema = 10;</code>
     *
     * <pre>
     *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPartitioningSchemaBytes() {
      java.lang.Object ref = partitioningSchema_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        partitioningSchema_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      tbsIndex_ = 0;
      type_ = org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type.TABLE_PARTITION;
      instanceName_ = "";
      tableName_ = "";
      histogramColumnName_ = "";
      partitionValue_ = com.google.protobuf.ByteString.EMPTY;
      partition_ = org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.getDefaultInstance();
      parameterFqn_ = "";
      parameterType_ = 0;
      partitioningSchema_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, tbsIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getInstanceNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getTableNameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getHistogramColumnNameBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, partitionValue_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, partition_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, getParameterFqnBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, parameterType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, getPartitioningSchemaBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, tbsIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getInstanceNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getTableNameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getHistogramColumnNameBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, partitionValue_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, partition_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getParameterFqnBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, parameterType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, getPartitioningSchemaBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code TablespaceRecord}
     *
     * <pre>
     **
     *  This is used to encode values in the tablespace metadata database .
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecordOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.yamcs.yarch.rocksdb.protobuf.Tablespace.internal_static_TablespaceRecord_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.yamcs.yarch.rocksdb.protobuf.Tablespace.internal_static_TablespaceRecord_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.class, org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Builder.class);
      }

      // Construct using org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPartitionFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tbsIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type.TABLE_PARTITION;
        bitField0_ = (bitField0_ & ~0x00000002);
        instanceName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        tableName_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        histogramColumnName_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        partitionValue_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (partitionBuilder_ == null) {
          partition_ = org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.getDefaultInstance();
        } else {
          partitionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        parameterFqn_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        parameterType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        partitioningSchema_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.yamcs.yarch.rocksdb.protobuf.Tablespace.internal_static_TablespaceRecord_descriptor;
      }

      public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord getDefaultInstanceForType() {
        return org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.getDefaultInstance();
      }

      public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord build() {
        org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord buildPartial() {
        org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord result = new org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tbsIndex_ = tbsIndex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.instanceName_ = instanceName_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.tableName_ = tableName_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.histogramColumnName_ = histogramColumnName_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.partitionValue_ = partitionValue_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (partitionBuilder_ == null) {
          result.partition_ = partition_;
        } else {
          result.partition_ = partitionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.parameterFqn_ = parameterFqn_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.parameterType_ = parameterType_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.partitioningSchema_ = partitioningSchema_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord) {
          return mergeFrom((org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord other) {
        if (other == org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.getDefaultInstance()) return this;
        if (other.hasTbsIndex()) {
          setTbsIndex(other.getTbsIndex());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasInstanceName()) {
          bitField0_ |= 0x00000004;
          instanceName_ = other.instanceName_;
          onChanged();
        }
        if (other.hasTableName()) {
          bitField0_ |= 0x00000008;
          tableName_ = other.tableName_;
          onChanged();
        }
        if (other.hasHistogramColumnName()) {
          bitField0_ |= 0x00000010;
          histogramColumnName_ = other.histogramColumnName_;
          onChanged();
        }
        if (other.hasPartitionValue()) {
          setPartitionValue(other.getPartitionValue());
        }
        if (other.hasPartition()) {
          mergePartition(other.getPartition());
        }
        if (other.hasParameterFqn()) {
          bitField0_ |= 0x00000080;
          parameterFqn_ = other.parameterFqn_;
          onChanged();
        }
        if (other.hasParameterType()) {
          setParameterType(other.getParameterType());
        }
        if (other.hasPartitioningSchema()) {
          bitField0_ |= 0x00000200;
          partitioningSchema_ = other.partitioningSchema_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 tbsIndex = 1;
      private int tbsIndex_ ;
      /**
       * <code>optional uint32 tbsIndex = 1;</code>
       */
      public boolean hasTbsIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 tbsIndex = 1;</code>
       */
      public int getTbsIndex() {
        return tbsIndex_;
      }
      /**
       * <code>optional uint32 tbsIndex = 1;</code>
       */
      public Builder setTbsIndex(int value) {
        bitField0_ |= 0x00000001;
        tbsIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 tbsIndex = 1;</code>
       */
      public Builder clearTbsIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tbsIndex_ = 0;
        onChanged();
        return this;
      }

      // optional .TablespaceRecord.Type type = 2;
      private org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type type_ = org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type.TABLE_PARTITION;
      /**
       * <code>optional .TablespaceRecord.Type type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .TablespaceRecord.Type type = 2;</code>
       */
      public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type getType() {
        return type_;
      }
      /**
       * <code>optional .TablespaceRecord.Type type = 2;</code>
       */
      public Builder setType(org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .TablespaceRecord.Type type = 2;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = org.yamcs.yarch.rocksdb.protobuf.Tablespace.TablespaceRecord.Type.TABLE_PARTITION;
        onChanged();
        return this;
      }

      // optional string instanceName = 3;
      private java.lang.Object instanceName_ = "";
      /**
       * <code>optional string instanceName = 3;</code>
       *
       * <pre>
       * used for all record types
       *if not specified then instanceName = tablespaceName
       * </pre>
       */
      public boolean hasInstanceName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string instanceName = 3;</code>
       *
       * <pre>
       * used for all record types
       *if not specified then instanceName = tablespaceName
       * </pre>
       */
      public java.lang.String getInstanceName() {
        java.lang.Object ref = instanceName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          instanceName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string instanceName = 3;</code>
       *
       * <pre>
       * used for all record types
       *if not specified then instanceName = tablespaceName
       * </pre>
       */
      public com.google.protobuf.ByteString
          getInstanceNameBytes() {
        java.lang.Object ref = instanceName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instanceName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string instanceName = 3;</code>
       *
       * <pre>
       * used for all record types
       *if not specified then instanceName = tablespaceName
       * </pre>
       */
      public Builder setInstanceName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        instanceName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string instanceName = 3;</code>
       *
       * <pre>
       * used for all record types
       *if not specified then instanceName = tablespaceName
       * </pre>
       */
      public Builder clearInstanceName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        instanceName_ = getDefaultInstance().getInstanceName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string instanceName = 3;</code>
       *
       * <pre>
       * used for all record types
       *if not specified then instanceName = tablespaceName
       * </pre>
       */
      public Builder setInstanceNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        instanceName_ = value;
        onChanged();
        return this;
      }

      // optional string tableName = 4;
      private java.lang.Object tableName_ = "";
      /**
       * <code>optional string tableName = 4;</code>
       *
       * <pre>
       *used for TABLE_PARTITION and HISTOGRAM
       * </pre>
       */
      public boolean hasTableName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string tableName = 4;</code>
       *
       * <pre>
       *used for TABLE_PARTITION and HISTOGRAM
       * </pre>
       */
      public java.lang.String getTableName() {
        java.lang.Object ref = tableName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          tableName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string tableName = 4;</code>
       *
       * <pre>
       *used for TABLE_PARTITION and HISTOGRAM
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTableNameBytes() {
        java.lang.Object ref = tableName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tableName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string tableName = 4;</code>
       *
       * <pre>
       *used for TABLE_PARTITION and HISTOGRAM
       * </pre>
       */
      public Builder setTableName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        tableName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string tableName = 4;</code>
       *
       * <pre>
       *used for TABLE_PARTITION and HISTOGRAM
       * </pre>
       */
      public Builder clearTableName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        tableName_ = getDefaultInstance().getTableName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string tableName = 4;</code>
       *
       * <pre>
       *used for TABLE_PARTITION and HISTOGRAM
       * </pre>
       */
      public Builder setTableNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        tableName_ = value;
        onChanged();
        return this;
      }

      // optional string histogramColumnName = 5;
      private java.lang.Object histogramColumnName_ = "";
      /**
       * <code>optional string histogramColumnName = 5;</code>
       *
       * <pre>
       *used for HISTOGRAM 
       * </pre>
       */
      public boolean hasHistogramColumnName() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string histogramColumnName = 5;</code>
       *
       * <pre>
       *used for HISTOGRAM 
       * </pre>
       */
      public java.lang.String getHistogramColumnName() {
        java.lang.Object ref = histogramColumnName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          histogramColumnName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string histogramColumnName = 5;</code>
       *
       * <pre>
       *used for HISTOGRAM 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHistogramColumnNameBytes() {
        java.lang.Object ref = histogramColumnName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          histogramColumnName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string histogramColumnName = 5;</code>
       *
       * <pre>
       *used for HISTOGRAM 
       * </pre>
       */
      public Builder setHistogramColumnName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        histogramColumnName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string histogramColumnName = 5;</code>
       *
       * <pre>
       *used for HISTOGRAM 
       * </pre>
       */
      public Builder clearHistogramColumnName() {
        bitField0_ = (bitField0_ & ~0x00000010);
        histogramColumnName_ = getDefaultInstance().getHistogramColumnName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string histogramColumnName = 5;</code>
       *
       * <pre>
       *used for HISTOGRAM 
       * </pre>
       */
      public Builder setHistogramColumnNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        histogramColumnName_ = value;
        onChanged();
        return this;
      }

      // optional bytes partitionValue = 6;
      private com.google.protobuf.ByteString partitionValue_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes partitionValue = 6;</code>
       *
       * <pre>
       * used for TABLE_PARTITION: if partitioned by value - the value
       * </pre>
       */
      public boolean hasPartitionValue() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bytes partitionValue = 6;</code>
       *
       * <pre>
       * used for TABLE_PARTITION: if partitioned by value - the value
       * </pre>
       */
      public com.google.protobuf.ByteString getPartitionValue() {
        return partitionValue_;
      }
      /**
       * <code>optional bytes partitionValue = 6;</code>
       *
       * <pre>
       * used for TABLE_PARTITION: if partitioned by value - the value
       * </pre>
       */
      public Builder setPartitionValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        partitionValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes partitionValue = 6;</code>
       *
       * <pre>
       * used for TABLE_PARTITION: if partitioned by value - the value
       * </pre>
       */
      public Builder clearPartitionValue() {
        bitField0_ = (bitField0_ & ~0x00000020);
        partitionValue_ = getDefaultInstance().getPartitionValue();
        onChanged();
        return this;
      }

      // optional .TimeBasedPartition partition = 7;
      private org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition partition_ = org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition, org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.Builder, org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartitionOrBuilder> partitionBuilder_;
      /**
       * <code>optional .TimeBasedPartition partition = 7;</code>
       *
       * <pre>
       * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
       *  - partitionDir is subdirectory name (usually something like 2017/11)
       *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
       * </pre>
       */
      public boolean hasPartition() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .TimeBasedPartition partition = 7;</code>
       *
       * <pre>
       * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
       *  - partitionDir is subdirectory name (usually something like 2017/11)
       *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
       * </pre>
       */
      public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition getPartition() {
        if (partitionBuilder_ == null) {
          return partition_;
        } else {
          return partitionBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .TimeBasedPartition partition = 7;</code>
       *
       * <pre>
       * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
       *  - partitionDir is subdirectory name (usually something like 2017/11)
       *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
       * </pre>
       */
      public Builder setPartition(org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition value) {
        if (partitionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          partition_ = value;
          onChanged();
        } else {
          partitionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .TimeBasedPartition partition = 7;</code>
       *
       * <pre>
       * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
       *  - partitionDir is subdirectory name (usually something like 2017/11)
       *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
       * </pre>
       */
      public Builder setPartition(
          org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.Builder builderForValue) {
        if (partitionBuilder_ == null) {
          partition_ = builderForValue.build();
          onChanged();
        } else {
          partitionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .TimeBasedPartition partition = 7;</code>
       *
       * <pre>
       * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
       *  - partitionDir is subdirectory name (usually something like 2017/11)
       *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
       * </pre>
       */
      public Builder mergePartition(org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition value) {
        if (partitionBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              partition_ != org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.getDefaultInstance()) {
            partition_ =
              org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.newBuilder(partition_).mergeFrom(value).buildPartial();
          } else {
            partition_ = value;
          }
          onChanged();
        } else {
          partitionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .TimeBasedPartition partition = 7;</code>
       *
       * <pre>
       * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
       *  - partitionDir is subdirectory name (usually something like 2017/11)
       *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
       * </pre>
       */
      public Builder clearPartition() {
        if (partitionBuilder_ == null) {
          partition_ = org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.getDefaultInstance();
          onChanged();
        } else {
          partitionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .TimeBasedPartition partition = 7;</code>
       *
       * <pre>
       * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
       *  - partitionDir is subdirectory name (usually something like 2017/11)
       *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
       * </pre>
       */
      public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.Builder getPartitionBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getPartitionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .TimeBasedPartition partition = 7;</code>
       *
       * <pre>
       * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
       *  - partitionDir is subdirectory name (usually something like 2017/11)
       *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
       * </pre>
       */
      public org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartitionOrBuilder getPartitionOrBuilder() {
        if (partitionBuilder_ != null) {
          return partitionBuilder_.getMessageOrBuilder();
        } else {
          return partition_;
        }
      }
      /**
       * <code>optional .TimeBasedPartition partition = 7;</code>
       *
       * <pre>
       * used for TABLE_PARTITION, HISTOGRAM: if partition by time 
       *  - partitionDir is subdirectory name (usually something like 2017/11)
       *  - partitionStart/End are the times representing partition start(inclusive) and end (exclusive)
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition, org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.Builder, org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartitionOrBuilder> 
          getPartitionFieldBuilder() {
        if (partitionBuilder_ == null) {
          partitionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition, org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartition.Builder, org.yamcs.yarch.rocksdb.protobuf.Tablespace.TimeBasedPartitionOrBuilder>(
                  partition_,
                  getParentForChildren(),
                  isClean());
          partition_ = null;
        }
        return partitionBuilder_;
      }

      // optional string parameterFqn = 8;
      private java.lang.Object parameterFqn_ = "";
      /**
       * <code>optional string parameterFqn = 8;</code>
       *
       * <pre>
       *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
       *tbsIndex is the parameter id 
       *parameterType is a number assigned to (rawType,engType) combination
       *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
       * </pre>
       */
      public boolean hasParameterFqn() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string parameterFqn = 8;</code>
       *
       * <pre>
       *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
       *tbsIndex is the parameter id 
       *parameterType is a number assigned to (rawType,engType) combination
       *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
       * </pre>
       */
      public java.lang.String getParameterFqn() {
        java.lang.Object ref = parameterFqn_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          parameterFqn_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string parameterFqn = 8;</code>
       *
       * <pre>
       *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
       *tbsIndex is the parameter id 
       *parameterType is a number assigned to (rawType,engType) combination
       *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
       * </pre>
       */
      public com.google.protobuf.ByteString
          getParameterFqnBytes() {
        java.lang.Object ref = parameterFqn_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          parameterFqn_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string parameterFqn = 8;</code>
       *
       * <pre>
       *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
       *tbsIndex is the parameter id 
       *parameterType is a number assigned to (rawType,engType) combination
       *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
       * </pre>
       */
      public Builder setParameterFqn(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        parameterFqn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string parameterFqn = 8;</code>
       *
       * <pre>
       *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
       *tbsIndex is the parameter id 
       *parameterType is a number assigned to (rawType,engType) combination
       *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
       * </pre>
       */
      public Builder clearParameterFqn() {
        bitField0_ = (bitField0_ & ~0x00000080);
        parameterFqn_ = getDefaultInstance().getParameterFqn();
        onChanged();
        return this;
      }
      /**
       * <code>optional string parameterFqn = 8;</code>
       *
       * <pre>
       *used by the PARCHIVE_DATA to associate parameter ids to (parameter qualified  name, parameterType)
       *tbsIndex is the parameter id 
       *parameterType is a number assigned to (rawType,engType) combination
       *parameterFqn is the parameter fully qualified name (something like /system/subsystem1/subsystem2/paraName)
       * </pre>
       */
      public Builder setParameterFqnBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        parameterFqn_ = value;
        onChanged();
        return this;
      }

      // optional uint32 parameterType = 9;
      private int parameterType_ ;
      /**
       * <code>optional uint32 parameterType = 9;</code>
       */
      public boolean hasParameterType() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 parameterType = 9;</code>
       */
      public int getParameterType() {
        return parameterType_;
      }
      /**
       * <code>optional uint32 parameterType = 9;</code>
       */
      public Builder setParameterType(int value) {
        bitField0_ |= 0x00000100;
        parameterType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 parameterType = 9;</code>
       */
      public Builder clearParameterType() {
        bitField0_ = (bitField0_ & ~0x00000100);
        parameterType_ = 0;
        onChanged();
        return this;
      }

      // optional string partitioningSchema = 10;
      private java.lang.Object partitioningSchema_ = "";
      /**
       * <code>optional string partitioningSchema = 10;</code>
       *
       * <pre>
       *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
       * </pre>
       */
      public boolean hasPartitioningSchema() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional string partitioningSchema = 10;</code>
       *
       * <pre>
       *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
       * </pre>
       */
      public java.lang.String getPartitioningSchema() {
        java.lang.Object ref = partitioningSchema_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          partitioningSchema_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string partitioningSchema = 10;</code>
       *
       * <pre>
       *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPartitioningSchemaBytes() {
        java.lang.Object ref = partitioningSchema_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          partitioningSchema_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string partitioningSchema = 10;</code>
       *
       * <pre>
       *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
       * </pre>
       */
      public Builder setPartitioningSchema(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        partitioningSchema_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string partitioningSchema = 10;</code>
       *
       * <pre>
       *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
       * </pre>
       */
      public Builder clearPartitioningSchema() {
        bitField0_ = (bitField0_ & ~0x00000200);
        partitioningSchema_ = getDefaultInstance().getPartitioningSchema();
        onChanged();
        return this;
      }
      /**
       * <code>optional string partitioningSchema = 10;</code>
       *
       * <pre>
       *partitioning schema used currently for parameter archive (for tables is stored in the .def file)
       * </pre>
       */
      public Builder setPartitioningSchemaBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        partitioningSchema_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TablespaceRecord)
    }

    static {
      defaultInstance = new TablespaceRecord(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:TablespaceRecord)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_TimeBasedPartition_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_TimeBasedPartition_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_TablespaceRecord_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_TablespaceRecord_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020tablespace.proto\"X\n\022TimeBasedPartition" +
      "\022\024\n\014partitionDir\030\001 \001(\t\022\026\n\016partitionStart" +
      "\030\002 \001(\003\022\024\n\014partitionEnd\030\003 \001(\003\"\215\003\n\020Tablesp" +
      "aceRecord\022\020\n\010tbsIndex\030\001 \001(\r\022$\n\004type\030\002 \001(" +
      "\0162\026.TablespaceRecord.Type\022\024\n\014instanceNam" +
      "e\030\003 \001(\t\022\021\n\ttableName\030\004 \001(\t\022\033\n\023histogramC" +
      "olumnName\030\005 \001(\t\022\026\n\016partitionValue\030\006 \001(\014\022" +
      "&\n\tpartition\030\007 \001(\0132\023.TimeBasedPartition\022" +
      "\024\n\014parameterFqn\030\010 \001(\t\022\025\n\rparameterType\030\t" +
      " \001(\r\022\032\n\022partitioningSchema\030\n \001(\t\"r\n\004Type",
      "\022\023\n\017TABLE_PARTITION\020\001\022\r\n\tHISTOGRAM\020\002\022\024\n\020" +
      "PARCHIVE_PGID2PG\020\004\022\021\n\rPARCHIVE_DATA\020\005\022\022\n" +
      "\016PARCHIVE_PINFO\020\006\022\t\n\005TAGDB\020\007B\"\n org.yamc" +
      "s.yarch.rocksdb.protobuf"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_TimeBasedPartition_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_TimeBasedPartition_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_TimeBasedPartition_descriptor,
              new java.lang.String[] { "PartitionDir", "PartitionStart", "PartitionEnd", });
          internal_static_TablespaceRecord_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_TablespaceRecord_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_TablespaceRecord_descriptor,
              new java.lang.String[] { "TbsIndex", "Type", "InstanceName", "TableName", "HistogramColumnName", "PartitionValue", "Partition", "ParameterFqn", "ParameterType", "PartitioningSchema", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
