<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="org.apache.calcite.linq4j.test.OptimizerTest" time="0.086" tests="80" errors="0" skipped="0" failures="0">
  <properties>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="sun.cpu.isalist" value=""/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/root/workspace/apache/calcite/386002995/linq4j/target/test-classes:/root/workspace/apache/calcite/386002995/linq4j/target/classes:/root/./workspace/apache/calcite/386002995/.m2/com/google/guava/guava/19.0/guava-19.0.jar:/root/./workspace/apache/calcite/386002995/.m2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/root/./workspace/apache/calcite/386002995/.m2/junit/junit/4.12/junit-4.12.jar:"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="skip.bower" value="true"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="user.timezone" value=""/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="os.name" value="Linux"/>
    <property name="rat.skip" value="true"/>
    <property name="gpg.skip" value="true"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64"/>
    <property name="skip.gulp" value="true"/>
    <property name="sun.java.command" value="/root/workspace/apache/calcite/386002995/linq4j/target/surefire/surefirebooter6628336681999069880.jar /root/workspace/apache/calcite/386002995/linq4j/target/surefire 2018-05-31T05-56-18_575-jvmRun1 surefire4787320810290952739tmp surefire_01247785580576166530tmp"/>
    <property name="dependency-check.skip" value="true"/>
    <property name="surefire.test.class.path" value="/root/workspace/apache/calcite/386002995/linq4j/target/test-classes:/root/workspace/apache/calcite/386002995/linq4j/target/classes:/root/./workspace/apache/calcite/386002995/.m2/com/google/guava/guava/19.0/guava-19.0.jar:/root/./workspace/apache/calcite/386002995/.m2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/root/./workspace/apache/calcite/386002995/.m2/junit/junit/4.12/junit-4.12.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/root"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.home" value="/usr/lib/jvm/java-8-openjdk-amd64/jre"/>
    <property name="basedir" value="/root/workspace/apache/calcite/386002995/linq4j"/>
    <property name="file.separator" value="/"/>
    <property name="checkstyle.skip" value="true"/>
    <property name="line.separator" value="&#10;"/>
    <property name="skip.npm" value="true"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="skipITs" value="true"/>
    <property name="surefire.real.class.path" value="/root/workspace/apache/calcite/386002995/linq4j/target/surefire/surefirebooter6628336681999069880.jar"/>
    <property name="cobertura.skip" value="true"/>
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="1.8.0_121-8u121-b13-1~bpo8+1-b13"/>
    <property name="user.name" value="root"/>
    <property name="findbugs.skip" value="true"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="3.10.0-862.2.3.el7.x86_64"/>
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="localRepository" value="/root/./workspace/apache/calcite/386002995/.m2"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="java.version" value="1.8.0_121"/>
    <property name="user.dir" value="/root/workspace/apache/calcite/386002995/linq4j"/>
    <property name="os.arch" value="amd64"/>
    <property name="license.skip" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="25.121-b13"/>
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="maven.repo.local" value="/root/./workspace/apache/calcite/386002995/.m2"/>
    <property name="enforcer.skip" value="true"/>
    <property name="java.class.version" value="52.0"/>
  </properties>
  <testcase name="testConditionalIfTrue" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.026"/>
  <testcase name="testAndAlsoBoolTrue" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.03"/>
  <testcase name="testNotEqualPrimitiveNull" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.004"/>
  <testcase name="testNotFalse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.003"/>
  <testcase name="testOptimizeTernaryAlwaysTrue" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOptimizeTernaryAlwaysSame" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testEqualTypedNullUntypedNull" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.007"/>
  <testcase name="testOrElseNullBool" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.002"/>
  <testcase name="testEqualObjectNull" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.009"/>
  <testcase name="testEqualSameExpr" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testEqualBoolTrue" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.009"/>
  <testcase name="testOptimizeTernaryAtrueNull" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testAndAlsoNullBool" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.006"/>
  <testcase name="testEqualPrimitiveNull" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testNotEqualDifferentExpr" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testOptimizeTernaryRotateNot" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.002"/>
  <testcase name="testAndAlsoFalseBool" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.013"/>
  <testcase name="testOptimizeTernaryRotateEqualFalse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOptimizeTernaryInEqualABCneqC" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.002"/>
  <testcase name="testOptimizeTernaryInEqualABCneqB" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.003"/>
  <testcase name="testNotGt" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testCastIntToLong" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testNotEqualObjectNull" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testNotLt" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.012"/>
  <testcase name="testNotEqualBoolFalse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testAssign2" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testEqualDifferentExpr" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="booleanValueOfTrue" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testNotEqualDifferentConst" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testConditionalIfFalse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOptimizeComparison" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testEqualDifferentConst" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOptimizeTernaryABtrue" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.006"/>
  <testcase name="testCastIntToShort" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOptimizeTernaryAeqBAB" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOptimizeTernaryAeqBBA" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOptimizeTernaryAtrueB" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testEqualStringNull" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testConditionalIfTrueElse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testOptimizeTernaryInEqualABCeqB" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOptimizeTernaryInEqualABCeqC" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testEqualUnypedNullTypedNull" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testNotEqualStringNull" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testConditionalIfBoolTrue" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testEqualBoolFalse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testBooleanValueOfFalse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOptimizeTernaryABfalse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testAndAlsoXX" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testAndAlsoXY" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testNotEqualUnypedNullTypedNull" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOptimizeTernaryAtrueBoxed" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testConditionalIfBoolFalseElse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testConditionalIfBoolFalseTrue" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOrElseXX" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOrElseXY" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testConditionalIfBoolTrueElse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testNotEq" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testCastIntToInt" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testNotEqualTypedNullUntypedNull" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.005"/>
  <testcase name="testMultipleFolding" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testAssign" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testNotEqualSameExpr" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.002"/>
  <testcase name="testNotEqualBoolTrue" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.003"/>
  <testcase name="testOptimizeTernaryAfalseB" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testNotGte" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testNotLte" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.002"/>
  <testcase name="testNotNeq" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testEqualSameConst" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOptimizeTernaryAneqBAB" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testOptimizeTernaryAneqBBA" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testNotNotA" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testNotTrue" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testConditionalIfBoolFalse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testOrElseTrueBool" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.005"/>
  <testcase name="testNotEqualSameConst" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0"/>
  <testcase name="testNonOptimizableTernary" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.003"/>
  <testcase name="testConditionalIfFalseElse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testOrElseFalseBool" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testOptimizeTernaryAlwaysFalse" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.001"/>
  <testcase name="testAndAlsoTrueBool" classname="org.apache.calcite.linq4j.test.OptimizerTest" time="0.002"/>
</testsuite>