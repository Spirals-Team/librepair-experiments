{
  "@type": "job",
  "@href": "/v3/job/316678634",
  "@representation": "standard",
  "@permissions": {
    "read": true,
    "delete_log": false,
    "debug": false,
    "cancel": false,
    "restart": false
  },
  "id": 316678634,
  "allow_failure": false,
  "number": "5295.1",
  "state": "failed",
  "started_at": "2017-12-14T23:18:49Z",
  "finished_at": "2017-12-14T23:40:10Z",
  "build": {
    "@type": "build",
    "@href": "/v3/build/316678633",
    "@representation": "minimal",
    "id": 316678633,
    "number": "5295",
    "state": "failed",
    "duration": 1281,
    "event_type": "push",
    "previous_state": "errored",
    "pull_request_title": null,
    "pull_request_number": null,
    "started_at": "2017-12-14T23:18:49Z",
    "finished_at": "2017-12-14T23:40:10Z",
    "private": false
  },
  "queue": "builds.gce",
  "repository": {
    "@type": "repository",
    "@href": "/v3/repo/3825026",
    "@representation": "minimal",
    "id": 3825026,
    "name": "CorfuDB",
    "slug": "CorfuDB/CorfuDB"
  },
  "commit": {
    "@type": "commit",
    "@representation": "minimal",
    "id": 94064959,
    "sha": "05b9e2691038b66445e2a57ac3533805e032e0c6",
    "ref": "refs/heads/openRace",
    "message": "Object Open Race\n\nWhen an object is opened, it is added to the cache right after\nits creation, as a consequence other threads can retreive the object\nfrom the object cache after its creation and before additional\ninitialization. For example, register index. This patch moves\nthe extra initialization into an atomic operation (i.e. computeIfAbsent.",
    "compare_url": "https://github.com/CorfuDB/CorfuDB/compare/d63fb2214efd...05b9e2691038",
    "committed_at": "2017-12-14T23:18:32Z"
  },
  "owner": {
    "@type": "organization",
    "@href": "/v3/org/113632",
    "@representation": "minimal",
    "id": 113632,
    "login": "CorfuDB"
  },
  "stage": null,
  "created_at": "2017-12-14T23:18:16.489Z",
  "updated_at": "2018-06-03T17:27:45.549Z",
  "private": false
}