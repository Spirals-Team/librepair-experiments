{
  "@type": "job",
  "@href": "/v3/job/231227525",
  "@representation": "standard",
  "@permissions": {
    "read": true,
    "delete_log": false,
    "debug": false,
    "cancel": false,
    "restart": false
  },
  "id": 231227525,
  "allow_failure": false,
  "number": "3184.1",
  "state": "failed",
  "started_at": "2017-05-11T16:28:34Z",
  "finished_at": "2017-05-11T16:30:08Z",
  "build": {
    "@type": "build",
    "@href": "/v3/build/231227524",
    "@representation": "minimal",
    "id": 231227524,
    "number": "3184",
    "state": "failed",
    "duration": 94,
    "event_type": "push",
    "previous_state": null,
    "pull_request_title": null,
    "pull_request_number": null,
    "started_at": "2017-05-11T16:28:34Z",
    "finished_at": "2017-05-11T16:30:08Z",
    "private": false
  },
  "queue": "builds.docker",
  "repository": {
    "@type": "repository",
    "@href": "/v3/repo/78264",
    "@representation": "minimal",
    "id": 78264,
    "name": "retrofit",
    "slug": "square/retrofit"
  },
  "commit": {
    "@type": "commit",
    "@representation": "minimal",
    "id": 66923406,
    "sha": "623d7cd2ad7f1bf361bce14995fa5489fe1d815c",
    "ref": "refs/heads/jw/2017-05-11/error-city",
    "message": "Explicitly handle wrapped, re-thrown exceptions from onComplete, onError.\n\nBecause Exceptions.throwIfFatal treats these as fatal, prior to this they would bubble up to the caller. This is either the thread uncaught exception handler which is fine, but in the case of async sources it would go to the library code invoking the async callback (like OkHttp's Call) which might swallow them.",
    "compare_url": "https://github.com/square/retrofit/commit/623d7cd2ad7f",
    "committed_at": "2017-05-11T16:28:15Z"
  },
  "owner": {
    "@type": "organization",
    "@href": "/v3/org/1106",
    "@representation": "minimal",
    "id": 1106,
    "login": "square"
  },
  "stage": null,
  "created_at": "2017-05-11T16:28:29.460Z",
  "updated_at": "2018-06-02T10:50:44.621Z",
  "private": false
}