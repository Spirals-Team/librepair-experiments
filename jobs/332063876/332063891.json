{
  "@type": "job",
  "@href": "/v3/job/332063891",
  "@representation": "standard",
  "@permissions": {
    "read": true,
    "delete_log": false,
    "debug": false,
    "cancel": false,
    "restart": false
  },
  "id": 332063891,
  "allow_failure": false,
  "number": "28699.11",
  "state": "passed",
  "started_at": "2018-01-22T23:37:42Z",
  "finished_at": "2018-01-23T00:04:05Z",
  "build": {
    "@type": "build",
    "@href": "/v3/build/332063876",
    "@representation": "minimal",
    "id": 332063876,
    "number": "28699",
    "state": "failed",
    "duration": 20296,
    "event_type": "pull_request",
    "previous_state": "passed",
    "pull_request_title": "On branch improve-histogram-memory-usage",
    "pull_request_number": 8918,
    "started_at": "2018-01-22T23:37:37Z",
    "finished_at": "2018-01-23T00:32:17Z",
    "private": false
  },
  "queue": "builds.gce",
  "repository": {
    "@type": "repository",
    "@href": "/v3/repo/1504827",
    "@representation": "minimal",
    "id": 1504827,
    "name": "presto",
    "slug": "prestodb/presto"
  },
  "commit": {
    "@type": "commit",
    "@representation": "minimal",
    "id": 98662184,
    "sha": "eb4b73a4acbf816d7af3d67d1aa8676b78badf9b",
    "ref": "refs/pull/8918/merge",
    "message": "Improve Histogram Memory Usage in Group-By Case\n\nCurrently, an array of histogram objects per group-by-id is kept. This\nis inefficient for two major reasons:\n\n1. there is a large # of java objects and incur overhead. Inside\nthe histogram implementation, collections like LongBigArray or\nIntBigArray are used which have minimize sizes in the 100-200+ byte\nranges. Histograms with a single item, or a few, still incur this\npenalty.\n\n2. across group-by-ids, there may be the same value multiple times.\n\n* anecdotal analysis showed we do have group-by histograms that have\nfew values\n** after implementation, we found with yourkit that use cases that\nwere holding 1 gb of ram dropped to 45mb of ram.\n*** profiling with JMH showed that the new version was equal to or\nbetter than the old version\n\nwhat:\n\nThe solution here is to build a single object that includes the\ngroup-by-id in the key within an internal hash table. There are\nmany details to support the appearance of a single histogram\nper group-by table both for transfer when doing intermediate\ncombining, as well as final output. See GroupedTypedHistogram for\nthe details. In short, this reduces the # of java objects to a constant\nnumber. Values are also stored once in another custom hash\nimplementation.\n\nWe also found that changing the probe function from linear to\n\"sum of square\" (sort of super-quadratic) performed better testing\nwith JMH.\n\nThis has also introduced a new config variable, or rather used one\nfrom a previous commit, that allows legacy (existing behavior) or\nthe new one. We default to the new behavior, but allow rollback\nto the old behavior in case of some unexpected failure.\n\nFuture work for readability, private inner classes were introduced.\nThese don't appear to have affected perf (per JMH), but JFR confirms\nthey aren't elided by the JVM. This is an opportunity to improve perf\n(causes 4.5% of gc pressure in some testing).",
    "compare_url": "https://github.com/prestodb/presto/pull/8918",
    "committed_at": "2018-01-22T23:27:25Z"
  },
  "owner": {
    "@type": "organization",
    "@href": "/v3/org/61142",
    "@representation": "minimal",
    "id": 61142,
    "login": "prestodb"
  },
  "stage": null,
  "created_at": "2018-01-22T23:37:05.797Z",
  "updated_at": "2018-06-03T23:36:47.376Z",
  "private": false
}