{
  "@type": "job",
  "@href": "/v3/job/276539068",
  "@representation": "standard",
  "@permissions": {
    "read": true,
    "delete_log": false,
    "debug": false,
    "cancel": false,
    "restart": false
  },
  "id": 276539068,
  "allow_failure": false,
  "number": "2396.9",
  "state": "passed",
  "started_at": "2017-09-17T15:49:35Z",
  "finished_at": "2017-09-17T16:06:56Z",
  "build": {
    "@type": "build",
    "@href": "/v3/build/276539059",
    "@representation": "minimal",
    "id": 276539059,
    "number": "2396",
    "state": "failed",
    "duration": 9165,
    "event_type": "pull_request",
    "previous_state": "passed",
    "pull_request_title": "feat: add support for range types",
    "pull_request_number": 947,
    "started_at": "2017-09-17T15:40:25Z",
    "finished_at": "2017-09-17T16:18:41Z",
    "private": false
  },
  "queue": "builds.gce",
  "repository": {
    "@type": "repository",
    "@href": "/v3/repo/2089612",
    "@representation": "minimal",
    "id": 2089612,
    "name": "pgjdbc",
    "slug": "pgjdbc/pgjdbc"
  },
  "commit": {
    "@type": "commit",
    "@representation": "minimal",
    "id": 80600630,
    "sha": "edafadd1f1410dab6eb3f32c7c18ab9e57f699e9",
    "ref": "refs/pull/947/merge",
    "message": "feat: add support for range types\n\nRange types are unique to Postgres and is very powerful. Unfortunately\ndriver support from pgjdbc is currently lacking and forcing users to\nparse and create strings.\n\nThis pull request is a first step towards full range type support in\npgjdbc. It adds support for the int4range, int8range and numrange types\nby providing dedicated PGobject subclasses.\nWe break with the traditional design of the PGobject hierarchy and use\nencapsulation through accessors instead of public mutable fields.\n\nThe types tsrange, tstzrange and daterange are currently not yet\nimplemented. Doing with Java 8 Date Time API types would be easy but\nrequire Java 8. Doing them with java.sql types would be tedious and\nsomehow require that we get access to TimestampUtils in\nPGobject.setValue which would require a redesign of the PGobject\nhierarchy.\n\nBinary mode is implemented for int4range and int8range.\n\nOids for int4range, int8range and numrange are registered.\n\nPostgres treats [1,3) and (0,2] as equal for int4range and int8range\nbut the #equals() method in Java currently does not.\n\nThis change should not break backwards compatibility as the new range\ntypes are subtypes of PGobject.\n\nThis a first set to have framework support for range types like\nhttps://github.com/jOOQ/jOOQ/issues/2968",
    "compare_url": "https://github.com/pgjdbc/pgjdbc/pull/947",
    "committed_at": "2017-09-17T15:38:42Z"
  },
  "owner": {
    "@type": "organization",
    "@href": "/v3/org/63358",
    "@representation": "minimal",
    "id": 63358,
    "login": "pgjdbc"
  },
  "stage": null,
  "created_at": "2017-09-17T15:40:20.561Z",
  "updated_at": "2018-06-03T03:28:03.556Z",
  "private": false
}