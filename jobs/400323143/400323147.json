{
  "@type": "job",
  "@href": "/v3/job/400323147",
  "@representation": "standard",
  "@permissions": {
    "read": true,
    "delete_log": false,
    "debug": false,
    "cancel": false,
    "restart": false
  },
  "id": 400323147,
  "allow_failure": false,
  "number": "815.4",
  "state": "failed",
  "started_at": "2018-07-05T09:28:15Z",
  "finished_at": "2018-07-05T10:06:30Z",
  "build": {
    "@type": "build",
    "@href": "/v3/build/400323143",
    "@representation": "minimal",
    "id": 400323143,
    "number": "815",
    "state": "failed",
    "duration": 22423,
    "event_type": "push",
    "previous_state": "passed",
    "pull_request_title": null,
    "pull_request_number": null,
    "started_at": "2018-07-05T09:26:00Z",
    "finished_at": "2018-07-05T10:52:19Z",
    "private": false
  },
  "queue": "builds.gce",
  "repository": {
    "@type": "repository",
    "@href": "/v3/repo/10801206",
    "@representation": "minimal",
    "id": 10801206,
    "name": "flink",
    "slug": "NicoK/flink"
  },
  "commit": {
    "@type": "commit",
    "@representation": "minimal",
    "id": 120107603,
    "sha": "d69ff968f8647efa13adcc6f338e411675b36d68",
    "ref": "refs/heads/flink-9676-lbp",
    "message": "[FLINK-9676][network] clarify contracts of BufferListener#notifyBufferAvailable() and fix a deadlock\n\nWhen recycling exclusive buffers of a RemoteInputChannel and recycling\n(other/floating) buffers to the buffer pool concurrently while the\nRemoteInputChannel is registered as a listener to the buffer pool and adding the\nexclusive buffer triggers a floating buffer to be recycled back to the same\nbuffer pool, a deadlock would occur holding locks on\nLocalBufferPool#availableMemorySegments and RemoteInputChannel#bufferQueue but\nacquiring them in reverse order.\n\nOne such instance would be:\n\nTask canceler thread -> RemoteInputChannel1#releaseAllResources -> recycle floating buffers\n\t-> lock(LocalBufferPool#availableMemorySegments) -> RemoteInputChannel2#notifyBufferAvailable\n\t-> try to lock(RemoteInputChannel2#bufferQueue)\n\nTask thread -> RemoteInputChannel2#recycle\n\t-> lock(RemoteInputChannel2#bufferQueue) -> bufferQueue#addExclusiveBuffer -> floatingBuffer#recycleBuffer\n\t-> try to lock(LocalBufferPool#availableMemorySegments)\n\nTherefore, we decouple the listener callback from lock around\nLocalBufferPool#availableMemorySegments and implicitly enforce that\nRemoteInputChannel2#bufferQueue takes precedence over this lock, i.e. must\nbe acquired first and should never be taken after having locked on\nLocalBufferPool#availableMemorySegments.",
    "compare_url": "https://github.com/NicoK/flink/compare/34fb70e57a8b...d69ff968f864",
    "committed_at": null
  },
  "owner": {
    "@type": "user",
    "@href": "/v3/user/323074",
    "@representation": "minimal",
    "id": 323074,
    "login": "NicoK"
  },
  "stage": null,
  "created_at": "2018-07-05T09:11:32.768Z",
  "updated_at": "2018-07-05T10:06:30.905Z",
  "private": false
}