<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.0//EN" "report.dtd"><report name="Eclipse Ditto :: Model :: Thing Search Parser"><sessioninfo id="spirals-vortex.lille.inria.fr-163c9e90" start="1527178582180" dump="1527178586043"/><package name="org/eclipse/ditto/model/thingsearchparser/options/rql"><class name="org/eclipse/ditto/model/thingsearchparser/options/rql/RqlOptionParser"><method name="&lt;init&gt;" desc="()V" line="22"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parse" desc="(Ljava/lang/String;)Ljava/util/List;" line="28"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="24"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="RqlOptionParser.java"><line nr="22" mi="0" ci="3" mb="0" cb="0"/><line nr="24" mi="0" ci="3" mb="0" cb="0"/><line nr="28" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></package><package name="org/eclipse/ditto/model/thingsearchparser/parser"><class name="org/eclipse/ditto/model/thingsearchparser/parser/RqlOptionParser$"><method name="&lt;clinit&gt;" desc="()V"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parse" desc="(Ljava/lang/String;)Ljava/util/List;" line="107"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parseOptions" desc="(Ljava/lang/String;)Ljava/util/List;" line="110"><counter type="INSTRUCTION" missed="7" covered="86"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rqlOptionsParser" desc="(Ljava/lang/String;)Lorg/eclipse/ditto/model/thingsearchparser/parser/RqlOptionParser;" line="118"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="()V" line="97"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="7" covered="105"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="2" covered="7"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/parser/RqlParserBase"><method name="clearSB" desc="()Lorg/parboiled2/Rule;" line="29"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="appendSB" desc="()Lorg/parboiled2/Rule;" line="29"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="appendSB" desc="(I)Lorg/parboiled2/Rule;" line="29"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="appendSB" desc="(C)Lorg/parboiled2/Rule;" line="29"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="appendSB" desc="(Ljava/lang/String;)Lorg/parboiled2/Rule;" line="29"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="prependSB" desc="()Lorg/parboiled2/Rule;" line="29"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="prependSB" desc="(I)Lorg/parboiled2/Rule;" line="29"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="prependSB" desc="(C)Lorg/parboiled2/Rule;" line="29"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="prependSB" desc="(Ljava/lang/String;)Lorg/parboiled2/Rule;" line="29"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setSB" desc="(Ljava/lang/String;)Lorg/parboiled2/Rule;" line="29"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sb" desc="()Ljava/lang/StringBuilder;" line="29"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="org$parboiled2$StringBuilding$_setter_$sb_$eq" desc="(Ljava/lang/StringBuilder;)V" line="29"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="input" desc="()Lorg/parboiled2/ParserInput;" line="29"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="WhiteSpaceChar" desc="()Lorg/parboiled2/CharPredicate;" line="31"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="CommaClosingParenthesisQuote" desc="()Lorg/parboiled2/CharPredicate;" line="32"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="QuoteBackslash" desc="()Lorg/parboiled2/CharPredicate;" line="33"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="QuoteBackslashSlash" desc="()Lorg/parboiled2/CharPredicate;" line="34"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Literal" desc="()Lorg/parboiled2/Rule;" line="36"><counter type="INSTRUCTION" missed="13" covered="256"/><counter type="BRANCH" missed="13" covered="55"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="13" covered="22"/><counter type="METHOD" missed="0" covered="1"/></method><method name="DoubleLiteral" desc="()Lorg/parboiled2/Rule;" line="41"><counter type="INSTRUCTION" missed="1" covered="73"/><counter type="BRANCH" missed="1" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><method name="LongLiteral" desc="()Lorg/parboiled2/Rule;" line="45"><counter type="INSTRUCTION" missed="1" covered="104"/><counter type="BRANCH" missed="1" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="11"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Integer" desc="()Lorg/parboiled2/Rule;" line="49"><counter type="INSTRUCTION" missed="1" covered="83"/><counter type="BRANCH" missed="3" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Digits" desc="()Lorg/parboiled2/Rule;" line="53"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Frac" desc="()Lorg/parboiled2/Rule;" line="57"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="StringLiteral" desc="()Lorg/parboiled2/Rule;" line="61"><counter type="INSTRUCTION" missed="3" covered="67"/><counter type="BRANCH" missed="4" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="8"/><counter type="METHOD" missed="0" covered="1"/></method><method name="PropertyLiteral" desc="()Lorg/parboiled2/Rule;" line="65"><counter type="INSTRUCTION" missed="5" covered="38"/><counter type="BRANCH" missed="5" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="CharactersInQuotes" desc="()Lorg/parboiled2/Rule;" line="69"><counter type="INSTRUCTION" missed="1" covered="19"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Characters" desc="()Lorg/parboiled2/Rule;" line="72"><counter type="INSTRUCTION" missed="1" covered="19"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="NormalCharInQuotes" desc="()Lorg/parboiled2/Rule;" line="76"><counter type="INSTRUCTION" missed="2" covered="70"/><counter type="BRANCH" missed="4" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="NormalChar" desc="()Lorg/parboiled2/Rule;" line="79"><counter type="INSTRUCTION" missed="2" covered="70"/><counter type="BRANCH" missed="4" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="EscapedChar" desc="()Lorg/parboiled2/Rule;" line="83"><counter type="INSTRUCTION" missed="115" covered="109"/><counter type="BRANCH" missed="43" covered="25"/><counter type="LINE" missed="3" covered="5"/><counter type="COMPLEXITY" missed="29" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Unicode" desc="()Lorg/parboiled2/Rule;" line="93"><counter type="INSTRUCTION" missed="134" covered="0"/><counter type="BRANCH" missed="36" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="19" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="WhiteSpace" desc="()Lorg/parboiled2/Rule;" line="98"><counter type="INSTRUCTION" missed="1" covered="19"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ws" desc="(C)Lorg/parboiled2/Rule;" line="102"><counter type="INSTRUCTION" missed="1" covered="34"/><counter type="BRANCH" missed="2" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree2$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree3$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree4$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="13" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree5$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="16" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree1$1" desc="(I)Z" line="36"><counter type="INSTRUCTION" missed="53" covered="29"/><counter type="BRANCH" missed="9" covered="5"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="6" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree7$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree8$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree9$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree10$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree11$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="16" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree6$1" desc="(I)Z" line="36"><counter type="INSTRUCTION" missed="79" covered="16"/><counter type="BRANCH" missed="13" covered="3"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="8" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree12$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree13$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree14$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree15$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="16" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$1" desc="()Z" line="36"><counter type="INSTRUCTION" missed="91" covered="114"/><counter type="BRANCH" missed="12" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="8" covered="10"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree16$1" desc="(I)Z" line="41"><counter type="INSTRUCTION" missed="12" covered="38"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$2" desc="()Z" line="41"><counter type="INSTRUCTION" missed="25" covered="43"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree18$1" desc="()Z" line="45"><counter type="INSTRUCTION" missed="30" covered="4"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree19$1" desc="()Z" line="45"><counter type="INSTRUCTION" missed="30" covered="4"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree17$1" desc="(Lscala/runtime/IntRef;)Z" line="45"><counter type="INSTRUCTION" missed="35" covered="58"/><counter type="BRANCH" missed="3" covered="9"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree20$1" desc="(I)Z" line="45"><counter type="INSTRUCTION" missed="6" covered="23"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$3" desc="()Z" line="45"><counter type="INSTRUCTION" missed="25" covered="54"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree21$1" desc="()Z" line="49"><counter type="INSTRUCTION" missed="4" covered="30"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree22$1" desc="()Z" line="49"><counter type="INSTRUCTION" missed="5" covered="47"/><counter type="BRANCH" missed="3" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$4" desc="()Z" line="49"><counter type="INSTRUCTION" missed="45" covered="105"/><counter type="BRANCH" missed="5" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$1" desc="(J)J" line="53"><counter type="INSTRUCTION" missed="5" covered="55"/><counter type="BRANCH" missed="3" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$5" desc="()Z" line="53"><counter type="INSTRUCTION" missed="18" covered="28"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$2" desc="(J)J" line="53"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$6" desc="()Z" line="57"><counter type="INSTRUCTION" missed="31" covered="52"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree23$1" desc="()Z" line="61"><counter type="INSTRUCTION" missed="7" covered="28"/><counter type="BRANCH" missed="4" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$7" desc="()Z" line="61"><counter type="INSTRUCTION" missed="21" covered="54"/><counter type="BRANCH" missed="3" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$8" desc="()Z" line="65"><counter type="INSTRUCTION" missed="22" covered="34"/><counter type="BRANCH" missed="4" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree24$1" desc="()Z" line="69"><counter type="INSTRUCTION" missed="25" covered="10"/><counter type="BRANCH" missed="8" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$3" desc="(J)J" line="69"><counter type="INSTRUCTION" missed="19" covered="40"/><counter type="BRANCH" missed="3" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$9" desc="()Z" line="69"><counter type="INSTRUCTION" missed="18" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$4" desc="(J)J" line="69"><counter type="INSTRUCTION" missed="1" covered="46"/><counter type="BRANCH" missed="2" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree25$1" desc="()Z" line="72"><counter type="INSTRUCTION" missed="15" covered="20"/><counter type="BRANCH" missed="7" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$5" desc="(J)J" line="72"><counter type="INSTRUCTION" missed="19" covered="40"/><counter type="BRANCH" missed="3" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$10" desc="()Z" line="72"><counter type="INSTRUCTION" missed="18" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$6" desc="(J)J" line="72"><counter type="INSTRUCTION" missed="12" covered="35"/><counter type="BRANCH" missed="6" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree27$1" desc="()Z" line="76"><counter type="INSTRUCTION" missed="30" covered="22"/><counter type="BRANCH" missed="5" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree26$1" desc="(Lscala/runtime/IntRef;)Z" line="76"><counter type="INSTRUCTION" missed="29" covered="33"/><counter type="BRANCH" missed="3" covered="5"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$11" desc="()Z" line="76"><counter type="INSTRUCTION" missed="37" covered="44"/><counter type="BRANCH" missed="8" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="6" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree29$1" desc="()Z" line="79"><counter type="INSTRUCTION" missed="30" covered="22"/><counter type="BRANCH" missed="5" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree28$1" desc="(Lscala/runtime/IntRef;)Z" line="79"><counter type="INSTRUCTION" missed="8" covered="54"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$12" desc="()Z" line="79"><counter type="INSTRUCTION" missed="37" covered="44"/><counter type="BRANCH" missed="8" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="6" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree30$1" desc="(I)Z" line="83"><counter type="INSTRUCTION" missed="70" covered="0"/><counter type="BRANCH" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree31$1" desc="(I)Z" line="83"><counter type="INSTRUCTION" missed="54" covered="0"/><counter type="BRANCH" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree32$1" desc="(I)Z" line="83"><counter type="INSTRUCTION" missed="54" covered="0"/><counter type="BRANCH" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree33$1" desc="(I)Z" line="83"><counter type="INSTRUCTION" missed="54" covered="0"/><counter type="BRANCH" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree34$1" desc="(I)Z" line="83"><counter type="INSTRUCTION" missed="54" covered="0"/><counter type="BRANCH" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree35$1" desc="()Z" line="83"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="wrapped$13" desc="()Z" line="83"><counter type="INSTRUCTION" missed="177" covered="0"/><counter type="BRANCH" missed="20" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="11" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree36$1" desc="()Z" line="93"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree38$1" desc="()Z" line="93"><counter type="INSTRUCTION" missed="52" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree39$1" desc="()Z" line="93"><counter type="INSTRUCTION" missed="52" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree37$1" desc="(I)Z" line="93"><counter type="INSTRUCTION" missed="129" covered="0"/><counter type="BRANCH" missed="26" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="14" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="wrapped$14" desc="()Z" line="93"><counter type="INSTRUCTION" missed="91" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rec$7" desc="(J)J" line="98"><counter type="INSTRUCTION" missed="17" covered="43"/><counter type="BRANCH" missed="7" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$15" desc="()Z" line="98"><counter type="INSTRUCTION" missed="18" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$8" desc="(J)J" line="98"><counter type="INSTRUCTION" missed="9" covered="14"/><counter type="BRANCH" missed="4" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$16" desc="(C)Z" line="102"><counter type="INSTRUCTION" missed="41" covered="31"/><counter type="BRANCH" missed="9" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="7" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lorg/parboiled2/ParserInput;)V" line="29"><counter type="INSTRUCTION" missed="0" covered="63"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2459" covered="2582"/><counter type="BRANCH" missed="451" covered="461"/><counter type="LINE" missed="6" covered="39"/><counter type="COMPLEXITY" missed="322" covered="231"/><counter type="METHOD" missed="29" covered="68"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/parser/RqlPredicateParser"><method name="parse" desc="(Ljava/lang/String;)Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/RootNode;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="input" desc="()Lorg/parboiled2/ParserInput;" line="42"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="PredicateRoot" desc="()Lorg/parboiled2/Rule;" line="47"><counter type="INSTRUCTION" missed="2" covered="45"/><counter type="BRANCH" missed="3" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="3" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Query" desc="()Lorg/parboiled2/Rule;" line="52"><counter type="INSTRUCTION" missed="0" covered="79"/><counter type="BRANCH" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="12"/><counter type="METHOD" missed="0" covered="1"/></method><method name="SingleComparisonOp" desc="()Lorg/parboiled2/Rule;" line="59"><counter type="INSTRUCTION" missed="1" covered="131"/><counter type="BRANCH" missed="4" covered="32"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="4" covered="15"/><counter type="METHOD" missed="0" covered="1"/></method><method name="SingleComparisonName" desc="()Lorg/parboiled2/Rule;" line="72"><counter type="INSTRUCTION" missed="0" covered="107"/><counter type="BRANCH" missed="0" covered="30"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="16"/><counter type="METHOD" missed="0" covered="1"/></method><method name="eq" desc="()Lorg/parboiled2/Rule;" line="75"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ne" desc="()Lorg/parboiled2/Rule;" line="76"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="gt" desc="()Lorg/parboiled2/Rule;" line="77"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ge" desc="()Lorg/parboiled2/Rule;" line="78"><counter type="INSTRUCTION" missed="1" covered="42"/><counter type="BRANCH" missed="1" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lt" desc="()Lorg/parboiled2/Rule;" line="79"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="le" desc="()Lorg/parboiled2/Rule;" line="80"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="like" desc="()Lorg/parboiled2/Rule;" line="81"><counter type="INSTRUCTION" missed="3" covered="58"/><counter type="BRANCH" missed="3" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="3" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="MultiComparisonOp" desc="()Lorg/parboiled2/Rule;" line="86"><counter type="INSTRUCTION" missed="4" covered="103"/><counter type="BRANCH" missed="6" covered="22"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="6" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><method name="MultiComparisonValues" desc="()Lorg/parboiled2/Rule;" line="94"><counter type="INSTRUCTION" missed="5" covered="38"/><counter type="BRANCH" missed="4" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="MultiComparisonName" desc="()Lorg/parboiled2/Rule;" line="101"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="in" desc="()Lorg/parboiled2/Rule;" line="104"><counter type="INSTRUCTION" missed="1" covered="42"/><counter type="BRANCH" missed="1" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="MultiLogicalOp" desc="()Lorg/parboiled2/Rule;" line="110"><counter type="INSTRUCTION" missed="2" covered="106"/><counter type="BRANCH" missed="5" covered="21"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="5" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><method name="MultiLogicalName" desc="()Lorg/parboiled2/Rule;" line="119"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="and" desc="()Lorg/parboiled2/Rule;" line="122"><counter type="INSTRUCTION" missed="2" covered="50"/><counter type="BRANCH" missed="2" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="or" desc="()Lorg/parboiled2/Rule;" line="123"><counter type="INSTRUCTION" missed="1" covered="42"/><counter type="BRANCH" missed="1" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="SingleLogicalOp" desc="()Lorg/parboiled2/Rule;" line="128"><counter type="INSTRUCTION" missed="2" covered="86"/><counter type="BRANCH" missed="4" covered="20"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="4" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><method name="SingleLogicalName" desc="()Lorg/parboiled2/Rule;" line="136"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="not" desc="()Lorg/parboiled2/Rule;" line="139"><counter type="INSTRUCTION" missed="2" covered="50"/><counter type="BRANCH" missed="2" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ExistsOp" desc="()Lorg/parboiled2/Rule;" line="144"><counter type="INSTRUCTION" missed="6" covered="120"/><counter type="BRANCH" missed="8" covered="26"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="8" covered="10"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ComparisonProperty" desc="()Lorg/parboiled2/Rule;" line="149"><counter type="INSTRUCTION" missed="2" covered="18"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="ComparisonValue" desc="()Lorg/parboiled2/Rule;" line="152"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$1" desc="()Z" line="47"><counter type="INSTRUCTION" missed="36" covered="49"/><counter type="BRANCH" missed="9" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="7" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$2" desc="()Z" line="52"><counter type="INSTRUCTION" missed="26" covered="66"/><counter type="BRANCH" missed="4" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree1$1" desc="()Z" line="59"><counter type="INSTRUCTION" missed="4" covered="31"/><counter type="BRANCH" missed="3" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree2$1" desc="()Z" line="59"><counter type="INSTRUCTION" missed="7" covered="28"/><counter type="BRANCH" missed="4" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$3" desc="()Z" line="59"><counter type="INSTRUCTION" missed="40" covered="123"/><counter type="BRANCH" missed="6" covered="24"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="6" covered="10"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$4" desc="()Z" line="72"><counter type="INSTRUCTION" missed="28" covered="92"/><counter type="BRANCH" missed="5" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="9"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$5" desc="()Z" line="75"><counter type="INSTRUCTION" missed="58" covered="68"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$6" desc="()Z" line="76"><counter type="INSTRUCTION" missed="92" covered="34"/><counter type="BRANCH" missed="6" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="4" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$7" desc="()Z" line="77"><counter type="INSTRUCTION" missed="106" covered="20"/><counter type="BRANCH" missed="8" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$8" desc="()Z" line="78"><counter type="INSTRUCTION" missed="106" covered="20"/><counter type="BRANCH" missed="8" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$9" desc="()Z" line="79"><counter type="INSTRUCTION" missed="92" covered="34"/><counter type="BRANCH" missed="6" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="4" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$10" desc="()Z" line="80"><counter type="INSTRUCTION" missed="92" covered="34"/><counter type="BRANCH" missed="6" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="4" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$11" desc="()Z" line="81"><counter type="INSTRUCTION" missed="147" covered="67"/><counter type="BRANCH" missed="11" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="7" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree3$1" desc="()Z" line="86"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="wrapped$12" desc="()Z" line="86"><counter type="INSTRUCTION" missed="113" covered="33"/><counter type="BRANCH" missed="20" covered="6"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="13" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree4$1" desc="()Z" line="94"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rec$1" desc="(JLscala/collection/immutable/VectorBuilder;)J" line="94"><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="wrapped$13" desc="()Z" line="94"><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rec$2" desc="(JLscala/collection/immutable/VectorBuilder;)J" line="94"><counter type="INSTRUCTION" missed="1" covered="35"/><counter type="BRANCH" missed="2" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$14" desc="()Z" line="101"><counter type="INSTRUCTION" missed="13" covered="10"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$15" desc="()Z" line="104"><counter type="INSTRUCTION" missed="106" covered="20"/><counter type="BRANCH" missed="8" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree5$1" desc="()Z" line="110"><counter type="INSTRUCTION" missed="21" covered="14"/><counter type="BRANCH" missed="7" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$3" desc="(JLscala/collection/immutable/VectorBuilder;)J" line="110"><counter type="INSTRUCTION" missed="20" covered="9"/><counter type="BRANCH" missed="4" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree6$1" desc="(I)Z" line="110"><counter type="INSTRUCTION" missed="18" covered="19"/><counter type="BRANCH" missed="3" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$16" desc="()Z" line="110"><counter type="INSTRUCTION" missed="83" covered="41"/><counter type="BRANCH" missed="12" covered="8"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="7" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$4" desc="(JLscala/collection/immutable/VectorBuilder;)J" line="110"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$17" desc="()Z" line="119"><counter type="INSTRUCTION" missed="18" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$18" desc="()Z" line="122"><counter type="INSTRUCTION" missed="114" covered="56"/><counter type="BRANCH" missed="8" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="5" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$19" desc="()Z" line="123"><counter type="INSTRUCTION" missed="81" covered="45"/><counter type="BRANCH" missed="5" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="3" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree7$1" desc="()Z" line="128"><counter type="INSTRUCTION" missed="21" covered="14"/><counter type="BRANCH" missed="7" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$20" desc="()Z" line="128"><counter type="INSTRUCTION" missed="64" covered="63"/><counter type="BRANCH" missed="8" covered="14"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="6" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$21" desc="()Z" line="136"><counter type="INSTRUCTION" missed="11" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$22" desc="()Z" line="139"><counter type="INSTRUCTION" missed="114" covered="56"/><counter type="BRANCH" missed="8" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="5" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree8$1" desc="()Z" line="144"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree9$1" desc="()Z" line="144"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree10$1" desc="()Z" line="144"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree11$1" desc="()Z" line="144"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree12$1" desc="()Z" line="144"><counter type="INSTRUCTION" missed="16" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree13$1" desc="()Z" line="144"><counter type="INSTRUCTION" missed="16" covered="18"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree14$1" desc="()Z" line="144"><counter type="INSTRUCTION" missed="21" covered="14"/><counter type="BRANCH" missed="7" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$23" desc="()Z" line="144"><counter type="INSTRUCTION" missed="64" covered="125"/><counter type="BRANCH" missed="13" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="11" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$24" desc="()Z" line="149"><counter type="INSTRUCTION" missed="12" covered="11"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$25" desc="()Z" line="152"><counter type="INSTRUCTION" missed="11" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lorg/parboiled2/ParserInput;)V" line="42"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2110" covered="2788"/><counter type="BRANCH" missed="278" covered="548"/><counter type="LINE" missed="0" covered="45"/><counter type="COMPLEXITY" missed="215" covered="269"/><counter type="METHOD" missed="9" covered="62"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/parser/RqlPredicateParser$"><method name="&lt;clinit&gt;" desc="()V"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parse" desc="(Ljava/lang/String;)Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/RootNode;" line="170"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parsePredicate" desc="(Ljava/lang/String;)Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/RootNode;" line="173"><counter type="INSTRUCTION" missed="7" covered="93"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="predicateParser" desc="(Ljava/lang/String;)Lorg/eclipse/ditto/model/thingsearchparser/parser/RqlPredicateParser;" line="184"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="()V" line="160"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="7" covered="112"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="2" covered="7"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/parser/RqlOptionParser"><method name="parse" desc="(Ljava/lang/String;)Ljava/util/List;"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="input" desc="()Lorg/parboiled2/ParserInput;" line="36"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="OptionsRoot" desc="()Lorg/parboiled2/Rule;" line="41"><counter type="INSTRUCTION" missed="3" covered="44"/><counter type="BRANCH" missed="4" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="4" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Options" desc="()Lorg/parboiled2/Rule;" line="46"><counter type="INSTRUCTION" missed="0" covered="43"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Option" desc="()Lorg/parboiled2/Rule;" line="53"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Sort" desc="()Lorg/parboiled2/Rule;" line="60"><counter type="INSTRUCTION" missed="4" covered="127"/><counter type="BRANCH" missed="7" covered="25"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="7" covered="10"/><counter type="METHOD" missed="0" covered="1"/></method><method name="SortProperty" desc="()Lorg/parboiled2/Rule;" line="68"><counter type="INSTRUCTION" missed="1" covered="50"/><counter type="BRANCH" missed="1" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="SortOrder" desc="()Lorg/parboiled2/Rule;" line="75"><counter type="INSTRUCTION" missed="0" covered="37"/><counter type="BRANCH" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Asc" desc="()Lorg/parboiled2/Rule;" line="78"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="1" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Desc" desc="()Lorg/parboiled2/Rule;" line="81"><counter type="INSTRUCTION" missed="0" covered="34"/><counter type="BRANCH" missed="1" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="Limit" desc="()Lorg/parboiled2/Rule;" line="88"><counter type="INSTRUCTION" missed="7" covered="146"/><counter type="BRANCH" missed="10" covered="32"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="10" covered="12"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$1" desc="()Z" line="41"><counter type="INSTRUCTION" missed="59" covered="26"/><counter type="BRANCH" missed="14" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="9" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$1" desc="(JLscala/collection/immutable/VectorBuilder;)J" line="46"><counter type="INSTRUCTION" missed="51" covered="9"/><counter type="BRANCH" missed="14" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="8" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$2" desc="()Z" line="46"><counter type="INSTRUCTION" missed="30" covered="26"/><counter type="BRANCH" missed="3" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$2" desc="(JLscala/collection/immutable/VectorBuilder;)J" line="46"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$3" desc="()Z" line="53"><counter type="INSTRUCTION" missed="23" covered="27"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree1$1" desc="()Z" line="60"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree2$1" desc="()Z" line="60"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree3$1" desc="()Z" line="60"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree4$1" desc="()Z" line="60"><counter type="INSTRUCTION" missed="30" covered="4"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree5$1" desc="()Z" line="60"><counter type="INSTRUCTION" missed="21" covered="14"/><counter type="BRANCH" missed="7" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$3" desc="(JLscala/collection/immutable/VectorBuilder;)J" line="60"><counter type="INSTRUCTION" missed="23" covered="37"/><counter type="BRANCH" missed="8" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="6" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree6$1" desc="(I)Z" line="60"><counter type="INSTRUCTION" missed="6" covered="31"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$4" desc="()Z" line="60"><counter type="INSTRUCTION" missed="71" covered="92"/><counter type="BRANCH" missed="12" covered="14"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="9" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="rec$4" desc="(JLscala/collection/immutable/VectorBuilder;)J" line="60"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$5" desc="()Z" line="68"><counter type="INSTRUCTION" missed="25" covered="49"/><counter type="BRANCH" missed="1" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$6" desc="()Z" line="75"><counter type="INSTRUCTION" missed="21" covered="29"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="2" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$7" desc="()Z" line="78"><counter type="INSTRUCTION" missed="36" covered="35"/><counter type="BRANCH" missed="7" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$8" desc="()Z" line="81"><counter type="INSTRUCTION" missed="25" covered="46"/><counter type="BRANCH" missed="4" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree7$1" desc="()Z" line="88"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree8$1" desc="()Z" line="88"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree9$1" desc="()Z" line="88"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree10$1" desc="()Z" line="88"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="liftedTree11$1" desc="()Z" line="88"><counter type="INSTRUCTION" missed="30" covered="4"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree12$1" desc="()Z" line="88"><counter type="INSTRUCTION" missed="21" covered="14"/><counter type="BRANCH" missed="7" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="liftedTree13$1" desc="()Z" line="88"><counter type="INSTRUCTION" missed="7" covered="28"/><counter type="BRANCH" missed="4" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="wrapped$9" desc="()Z" line="88"><counter type="INSTRUCTION" missed="75" covered="129"/><counter type="BRANCH" missed="14" covered="22"/><counter type="LINE" missed="1" covered="2"/><counter type="COMPLEXITY" missed="12" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lorg/parboiled2/ParserInput;)V" line="36"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="811" covered="1223"/><counter type="BRANCH" missed="146" covered="232"/><counter type="LINE" missed="0" covered="20"/><counter type="COMPLEXITY" missed="120" covered="107"/><counter type="METHOD" missed="8" covered="30"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="RqlOptionParser.scala"><line nr="36" mi="0" ci="7" mb="0" cb="0"/><line nr="41" mi="62" ci="70" mb="18" cb="16"/><line nr="46" mi="73" ci="96" mb="16" cb="12"/><line nr="47" mi="8" ci="14" mb="3" cb="5"/><line nr="53" mi="19" ci="40" mb="1" cb="7"/><line nr="54" mi="4" ci="24" mb="2" cb="6"/><line nr="60" mi="230" ci="305" mb="40" cb="48"/><line nr="61" mi="20" ci="26" mb="4" cb="12"/><line nr="62" mi="7" ci="6" mb="0" cb="0"/><line nr="68" mi="23" ci="63" mb="0" cb="12"/><line nr="69" mi="3" ci="36" mb="2" cb="6"/><line nr="75" mi="19" ci="40" mb="1" cb="7"/><line nr="76" mi="2" ci="26" mb="1" cb="7"/><line nr="78" mi="30" ci="63" mb="7" cb="11"/><line nr="79" mi="6" ci="6" mb="1" cb="3"/><line nr="81" mi="21" ci="72" mb="5" cb="13"/><line nr="82" mi="4" ci="8" mb="0" cb="4"/><line nr="88" mi="238" ci="274" mb="38" cb="50"/><line nr="89" mi="26" ci="36" mb="7" cb="13"/><line nr="90" mi="12" ci="11" mb="0" cb="0"/><line nr="97" mi="0" ci="5" mb="0" cb="0"/><line nr="107" mi="0" ci="4" mb="0" cb="0"/><line nr="110" mi="0" ci="4" mb="0" cb="0"/><line nr="111" mi="6" ci="16" mb="1" cb="1"/><line nr="112" mi="0" ci="16" mb="0" cb="2"/><line nr="113" mi="1" ci="32" mb="1" cb="3"/><line nr="114" mi="0" ci="18" mb="0" cb="0"/><line nr="118" mi="0" ci="7" mb="0" cb="0"/><counter type="INSTRUCTION" missed="818" covered="1328"/><counter type="BRANCH" missed="148" covered="238"/><counter type="LINE" missed="0" covered="28"/><counter type="COMPLEXITY" missed="122" covered="114"/><counter type="METHOD" missed="8" covered="35"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="RqlPredicateParser.scala"><line nr="42" mi="0" ci="7" mb="0" cb="0"/><line nr="47" mi="38" ci="94" mb="12" cb="22"/><line nr="52" mi="18" ci="83" mb="0" cb="20"/><line nr="53" mi="8" ci="62" mb="4" cb="16"/><line nr="59" mi="29" ci="217" mb="14" cb="44"/><line nr="60" mi="14" ci="52" mb="2" cb="22"/><line nr="62" mi="1" ci="10" mb="0" cb="0"/><line nr="63" mi="8" ci="18" mb="1" cb="3"/><line nr="64" mi="0" ci="16" mb="0" cb="0"/><line nr="72" mi="18" ci="111" mb="0" cb="28"/><line nr="73" mi="10" ci="88" mb="5" cb="23"/><line nr="75" mi="58" ci="111" mb="2" cb="18"/><line nr="76" mi="92" ci="77" mb="6" cb="14"/><line nr="77" mi="106" ci="63" mb="8" cb="12"/><line nr="78" mi="107" ci="62" mb="9" cb="11"/><line nr="79" mi="92" ci="77" mb="6" cb="14"/><line nr="80" mi="92" ci="77" mb="6" cb="14"/><line nr="81" mi="150" ci="125" mb="14" cb="18"/><line nr="86" mi="106" ci="93" mb="23" cb="21"/><line nr="87" mi="30" ci="28" mb="13" cb="7"/><line nr="89" mi="16" ci="15" mb="0" cb="0"/><line nr="94" mi="121" ci="65" mb="21" cb="9"/><line nr="95" mi="14" ci="8" mb="5" cb="3"/><line nr="101" mi="11" ci="17" mb="0" cb="4"/><line nr="102" mi="2" ci="13" mb="1" cb="3"/><line nr="104" mi="107" ci="62" mb="9" cb="11"/><line nr="110" mi="118" ci="173" mb="23" cb="29"/><line nr="111" mi="16" ci="36" mb="8" cb="12"/><line nr="113" mi="10" ci="9" mb="0" cb="0"/><line nr="119" mi="18" ci="41" mb="0" cb="8"/><line nr="120" mi="0" ci="28" mb="0" cb="8"/><line nr="122" mi="116" ci="106" mb="10" cb="16"/><line nr="123" mi="82" ci="87" mb="6" cb="14"/><line nr="128" mi="64" ci="117" mb="14" cb="26"/><line nr="129" mi="10" ci="34" mb="5" cb="11"/><line nr="130" mi="13" ci="12" mb="0" cb="0"/><line nr="136" mi="11" ci="17" mb="0" cb="4"/><line nr="137" mi="0" ci="15" mb="0" cb="4"/><line nr="139" mi="116" ci="106" mb="10" cb="16"/><line nr="144" mi="234" ci="265" mb="33" cb="43"/><line nr="145" mi="25" ci="30" mb="5" cb="7"/><line nr="149" mi="12" ci="16" mb="1" cb="3"/><line nr="150" mi="2" ci="13" mb="2" cb="2"/><line nr="152" mi="11" ci="17" mb="0" cb="4"/><line nr="153" mi="0" ci="15" mb="0" cb="4"/><line nr="160" mi="0" ci="5" mb="0" cb="0"/><line nr="170" mi="0" ci="4" mb="0" cb="0"/><line nr="173" mi="0" ci="4" mb="0" cb="0"/><line nr="174" mi="6" ci="16" mb="1" cb="1"/><line nr="175" mi="0" ci="11" mb="0" cb="2"/><line nr="176" mi="0" ci="4" mb="0" cb="0"/><line nr="177" mi="0" ci="5" mb="0" cb="0"/><line nr="178" mi="0" ci="3" mb="0" cb="0"/><line nr="179" mi="1" ci="32" mb="1" cb="3"/><line nr="180" mi="0" ci="18" mb="0" cb="0"/><line nr="184" mi="0" ci="7" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2117" covered="2900"/><counter type="BRANCH" missed="280" covered="554"/><counter type="LINE" missed="0" covered="56"/><counter type="COMPLEXITY" missed="217" covered="276"/><counter type="METHOD" missed="9" covered="67"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="RqlParserBase.scala"><line nr="29" mi="27" ci="32" mb="0" cb="0"/><line nr="31" mi="0" ci="18" mb="0" cb="0"/><line nr="32" mi="0" ci="18" mb="0" cb="0"/><line nr="33" mi="0" ci="18" mb="0" cb="0"/><line nr="34" mi="0" ci="9" mb="0" cb="0"/><line nr="36" mi="553" ci="404" mb="57" cb="73"/><line nr="37" mi="14" ci="54" mb="3" cb="13"/><line nr="38" mi="36" ci="32" mb="8" cb="4"/><line nr="41" mi="35" ci="106" mb="0" cb="20"/><line nr="42" mi="3" ci="48" mb="2" cb="10"/><line nr="45" mi="118" ci="213" mb="7" cb="35"/><line nr="46" mi="9" ci="34" mb="2" cb="6"/><line nr="49" mi="41" ci="241" mb="13" cb="43"/><line nr="50" mi="14" ci="24" mb="0" cb="4"/><line nr="53" mi="18" ci="134" mb="6" cb="24"/><line nr="54" mi="5" ci="4" mb="0" cb="0"/><line nr="57" mi="31" ci="70" mb="0" cb="14"/><line nr="58" mi="0" ci="16" mb="0" cb="4"/><line nr="61" mi="21" ci="99" mb="5" cb="25"/><line nr="62" mi="10" ci="50" mb="6" cb="10"/><line nr="65" mi="23" ci="40" mb="5" cb="7"/><line nr="66" mi="4" ci="32" mb="4" cb="4"/><line nr="69" mi="52" ci="107" mb="10" cb="16"/><line nr="70" mi="12" ci="24" mb="4" cb="8"/><line nr="72" mi="47" ci="112" mb="11" cb="15"/><line nr="73" mi="18" ci="18" mb="6" cb="6"/><line nr="76" mi="87" ci="153" mb="18" cb="32"/><line nr="77" mi="11" ci="16" mb="2" cb="2"/><line nr="79" mi="70" ci="170" mb="16" cb="34"/><line nr="80" mi="7" ci="20" mb="2" cb="2"/><line nr="83" mi="458" ci="88" mb="100" cb="20"/><line nr="84" mi="15" ci="8" mb="3" cb="1"/><line nr="85" mi="22" ci="2" mb="7" cb="1"/><line nr="86" mi="22" ci="2" mb="7" cb="1"/><line nr="87" mi="15" ci="9" mb="6" cb="2"/><line nr="88" mi="24" ci="0" mb="8" cb="0"/><line nr="89" mi="24" ci="0" mb="8" cb="0"/><line nr="90" mi="33" ci="0" mb="4" cb="0"/><line nr="93" mi="436" ci="0" mb="94" cb="0"/><line nr="94" mi="44" ci="0" mb="4" cb="0"/><line nr="95" mi="13" ci="0" mb="0" cb="0"/><line nr="98" mi="40" ci="88" mb="12" cb="10"/><line nr="99" mi="5" ci="4" mb="0" cb="0"/><line nr="102" mi="36" ci="49" mb="8" cb="10"/><line nr="103" mi="6" ci="16" mb="3" cb="5"/><counter type="INSTRUCTION" missed="2459" covered="2582"/><counter type="BRANCH" missed="451" covered="461"/><counter type="LINE" missed="6" covered="39"/><counter type="COMPLEXITY" missed="322" covered="231"/><counter type="METHOD" missed="29" covered="68"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="5394" covered="6810"/><counter type="BRANCH" missed="879" covered="1253"/><counter type="LINE" missed="6" covered="123"/><counter type="COMPLEXITY" missed="661" covered="621"/><counter type="METHOD" missed="46" covered="170"/><counter type="CLASS" missed="0" covered="5"/></package><package name="org/eclipse/ditto/model/thingsearchparser/predicates/rql"><class name="org/eclipse/ditto/model/thingsearchparser/predicates/rql/RqlPredicateParser"><method name="&lt;init&gt;" desc="()V" line="21"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="parse" desc="(Ljava/lang/String;)Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/RootNode;" line="27"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="23"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="RqlPredicateParser.java"><line nr="21" mi="0" ci="3" mb="0" cb="0"/><line nr="23" mi="0" ci="3" mb="0" cb="0"/><line nr="27" mi="0" ci="4" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="3"/><counter type="CLASS" missed="0" covered="1"/></package><package name="org/eclipse/ditto/model/thingsearchparser"><class name="org/eclipse/ditto/model/thingsearchparser/ParserException"><method name="&lt;init&gt;" desc="()V" line="25"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/lang/String;)V" line="34"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/lang/Throwable;)V" line="43"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljava/lang/Throwable;)V" line="53"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="11" covered="5"/><counter type="LINE" missed="6" covered="2"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="3" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="ParserException.java"><line nr="25" mi="2" ci="0" mb="0" cb="0"/><line nr="26" mi="1" ci="0" mb="0" cb="0"/><line nr="34" mi="3" ci="0" mb="0" cb="0"/><line nr="35" mi="1" ci="0" mb="0" cb="0"/><line nr="43" mi="3" ci="0" mb="0" cb="0"/><line nr="44" mi="1" ci="0" mb="0" cb="0"/><line nr="53" mi="0" ci="4" mb="0" cb="0"/><line nr="54" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="11" covered="5"/><counter type="LINE" missed="6" covered="2"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="3" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="11" covered="5"/><counter type="LINE" missed="6" covered="2"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="3" covered="1"/><counter type="CLASS" missed="0" covered="1"/></package><package name="org/eclipse/ditto/model/thingsearchparser/predicates/ast"><class name="org/eclipse/ditto/model/thingsearchparser/predicates/ast/SingleComparisonNode"><method name="&lt;init&gt;" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/SingleComparisonNode$Type;Ljava/lang/String;Ljava/lang/Object;)V" line="30"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/PredicateVisitor;)V" line="37"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/predicates/ast/LogicalNode"><method name="&lt;init&gt;" desc="(Ljava/lang/String;)V" line="36"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/LogicalNode$Type;)V" line="47"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/LogicalNode$Type;[Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/Node;)V" line="59"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/LogicalNode$Type;Ljava/util/Collection;)V" line="69"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getName" desc="()Ljava/lang/String;" line="81"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getType" desc="()Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/LogicalNode$Type;" line="90"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/PredicateVisitor;)V" line="95"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="100"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="107"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="118"><counter type="INSTRUCTION" missed="2" covered="44"/><counter type="BRANCH" missed="1" covered="13"/><counter type="LINE" missed="1" covered="14"/><counter type="COMPLEXITY" missed="1" covered="7"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="2" covered="152"/><counter type="BRANCH" missed="1" covered="17"/><counter type="LINE" missed="1" covered="39"/><counter type="COMPLEXITY" missed="1" covered="18"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/predicates/ast/MultiComparisonNode$Type"><method name="&lt;init&gt;" desc="(Ljava/lang/String;ILjava/lang/String;)V" line="73"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getName" desc="()Ljava/lang/String;" line="78"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="65"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="23"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/predicates/ast/MultiComparisonNode"><method name="&lt;init&gt;" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/MultiComparisonNode$Type;Ljava/lang/String;)V" line="31"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/MultiComparisonNode$Type;Ljava/lang/String;Ljava/util/List;)V" line="43"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="addValue" desc="(Ljava/lang/Object;)V" line="52"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/PredicateVisitor;)V" line="59"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/predicates/ast/ExistsNode"><method name="&lt;init&gt;" desc="(Ljava/lang/String;)V" line="30"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getProperty" desc="()Ljava/lang/String;" line="40"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/PredicateVisitor;)V" line="45"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="51"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="64"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="69"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="47"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="1" covered="13"/><counter type="COMPLEXITY" missed="1" covered="8"/><counter type="METHOD" missed="1" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/predicates/ast/RootNode"><method name="&lt;init&gt;" desc="()V" line="17"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/predicates/ast/SuperNode"><method name="&lt;init&gt;" desc="()V" line="27"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getChildren" desc="()Ljava/util/List;" line="37"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/PredicateVisitor;)V" line="44"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="49"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="56"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="66"><counter type="INSTRUCTION" missed="2" covered="35"/><counter type="BRANCH" missed="1" covered="11"/><counter type="LINE" missed="1" covered="12"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="18" covered="65"/><counter type="BRANCH" missed="1" covered="13"/><counter type="LINE" missed="4" covered="20"/><counter type="COMPLEXITY" missed="3" covered="10"/><counter type="METHOD" missed="2" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/predicates/ast/LogicalNode$Type"><method name="&lt;init&gt;" desc="(Ljava/lang/String;ILjava/lang/String;)V" line="169"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getName" desc="()Ljava/lang/String;" line="174"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="byName" desc="(Ljava/lang/String;)Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/LogicalNode$Type;" line="178"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="144"><counter type="INSTRUCTION" missed="0" covered="63"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="98"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="17"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/predicates/ast/SingleComparisonNode$Type"><method name="&lt;init&gt;" desc="(Ljava/lang/String;ILjava/lang/String;)V" line="81"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getName" desc="()Ljava/lang/String;" line="86"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="43"><counter type="INSTRUCTION" missed="0" covered="81"/><counter type="LINE" missed="0" covered="8"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="89"/><counter type="LINE" missed="1" covered="11"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="org/eclipse/ditto/model/thingsearchparser/predicates/ast/ComparisonNode"><method name="&lt;init&gt;" desc="(Ljava/lang/Enum;Ljava/lang/String;Ljava/lang/Object;)V" line="37"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getComparisonType" desc="()Ljava/lang/Enum;" line="49"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getComparisonProperty" desc="()Ljava/lang/String;" line="58"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getComparisonValue" desc="()Ljava/lang/Object;" line="67"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="accept" desc="(Lorg/eclipse/ditto/model/thingsearchparser/predicates/ast/PredicateVisitor;)V" line="74"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="79"><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="87"><counter type="INSTRUCTION" missed="0" covered="45"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="99"><counter type="INSTRUCTION" missed="0" covered="69"/><counter type="BRANCH" missed="0" covered="24"/><counter type="LINE" missed="0" covered="23"/><counter type="COMPLEXITY" missed="0" covered="13"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="26" covered="137"/><counter type="BRANCH" missed="0" covered="30"/><counter type="LINE" missed="3" covered="37"/><counter type="COMPLEXITY" missed="2" covered="21"/><counter type="METHOD" missed="2" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="SuperNode.java"><line nr="27" mi="0" ci="2" mb="0" cb="0"/><line nr="28" mi="0" ci="5" mb="0" cb="0"/><line nr="29" mi="0" ci="1" mb="0" cb="0"/><line nr="37" mi="0" ci="3" mb="0" cb="0"/><line nr="44" mi="3" ci="0" mb="0" cb="0"/><line nr="45" mi="1" ci="0" mb="0" cb="0"/><line nr="49" mi="12" ci="0" mb="0" cb="0"/><line nr="56" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="2" mb="0" cb="0"/><line nr="58" mi="0" ci="13" mb="0" cb="2"/><line nr="59" mi="0" ci="2" mb="0" cb="0"/><line nr="66" mi="0" ci="3" mb="1" cb="1"/><line nr="67" mi="2" ci="0" mb="0" cb="0"/><line nr="69" mi="0" ci="2" mb="0" cb="2"/><line nr="70" mi="0" ci="2" mb="0" cb="0"/><line nr="72" mi="0" ci="5" mb="0" cb="2"/><line nr="73" mi="0" ci="2" mb="0" cb="0"/><line nr="75" mi="0" ci="3" mb="0" cb="0"/><line nr="76" mi="0" ci="3" mb="0" cb="2"/><line nr="77" mi="0" ci="3" mb="0" cb="2"/><line nr="78" mi="0" ci="2" mb="0" cb="0"/><line nr="80" mi="0" ci="6" mb="0" cb="2"/><line nr="81" mi="0" ci="2" mb="0" cb="0"/><line nr="83" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="18" covered="65"/><counter type="BRANCH" missed="1" covered="13"/><counter type="LINE" missed="4" covered="20"/><counter type="COMPLEXITY" missed="3" covered="10"/><counter type="METHOD" missed="2" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="RootNode.java"><line nr="17" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="LogicalNode.java"><line nr="36" mi="0" ci="2" mb="0" cb="0"/><line nr="37" mi="0" ci="5" mb="0" cb="0"/><line nr="38" mi="0" ci="4" mb="0" cb="0"/><line nr="39" mi="0" ci="1" mb="0" cb="0"/><line nr="47" mi="0" ci="2" mb="0" cb="0"/><line nr="48" mi="0" ci="3" mb="0" cb="0"/><line nr="49" mi="0" ci="4" mb="0" cb="0"/><line nr="50" mi="0" ci="1" mb="0" cb="0"/><line nr="59" mi="0" ci="5" mb="0" cb="0"/><line nr="60" mi="0" ci="1" mb="0" cb="0"/><line nr="69" mi="0" ci="2" mb="0" cb="0"/><line nr="70" mi="0" ci="3" mb="0" cb="0"/><line nr="71" mi="0" ci="4" mb="0" cb="0"/><line nr="72" mi="0" ci="5" mb="0" cb="0"/><line nr="73" mi="0" ci="1" mb="0" cb="0"/><line nr="81" mi="0" ci="3" mb="0" cb="0"/><line nr="90" mi="0" ci="3" mb="0" cb="0"/><line nr="95" mi="0" ci="3" mb="0" cb="0"/><line nr="96" mi="0" ci="1" mb="0" cb="0"/><line nr="100" mi="0" ci="22" mb="0" cb="0"/><line nr="107" mi="0" ci="2" mb="0" cb="0"/><line nr="108" mi="0" ci="3" mb="0" cb="0"/><line nr="109" mi="0" ci="13" mb="0" cb="2"/><line nr="110" mi="0" ci="13" mb="0" cb="2"/><line nr="111" mi="0" ci="2" mb="0" cb="0"/><line nr="118" mi="0" ci="3" mb="0" cb="2"/><line nr="119" mi="0" ci="2" mb="0" cb="0"/><line nr="121" mi="0" ci="4" mb="0" cb="2"/><line nr="122" mi="0" ci="2" mb="0" cb="0"/><line nr="124" mi="0" ci="5" mb="1" cb="1"/><line nr="125" mi="2" ci="0" mb="0" cb="0"/><line nr="127" mi="0" ci="3" mb="0" cb="0"/><line nr="128" mi="0" ci="3" mb="0" cb="2"/><line nr="129" mi="0" ci="3" mb="0" cb="2"/><line nr="130" mi="0" ci="2" mb="0" cb="0"/><line nr="132" mi="0" ci="6" mb="0" cb="2"/><line nr="133" mi="0" ci="2" mb="0" cb="0"/><line nr="135" mi="0" ci="5" mb="0" cb="2"/><line nr="136" mi="0" ci="2" mb="0" cb="0"/><line nr="138" mi="0" ci="2" mb="0" cb="0"/><line nr="144" mi="0" ci="15" mb="0" cb="0"/><line nr="148" mi="0" ci="7" mb="0" cb="0"/><line nr="153" mi="0" ci="7" mb="0" cb="0"/><line nr="158" mi="0" ci="7" mb="0" cb="0"/><line nr="162" mi="0" ci="4" mb="0" cb="0"/><line nr="164" mi="0" ci="16" mb="0" cb="2"/><line nr="165" mi="0" ci="6" mb="0" cb="0"/><line nr="167" mi="0" ci="1" mb="0" cb="0"/><line nr="169" mi="0" ci="4" mb="0" cb="0"/><line nr="170" mi="0" ci="3" mb="0" cb="0"/><line nr="171" mi="0" ci="1" mb="0" cb="0"/><line nr="174" mi="0" ci="3" mb="0" cb="0"/><line nr="178" mi="0" ci="3" mb="0" cb="0"/><line nr="180" mi="0" ci="5" mb="0" cb="0"/><line nr="181" mi="0" ci="2" mb="0" cb="2"/><line nr="182" mi="0" ci="12" mb="0" cb="0"/><line nr="184" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2" covered="250"/><counter type="BRANCH" missed="1" covered="21"/><counter type="LINE" missed="1" covered="56"/><counter type="COMPLEXITY" missed="1" covered="24"/><counter type="METHOD" missed="0" covered="14"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="ExistsNode.java"><line nr="30" mi="0" ci="2" mb="0" cb="0"/><line nr="31" mi="0" ci="5" mb="0" cb="0"/><line nr="32" mi="0" ci="1" mb="0" cb="0"/><line nr="40" mi="0" ci="3" mb="0" cb="0"/><line nr="45" mi="0" ci="3" mb="0" cb="0"/><line nr="46" mi="0" ci="1" mb="0" cb="0"/><line nr="51" mi="0" ci="3" mb="0" cb="2"/><line nr="52" mi="0" ci="2" mb="0" cb="0"/><line nr="54" mi="0" ci="7" mb="0" cb="4"/><line nr="55" mi="0" ci="2" mb="0" cb="0"/><line nr="57" mi="0" ci="3" mb="0" cb="0"/><line nr="58" mi="0" ci="6" mb="0" cb="0"/><line nr="64" mi="0" ci="9" mb="0" cb="0"/><line nr="69" mi="12" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="12" covered="47"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="1" covered="13"/><counter type="COMPLEXITY" missed="1" covered="8"/><counter type="METHOD" missed="1" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="MultiComparisonNode.java"><line nr="31" mi="0" ci="7" mb="0" cb="0"/><line nr="32" mi="0" ci="1" mb="0" cb="0"/><line nr="43" mi="0" ci="5" mb="0" cb="0"/><line nr="44" mi="0" ci="1" mb="0" cb="0"/><line nr="52" mi="0" ci="6" mb="0" cb="0"/><line nr="53" mi="0" ci="1" mb="0" cb="0"/><line nr="59" mi="0" ci="3" mb="0" cb="0"/><line nr="60" mi="0" ci="1" mb="0" cb="0"/><line nr="65" mi="0" ci="8" mb="0" cb="0"/><line nr="69" mi="0" ci="7" mb="0" cb="0"/><line nr="73" mi="0" ci="4" mb="0" cb="0"/><line nr="74" mi="0" ci="3" mb="0" cb="0"/><line nr="75" mi="0" ci="1" mb="0" cb="0"/><line nr="78" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="3" covered="48"/><counter type="LINE" missed="1" covered="13"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="1" covered="6"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="ComparisonNode.java"><line nr="37" mi="0" ci="2" mb="0" cb="0"/><line nr="38" mi="0" ci="3" mb="0" cb="0"/><line nr="39" mi="0" ci="5" mb="0" cb="0"/><line nr="40" mi="0" ci="3" mb="0" cb="0"/><line nr="41" mi="0" ci="1" mb="0" cb="0"/><line nr="49" mi="0" ci="3" mb="0" cb="0"/><line nr="58" mi="0" ci="3" mb="0" cb="0"/><line nr="67" mi="0" ci="3" mb="0" cb="0"/><line nr="74" mi="3" ci="0" mb="0" cb="0"/><line nr="75" mi="1" ci="0" mb="0" cb="0"/><line nr="79" mi="22" ci="0" mb="0" cb="0"/><line nr="87" mi="0" ci="2" mb="0" cb="0"/><line nr="88" mi="0" ci="2" mb="0" cb="0"/><line nr="89" mi="0" ci="13" mb="0" cb="2"/><line nr="90" mi="0" ci="13" mb="0" cb="2"/><line nr="91" mi="0" ci="13" mb="0" cb="2"/><line nr="92" mi="0" ci="2" mb="0" cb="0"/><line nr="99" mi="0" ci="3" mb="0" cb="2"/><line nr="100" mi="0" ci="2" mb="0" cb="0"/><line nr="102" mi="0" ci="2" mb="0" cb="2"/><line nr="103" mi="0" ci="2" mb="0" cb="0"/><line nr="105" mi="0" ci="5" mb="0" cb="2"/><line nr="106" mi="0" ci="2" mb="0" cb="0"/><line nr="108" mi="0" ci="3" mb="0" cb="0"/><line nr="109" mi="0" ci="3" mb="0" cb="2"/><line nr="110" mi="0" ci="3" mb="0" cb="2"/><line nr="111" mi="0" ci="2" mb="0" cb="0"/><line nr="113" mi="0" ci="6" mb="0" cb="2"/><line nr="114" mi="0" ci="2" mb="0" cb="0"/><line nr="116" mi="0" ci="3" mb="0" cb="2"/><line nr="117" mi="0" ci="3" mb="0" cb="2"/><line nr="118" mi="0" ci="2" mb="0" cb="0"/><line nr="120" mi="0" ci="6" mb="0" cb="2"/><line nr="121" mi="0" ci="2" mb="0" cb="0"/><line nr="123" mi="0" ci="3" mb="0" cb="2"/><line nr="124" mi="0" ci="3" mb="0" cb="2"/><line nr="125" mi="0" ci="2" mb="0" cb="0"/><line nr="127" mi="0" ci="6" mb="0" cb="2"/><line nr="128" mi="0" ci="2" mb="0" cb="0"/><line nr="130" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="26" covered="137"/><counter type="BRANCH" missed="0" covered="30"/><counter type="LINE" missed="3" covered="37"/><counter type="COMPLEXITY" missed="2" covered="21"/><counter type="METHOD" missed="2" covered="6"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="SingleComparisonNode.java"><line nr="30" mi="0" ci="5" mb="0" cb="0"/><line nr="31" mi="0" ci="1" mb="0" cb="0"/><line nr="37" mi="0" ci="3" mb="0" cb="0"/><line nr="38" mi="0" ci="1" mb="0" cb="0"/><line nr="43" mi="0" ci="32" mb="0" cb="0"/><line nr="47" mi="0" ci="7" mb="0" cb="0"/><line nr="52" mi="0" ci="7" mb="0" cb="0"/><line nr="57" mi="0" ci="7" mb="0" cb="0"/><line nr="62" mi="0" ci="7" mb="0" cb="0"/><line nr="67" mi="0" ci="7" mb="0" cb="0"/><line nr="72" mi="0" ci="7" mb="0" cb="0"/><line nr="77" mi="0" ci="7" mb="0" cb="0"/><line nr="81" mi="0" ci="4" mb="0" cb="0"/><line nr="82" mi="0" ci="3" mb="0" cb="0"/><line nr="83" mi="0" ci="1" mb="0" cb="0"/><line nr="86" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="3" covered="99"/><counter type="LINE" missed="1" covered="15"/><counter type="COMPLEXITY" missed="1" covered="4"/><counter type="METHOD" missed="1" covered="4"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><counter type="INSTRUCTION" missed="64" covered="649"/><counter type="BRANCH" missed="2" covered="70"/><counter type="LINE" missed="11" covered="155"/><counter type="COMPLEXITY" missed="9" covered="74"/><counter type="METHOD" missed="7" covered="40"/><counter type="CLASS" missed="0" covered="10"/></package><counter type="INSTRUCTION" missed="5469" covered="7484"/><counter type="BRANCH" missed="881" covered="1323"/><counter type="LINE" missed="23" covered="286"/><counter type="COMPLEXITY" missed="673" covered="702"/><counter type="METHOD" missed="56" covered="217"/><counter type="CLASS" missed="0" covered="18"/></report>