nopolinfo #0
location: FailureLocation{className='com.facebook.presto.sql.planner.iterative.rule.TestTransformCorrelatedNoAggregationScalarToJoin', failingMethods=[com.facebook.presto.sql.planner.iterative.rule.TestTransformCorrelatedNoAggregationScalarToJoin#rewritesOnSubqueryWithoutProjection, com.facebook.presto.sql.planner.iterative.rule.TestTransformCorrelatedNoAggregationScalarToJoin#rewritesOnSubqueryWithProjection, com.facebook.presto.sql.planner.iterative.rule.TestTransformCorrelatedNoAggregationScalarToJoin#rewritesWithValuesAndLiteral, com.facebook.presto.sql.planner.iterative.rule.TestTransformCorrelatedNoAggregationScalarToJoin#doesNotRewritesWhenCorrelationIsUsedInTwoFilters], erroringMethods=[], failures=[FailureType{failureName='com.facebook.presto.spi.PrestoException', failureDetail='Unknown transaction ID: d500995d-8a5d-40a1-9ff6-5411d233a5c3. Possibly expired? Commands ignored until end of transaction block', isError=false}, FailureType{failureName='com.facebook.presto.spi.PrestoException', failureDetail='Unknown transaction ID: 3d00e408-0b3d-4721-a9cf-c2e3776a6693. Possibly expired? Commands ignored until end of transaction block', isError=false}, FailureType{failureName='com.facebook.presto.spi.PrestoException', failureDetail='Unknown transaction ID: f55e49d2-871b-4025-863c-2cb3b0cd6d49. Possibly expired? Commands ignored until end of transaction block', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Plan does not match, expected [

- node(ProjectNode)
    bind corr -> corr
    bind a -> a
    - node(FilterNode)
        FilterMatcher{predicate=(CASE "is_distinct" WHEN true THEN true ELSE CAST("fail"(28, 'Scalar sub-query has returned multiple rows') AS boolean) END)}
        - node(MarkDistinctNode)
            MarkDistinctMatcher{markerSymbol=is_distinct, distinctSymbols=[corr, unique], hashSymbol=Optional.empty}
            - node(JoinNode)
                JoinMatcher{equiCriteria=[], filter=("corr" = 1)}
                - node(AssignUniqueId)
                    bind unique -> AssignUniqueIdMatcher{}
                    - node(ValuesNode)
                        ValuesMatcher{outputSymbolAliases={corr=0}, expectedOutputSymbolCount=Optional.empty, expectedRows=Optional.empty}
                - node(ProjectNode)
                    bind non_null -> true
                    - node(ValuesNode)
                        ValuesMatcher{outputSymbolAliases={a=0}, expectedOutputSymbolCount=Optional.empty, expectedRows=Optional.empty}

] but found [

- FilterProject[filterPredicate = (CASE "is_distinct" WHEN true THEN true ELSE CAST("fail"(28, 'Scalar sub-query has returned multiple rows') AS boolean) END)] => [corr:bigint, a:bigint]
    - MarkDistinct[distinct=corr:bigint, unique:bigint marker=is_distinct] => [corr:bigint, unique:bigint, a:bigint, is_distinct:boolean]
        - Lateral[[corr]] => [corr:bigint, unique:bigint, a:bigint]
            - AssignUniqueId => [corr:bigint, unique:bigint]
                - GroupReference[2] => [corr:bigint]
            - GroupReference[4] => [a:bigint]

] which resolves to [

- FilterProject[filterPredicate = (CASE "is_distinct" WHEN true THEN true ELSE CAST("fail"(28, 'Scalar sub-query has returned multiple rows') AS boolean) END)] => [corr:bigint, a:bigint]
    - MarkDistinct[distinct=corr:bigint, unique:bigint marker=is_distinct] => [corr:bigint, unique:bigint, a:bigint, is_distinct:boolean]
        - Lateral[[corr]] => [corr:bigint, unique:bigint, a:bigint]
            - AssignUniqueId => [corr:bigint, unique:bigint]
                - Values => [corr:bigint]
                        Cost: {rows: 0 (0B), cpu: ?, memory: ?, network: ?}
            - Filter[filterPredicate = ("corr" = 1)] => [a:bigint]
                    Cost: {rows: 0 (0B), cpu: ?, memory: ?, network: ?}
                - Values => [a:bigint]
                        Cost: {rows: 0 (0B), cpu: ?, memory: ?, network: ?}

]', isError=false}], nbFailures=4, nbErrors=0}
status: NOPATCH
dateEnd: Mon Apr 23 07:57:39 CEST 2018
allocatedtime: 120minutes 
passingTime: 1minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/369939067/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@2b0b4d53', projectTests=[com.facebook.presto.sql.planner.iterative.rule.TestTransformCorrelatedNoAggregationScalarToJoin], complianceLevel=8, outputFolder=./workspace/prestodb/presto/369939067, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #1
location: FailureLocation{className='com.facebook.presto.type.TestMapOperators', failingMethods=[com.facebook.presto.type.TestMapOperators#testDistinctFrom, com.facebook.presto.type.TestMapOperators#testMapConcat], erroringMethods=[], failures=[FailureType{failureName='com.facebook.presto.spi.PrestoException', failureDetail='Value 3824456328 exceeds MAX_INT', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='expected [{5.1=33.22, 1.0=2.20}] but found [{5.1=33.22, 406243826.4=2.20}]', isError=false}], nbFailures=2, nbErrors=0}
status: NOPATCH
dateEnd: Mon Apr 23 07:58:32 CEST 2018
allocatedtime: 119minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/369939067/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@69886465', projectTests=[com.facebook.presto.type.TestMapOperators], complianceLevel=8, outputFolder=./workspace/prestodb/presto/369939067, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #2
location: FailureLocation{className='com.facebook.presto.sql.planner.TestLogicalPlanner', failingMethods=[com.facebook.presto.sql.planner.TestLogicalPlanner#testCorrelatedSubqueries, com.facebook.presto.sql.planner.TestLogicalPlanner#testDoubleNestedCorrelatedSubqueries], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='Plan does not match, expected [

- anyTree
    - node(FilterNode)
        FilterMatcher{predicate=(BIGINT '3' = "X")}
        - node(LateralJoinNode)
            CorrelationMatcher{correlation=[X]}
            - node(TableScanNode)
                TableScanMatcher{expectedTableName=orders}
                bind X -> Column orders:orderkey
            - node(EnforceSingleRowNode)
                - node(ProjectNode)
                    - node(ValuesNode)

] but found [

- Output[orderkey] => [orderkey:bigint]
    - FilterProject[filterPredicate = (CASE "is_distinct" WHEN true THEN true ELSE CAST("fail"(28, 'Scalar sub-query has returned multiple rows') AS boolean) END)] => [orderkey:bigint]
        - MarkDistinct[distinct=orderkey:bigint, unique:bigint marker=is_distinct] => [orderkey:bigint, unique:bigint, is_distinct:boolean]
            - AssignUniqueId => [orderkey:bigint, unique:bigint]
                - ScanFilter[table = local:tpch:orders:sf0.01, originalConstraint = (BIGINT '3' = "orderkey"), filterPredicate = ("orderkey" = BIGINT '3')] => [orderkey:bigint]
                        Cost: {rows: 15000 (146.48kB), cpu: ?, memory: ?, network: ?}/{rows: 7500 (73.24kB), cpu: ?, memory: ?, network: ?}
                        orderkey := tpch:orderkey
                            :: [[3]]
                        tpch:orderstatus
                            :: [[F], [O], [P]]

] which resolves to [

- Output[orderkey] => [orderkey:bigint]
    - FilterProject[filterPredicate = (CASE "is_distinct" WHEN true THEN true ELSE CAST("fail"(28, 'Scalar sub-query has returned multiple rows') AS boolean) END)] => [orderkey:bigint]
        - MarkDistinct[distinct=orderkey:bigint, unique:bigint marker=is_distinct] => [orderkey:bigint, unique:bigint, is_distinct:boolean]
            - AssignUniqueId => [orderkey:bigint, unique:bigint]
                - ScanFilter[table = local:tpch:orders:sf0.01, originalConstraint = (BIGINT '3' = "orderkey"), filterPredicate = ("orderkey" = BIGINT '3')] => [orderkey:bigint]
                        Cost: {rows: 15000 (146.48kB), cpu: ?, memory: ?, network: ?}/{rows: 7500 (73.24kB), cpu: ?, memory: ?, network: ?}
                        orderkey := tpch:orderkey
                            :: [[3]]
                        tpch:orderstatus
                            :: [[F], [O], [P]]

]', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Plan does not match, expected [

- anyTree
    - node(FilterNode)
        FilterMatcher{predicate="OUTER_FILTER"}
        - node(ApplyNode)
            CorrelationMatcher{correlation=[C, O]}
            bind OUTER_FILTER -> THREE IN (C)
            - node(ProjectNode)
                bind THREE -> BIGINT '3'
                - node(TableScanNode)
                    TableScanMatcher{expectedTableName=orders}
                    bind O -> Column orders:orderkey
                    bind C -> Column orders:custkey
            - anyTree
                - node(LateralJoinNode)
                    CorrelationMatcher{correlation=[L]}
                    - node(TableScanNode)
                        TableScanMatcher{expectedTableName=lineitem}
                        bind L -> Column lineitem:orderkey
                    - node(EnforceSingleRowNode)
                        - node(ProjectNode)
                            - node(ValuesNode)

] but found [

- Output[orderkey] => [orderkey:bigint]
    - FilterProject[filterPredicate = "expr_12"] => [orderkey:bigint]
        - Apply[[custkey, orderkey]] => [orderkey:bigint, custkey:bigint, expr:bigint, expr_12:boolean]
                        expr_12 := ("expr" IN "custkey")
            - ScanProject[table = local:tpch:orders:sf0.01, originalConstraint = true] => [orderkey:bigint, custkey:bigint, expr:bigint]
                    Cost: {rows: 15000 (292.97kB), cpu: ?, memory: ?, network: ?}/{rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}
                    expr := BIGINT '3'
                    orderkey := tpch:orderkey
                    custkey := tpch:custkey
                    tpch:orderstatus
                        :: [[F], [O], [P]]
            - Project[] => [custkey:bigint]
                - FilterProject[filterPredicate = ((CASE "is_distinct" WHEN true THEN true ELSE CAST("fail"(28, 'Scalar sub-query has returned multiple rows') AS boolean) END) AND "expr_3")] => []
                    - MarkDistinct[distinct=orderkey_0:bigint, unique:bigint marker=is_distinct] => [orderkey_0:bigint, unique:bigint, expr_3:boolean, is_distinct:boolean]
                        - Project[] => [orderkey_0:bigint, unique:bigint, expr_3:boolean]
                                expr_3 := ("orderkey_0" = "orderkey")
                            - AssignUniqueId => [orderkey_0:bigint, unique:bigint]
                                - TableScan[local:tpch:lineitem:sf0.01, originalConstraint = true] => [orderkey_0:bigint]
                                        Cost: {rows: 60175 (587.65kB), cpu: ?, memory: ?, network: ?}
                                        orderkey_0 := tpch:orderkey

] which resolves to [

- Output[orderkey] => [orderkey:bigint]
    - FilterProject[filterPredicate = "expr_12"] => [orderkey:bigint]
        - Apply[[custkey, orderkey]] => [orderkey:bigint, custkey:bigint, expr:bigint, expr_12:boolean]
                        expr_12 := ("expr" IN "custkey")
            - ScanProject[table = local:tpch:orders:sf0.01, originalConstraint = true] => [orderkey:bigint, custkey:bigint, expr:bigint]
                    Cost: {rows: 15000 (292.97kB), cpu: ?, memory: ?, network: ?}/{rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}
                    expr := BIGINT '3'
                    orderkey := tpch:orderkey
                    custkey := tpch:custkey
                    tpch:orderstatus
                        :: [[F], [O], [P]]
            - Project[] => [custkey:bigint]
                - FilterProject[filterPredicate = ((CASE "is_distinct" WHEN true THEN true ELSE CAST("fail"(28, 'Scalar sub-query has returned multiple rows') AS boolean) END) AND "expr_3")] => []
                    - MarkDistinct[distinct=orderkey_0:bigint, unique:bigint marker=is_distinct] => [orderkey_0:bigint, unique:bigint, expr_3:boolean, is_distinct:boolean]
                        - Project[] => [orderkey_0:bigint, unique:bigint, expr_3:boolean]
                                expr_3 := ("orderkey_0" = "orderkey")
                            - AssignUniqueId => [orderkey_0:bigint, unique:bigint]
                                - TableScan[local:tpch:lineitem:sf0.01, originalConstraint = true] => [orderkey_0:bigint]
                                        Cost: {rows: 60175 (587.65kB), cpu: ?, memory: ?, network: ?}
                                        orderkey_0 := tpch:orderkey

]', isError=false}], nbFailures=2, nbErrors=0}
status: NOPATCH
dateEnd: Mon Apr 23 07:59:25 CEST 2018
allocatedtime: 119minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/369939067/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@68e0925', projectTests=[com.facebook.presto.sql.planner.TestLogicalPlanner], complianceLevel=8, outputFolder=./workspace/prestodb/presto/369939067, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #3
location: FailureLocation{className='com.facebook.presto.sql.gen.TestExpressionCompiler', failingMethods=[com.facebook.presto.sql.gen.TestExpressionCompiler#testNullif], erroringMethods=[], failures=[FailureType{failureName='java.lang.RuntimeException', failureDetail='Error processing nullif(map(array[1], array[smallint '1']), map(array[1], array[integer '1']))', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Mon Apr 23 08:00:14 CEST 2018
allocatedtime: 119minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/369939067/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@32d5347b', projectTests=[com.facebook.presto.sql.gen.TestExpressionCompiler], complianceLevel=8, outputFolder=./workspace/prestodb/presto/369939067, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



