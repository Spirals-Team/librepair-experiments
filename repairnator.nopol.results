nopolinfo #0
location: FailureLocation{className='com.facebook.presto.sql.planner.optimizations.TestOptimizeMixedDistinctAggregations', failingMethods=[com.facebook.presto.sql.planner.optimizations.TestOptimizeMixedDistinctAggregations#testNestedType, com.facebook.presto.sql.planner.optimizations.TestOptimizeMixedDistinctAggregations#testMixedDistinctAggregationOptimizer], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='Plan does not match, expected [

- anyTree
    - node(AggregationNode)
        AggregationMatcher{groupingSets=[[CUSTKEY]], masks={}, groudId=Optional.empty, step=SINGLE}
        bind arbitrary -> arbitrary (*) 
        bind count -> count (*) 
        - node(ProjectNode)
            - node(AggregationNode)
                AggregationMatcher{groupingSets=[[CUSTKEY, ORDERDATE, GROUP]], masks={}, groudId=Optional.empty, step=SINGLE}
                bind MAX -> max (TOTALPRICE) 
                - node(GroupIdNode)
                    GroupIdMatcher{groups=[[CUSTKEY, TOTALPRICE], [CUSTKEY, ORDERDATE]]}
                    - anyTree
                        - node(TableScanNode)
                            TableScanMatcher{expectedTableName=orders}
                            bind TOTALPRICE -> Column orders:totalprice
                            bind CUSTKEY -> Column orders:custkey
                            bind ORDERDATE -> Column orders:orderdate

] but found [

- Output[custkey, s, d] => [custkey:bigint, max:double, count:bigint]
        s := max
        d := count
    - Aggregate[custkey] => [custkey:bigint, max:double, count:bigint]
            max := "max"("totalprice")
            count := "count"(DISTINCT "orderdate")
        - ScanProject[table = local:tpch:orders:sf0.01, originalConstraint = null] => [custkey:bigint, totalprice:double, orderdate:date]
                Cost: {rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}/{rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}
                totalprice := tpch:totalprice
                custkey := tpch:custkey
                orderdate := tpch:orderdate

] which resolves to [

- Output[custkey, s, d] => [custkey:bigint, max:double, count:bigint]
        s := max
        d := count
    - Aggregate[custkey] => [custkey:bigint, max:double, count:bigint]
            max := "max"("totalprice")
            count := "count"(DISTINCT "orderdate")
        - ScanProject[table = local:tpch:orders:sf0.01, originalConstraint = null] => [custkey:bigint, totalprice:double, orderdate:date]
                Cost: {rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}/{rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}
                totalprice := tpch:totalprice
                custkey := tpch:custkey
                orderdate := tpch:orderdate

]', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Plan does not match, expected [

- anyTree
    - node(AggregationNode)
        bind arbitrary -> arbitrary (*) 
        bind count -> count (*) 
        - node(ProjectNode)
            - node(AggregationNode)
                bind max -> max (*) 
                - anyTree
                    - node(ValuesNode)
                        ValuesMatcher{outputSymbolAliases={}, expectedOutputSymbolCount=Optional.empty, expectedRows=Optional.empty}

] but found [

- Output[_col0, _col1] => [count:bigint, max:integer]
        _col0 := count
        _col1 := max
    - Aggregate => [count:bigint, max:integer]
            count := "count"(DISTINCT "field")
            max := "max"("field_0")
        - Values => [field:row(integer, integer), field_0:integer]
                Cost: {rows: 1 (20B), cpu: ?, memory: ?, network: ?}
                ("$literal$row(field0 integer,field1 integer)"("from_base64"('CwAAAFJPV19FTEVNRU5UAgAAAAkAAABJTlRfQVJSQVkJAAAASU5UX0FSUkFZAQAAAAABAAAAAQAAAAACAAAA')), 3)

] which resolves to [

- Output[_col0, _col1] => [count:bigint, max:integer]
        _col0 := count
        _col1 := max
    - Aggregate => [count:bigint, max:integer]
            count := "count"(DISTINCT "field")
            max := "max"("field_0")
        - Values => [field:row(integer, integer), field_0:integer]
                Cost: {rows: 1 (20B), cpu: ?, memory: ?, network: ?}
                ("$literal$row(field0 integer,field1 integer)"("from_base64"('CwAAAFJPV19FTEVNRU5UAgAAAAkAAABJTlRfQVJSQVkJAAAASU5UX0FSUkFZAQAAAAABAAAAAQAAAAACAAAA')), 3)

]', isError=false}], nbFailures=2, nbErrors=0}
status: NOPATCH
dateEnd: Wed Mar 14 06:03:07 CET 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/353166573/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@73ba6fe6', projectTests=[com.facebook.presto.sql.planner.optimizations.TestOptimizeMixedDistinctAggregations], complianceLevel=8, outputFolder=./workspace/prestodb/presto/353166573, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



