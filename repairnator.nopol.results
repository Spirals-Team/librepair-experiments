nopolinfo #0
location: FailureLocation{className='io.druid.query.groupby.GroupByQueryRunnerTest', failingMethods=[io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2SmallBuffer, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v1SingleThreaded, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v1SingleThreaded, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2SmallBuffer, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v1SingleThreaded, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v1, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v1, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2SmallBuffer, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2SmallDictionary, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v1, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v1SingleThreaded, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v1, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v1, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v1SingleThreaded, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2SmallDictionary, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2SmallDictionary, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2SmallBuffer, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2SmallDictionary, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v1, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v1, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2SmallDictionary, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v1, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2SmallBuffer, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2SmallBuffer, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2SmallDictionary, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2SmallDictionary, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2SmallDictionary, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v1SingleThreaded, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v1, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v1, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v1SingleThreaded, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2SmallDictionary, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v1SingleThreaded, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2SmallDictionary, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v1SingleThreaded, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2SmallBuffer, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2SmallBuffer, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2SmallBuffer, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v1, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v1SingleThreaded, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v1SingleThreaded, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v1SingleThreaded, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2SmallDictionary, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v1, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v1, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2SmallBuffer, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2SmallDictionary, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v1, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2SmallBuffer, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v1, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2SmallBuffer, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2SmallDictionary, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v1SingleThreaded, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v1SingleThreaded, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2SmallBuffer, runner=mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2SmallBuffer, runner=mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2SmallDictionary, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config=v2SmallBuffer, runner=noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v1SingleThreaded, runner=noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config=v2SmallDictionary, runner=rtIndex], io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config=v2, runner=mMappedTestIndex]], erroringMethods=[], failures=[FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing "Unknown type[class io.druid.hll.HLLCV1]")', isError=false}, FailureType{failureName='skipped', failureDetail='skipped', isError=false}], nbFailures=75, nbErrors=0}
status: NOPATCH
dateEnd: Fri Sep 29 19:37:47 CEST 2017
allocatedtime: 120minutes 
passingTime: 3minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/druid-io/druid/281359996/processing/src/main/java], projectClasspath='[Ljava.net.URL;@47f08b81', projectTests=[io.druid.query.groupby.GroupByQueryRunnerTest], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 23
nbAngelicValues: 17
ignoreStatus: NOTHING_TO_IGNORE
----------



