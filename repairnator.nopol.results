nopolinfo #0
location: FailureLocation{className='com.facebook.presto.tests.TestDistributedSpilledQueries', failingMethods=[com.facebook.presto.tests.TestDistributedSpilledQueries#testAggregationPushedBelowOuterJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinPredicatePushdownWithSelfEquality, com.facebook.presto.tests.TestDistributedSpilledQueries#testScalarSubquery, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinOnMultipleFields, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithAlias, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByKeyPredicatePushdown, com.facebook.presto.tests.TestDistributedSpilledQueries#testExchangeWithProjectionPushDown, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithMultipleInSubqueryClauses, com.facebook.presto.tests.TestDistributedSpilledQueries#testLateralJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinWithEmptyInnerTable, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinUsing, com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinAsInnerPredicatePushdown, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithMultipleScalarSubqueryClauses, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinUsingMultipleFields, com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testOuterJoinWithCommonExpression, com.facebook.presto.tests.TestDistributedSpilledQueries#testQualifiedWildcardFromJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testWildcardFromJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithComplexExpressions3, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithComplexExpressions2, com.facebook.presto.tests.TestDistributedSpilledQueries#testSingleDistinctOptimizer, com.facebook.presto.tests.TestDistributedSpilledQueries#testNonEqalityJoinWithScalarRequiringSessionParameter, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithComplexExpressions, com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinDoubleClauseWithLeftOverlap, com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinWithNullValues, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinProjectionPushDown, com.facebook.presto.tests.TestDistributedSpilledQueries#testSelfJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testProbeFilteredLeftJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testColocatedJoinWithLocalUnion, com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinEqualityInference, com.facebook.presto.tests.TestDistributedSpilledQueries#testExecuteUsingWithSubqueryInJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithNonDeterministicLessThan, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithConstantPredicatePushDown, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithConstantExpression, com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleLeftJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testDereferenceInSubquery, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithGreaterThanInJoinClause, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithNonJoinExpression, com.facebook.presto.tests.TestDistributedSpilledQueries#testPlainLeftJoinPredicatePushdown, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithScalarSubqueryToBeExecutedAsPostJoinFilter, com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedInPredicateSubqueries, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithNullValues, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithMultipleLessThanPredicatesDifferentOrders, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinDoubleClauseWithLeftOverlap, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinAggregations, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinCoercionOnEqualityComparison, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithDuplicateRelations, com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithReversedComparison, com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinAsInnerPredicatePushdown, com.facebook.presto.tests.TestDistributedSpilledQueries#testFullJoinNormalizedToLeft, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithLessThanOnDatesInJoinClause, com.facebook.presto.tests.TestDistributedSpilledQueries#testCoercions, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinCriteriaCoercion, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetSubsetAndPartitioning, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinUnaliasedSubqueries, com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testBuildFilteredLeftJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedExistsSubqueriesWithEqualityPredicatesInWhere, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinConstantPropagation, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinDoubleClauseWithRightOverlap, com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftFilteredJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinPredicateMoveAround, com.facebook.presto.tests.TestDistributedSpilledQueries#testRowFieldAccessorInJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithLessThanInJoinClause, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithRangePredicatesinJoinClause, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByAsJoinProbe, com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinPredicateMoveAround, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithExpressionsThatMayReturnNull, com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinNormalizedToInner, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinPredicateMoveAround, com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithJoinOnNonTranslateableSymbols, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithScalarSubqueryInOnClause, com.facebook.presto.tests.TestDistributedSpilledQueries#testPredicatePushdownJoinEqualityGroups, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithMultiFieldGroupBy, com.facebook.presto.tests.TestDistributedSpilledQueries#testNonEqualityLeftJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithAggregationAndJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinDoubleClauseWithRightOverlap, com.facebook.presto.tests.TestDistributedSpilledQueries#testRowNumberJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testNonEqualityJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testRightFilteredJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedScalarSubqueriesWithScalarAggregation, com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinNormalizedToInner], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM nation n1 WHERE (n1.nationkey > ( SELECT avg(nationkey) FROM nation n2 WHERE n1.regionkey=n2.regionkey))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM lineitem LEFT JOIN (SELECT * FROM orders WHERE orderkey % 2 = 0) a ON lineitem.orderkey = a.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM (  SELECT greatest (t.x, t.z) cc FROM (    SELECT *    FROM (VALUES (VARCHAR 'a', VARCHAR 'c')) t(x, z)  ) t  JOIN (    SELECT *    FROM (VALUES (VARCHAR 'a', VARCHAR 'c')) u(x, z)    WHERE z='c'  ) u  ON t.z = u.z)WHERE cc = 'c'', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: select count(*) from ((select * from orders) union all (select * from orders)) join orders using (orderkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT count(*) FROM customer WHERE NOT EXISTS(SELECT * FROM orders WHERE orders.custkey=customer.custkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderkey, clerk IN (SELECT clerk FROM orders s WHERE s.custkey = o.custkey AND s.orderkey < o.orderkey) FROM orders o', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT (SELECT avg(regionkey)  FROM nation n2 WHERE n2.nationkey = n1.nationkey),(SELECT avg(regionkey) FROM nation n3 WHERE n3.nationkey = n1.nationkey)FROM nation n1', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT t2.*, max(t1.b) as max_b FROM (VALUES (1, 'a'),  (2, 'b'), (1, 'c'), (3, 'd')) t1(a, b) INNER JOIN (VALUES 1, 2, 3, 4) t2(a) ON t1.a = t2.a GROUP BY t2.a', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(DISTINCT CAST(b.quantity AS BIGINT)), a.orderstatus FROM orders a JOIN lineitem b ON a.orderkey = b.orderkey GROUP BY a.orderstatus', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM 
  (SELECT orderkey + 1 orderkey FROM (SELECT * FROM orders ORDER BY orderkey LIMIT 100)) o 
JOIN 
  (SELECT orderkey + 1 orderkey FROM (SELECT * FROM orders ORDER BY orderkey LIMIT 100)) o1 
ON (o.orderkey = o1.orderkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: EXECUTE my_query USING 1, 3, 2', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem FULL JOIN orders ON lineitem.orderkey = orders.orderkey WHERE lineitem.orderkey IS NOT NULL', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT   b.orderkey,   b.custkey,   a.custkey FROM (   SELECT custkey  FROM orders   GROUP BY custkey) a JOIN orders b   ON a.custkey = b.custkey ', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT *
FROM (
  SELECT custkey1, orderstatus1, SUM(totalprice1) totalprice, MAX(custkey2) maxcustkey
  FROM (
    SELECT *
    FROM (
      SELECT custkey custkey1, orderstatus orderstatus1, CAST(totalprice AS BIGINT) totalprice1, orderkey orderkey1
      FROM orders
    ) orders1 
    JOIN (
      SELECT custkey custkey2, orderstatus orderstatus2, CAST(totalprice AS BIGINT) totalprice2, orderkey orderkey2
      FROM orders
    ) orders2 ON orders1.orderkey1 = orders2.orderkey2
  ) 
  GROUP BY custkey1, orderstatus1
)
WHERE custkey1 = maxcustkey
AND maxcustkey % 2 = 0 
AND orderstatus1 = 'F'
AND totalprice > 10000
ORDER BY custkey1, orderstatus1, totalprice, maxcustkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT_IF(x IS NULL) FROM (SELECT x, y, COUNT(z) FROM (SELECT CAST(lineitem.orderkey AS BIGINT) x, lineitem.linestatus y, SUM(lineitem.quantity) z FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey GROUP BY 1, 2) GROUP BY GROUPING SETS ((x, y), ()))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT x + y FROM (   SELECT orderdate, COUNT(*) x FROM orders GROUP BY orderdate) a JOIN (   SELECT orderdate, COUNT(*) y FROM orders GROUP BY orderdate) b ON a.orderdate = b.orderdate', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT o.clerk, avg(o.shippriority), COUNT(l.linenumber) FROM orders o LEFT OUTER JOIN lineitem l ON o.orderkey=l.orderkey AND o.shippriority=1 GROUP BY o.clerk', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT x, y, COUNT(*)
FROM (SELECT orderkey, 0 AS x FROM orders) a 
JOIN (SELECT orderkey, 1 AS y FROM orders) b 
ON a.orderkey = b.orderkey
GROUP BY 1, 2', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM (VALUES (1.0, 2.0)) x (a, b) JOIN (VALUES (1, 3)) y (a, b) USING(a)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND lineitem.orderkey = orders.custkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.orderkey = lineitem.partkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND lineitem.shipdate = orders.orderdate', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*)
FROM (SELECT * FROM lineitem WHERE orderkey % 16 = 0 AND partkey % 2 = 0) lineitem
JOIN (SELECT * FROM orders WHERE orderkey % 16 = 0 AND custkey % 2 = 0) orders
ON lineitem.orderkey % 8 = orders.orderkey % 8 AND lineitem.linenumber % 2 = 0
WHERE orders.custkey % 8 < 7 AND orders.custkey % 8 = lineitem.orderkey % 8 AND lineitem.suppkey % 7 > orders.custkey % 7', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT *
FROM
  (SELECT orderkey, abs(orderkey) a FROM orders) t
JOIN
  (SELECT orderkey, abs(orderkey) a FROM orders) u
ON
  t.orderkey = u.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM (SELECT * FROM lineitem) join (SELECT * FROM orders) using (orderkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem join orders using (orderkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem JOIN (SELECT orderkey, orderdate shipdate FROM ORDERS) T USING (orderkey, shipdate)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM (lineitem JOIN orders ON lineitem.orderkey = orders.orderkey) x', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT SUM(custkey) FROM lineitem JOIN orders ON lineitem.orderkey = CAST(orders.orderkey AS BIGINT)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT SUM(custkey) FROM lineitem JOIN orders ON lineitem.orderkey = CASE WHEN orders.custkey = 1 and orders.orderstatus = 'F' THEN orders.orderkey ELSE NULL END', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT SUM(custkey) FROM lineitem JOIN orders ON lineitem.orderkey + 1 = orders.orderkey + 1', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND 123 = 123', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT
  a.orderstatus
  , a.clerk
FROM (
  SELECT DISTINCT orderstatus, clerk FROM orders
) a
INNER JOIN (
  SELECT DISTINCT orderstatus, clerk FROM orders
) b
ON
  a.orderstatus = b.orderstatus
  and a.clerk = b.clerk
where a.orderstatus = 'F'
', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM orders JOIN orders USING (orderkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT *
FROM (
    SELECT a, nullif(a, 1)
    FROM (VALUES 1) w(a)
) t(a,b)
JOIN (VALUES 1) u(x) ON t.a = u.x', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT l.suppkey, n.nationkey, l.partkey, n.regionkey FROM nation n JOIN lineitem l ON l.suppkey = n.nationkey AND l.partkey > n.regionkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT n.nationkey, r.regionkey FROM region r JOIN nation n ON n.regionkey = r.regionkey AND n.name < r.name', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT o.orderkey, o.orderdate, l.shipdate FROM orders o JOIN lineitem l ON l.orderkey = o.orderkey AND l.shipdate < o.orderdate + INTERVAL '10' DAY', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderstatus FROM lineitem JOIN (SELECT DISTINCT orderkey, orderstatus FROM ORDERS) T on lineitem.orderkey = T.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM (VALUES 1,2,3,4) t(x)  JOIN (VALUES 1,2,3,5) t2(y) ON (x in (VALUES 1,2)) = (y in (VALUES 1,2)) AND (x in (VALUES 1)) != (y in (VALUES 3))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT count(*) FROM lineitem l JOIN nation n ON l.suppkey % 5 = n.nationkey % 5 AND l.partkey % 3 < n.regionkey AND l.partkey % 3 + 1 < n.regionkey AND l.partkey % 3 + 2 < n.regionkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM (VALUES 1,2,3,4) t(x)  JOIN (VALUES 1,2,3,5) t2(y) ON (x = (VALUES 1)) AND (y = (VALUES 2)) AND (x in (VALUES 2)) = (y in (VALUES 1))', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='Wrong page channel count, expected 0 but got 3', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.custkey = 1', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT *
FROM (
  SELECT CASE WHEN orderkey % 3 = 0 THEN NULL ELSE orderkey END AS orderkey
  FROM lineitem
  WHERE partkey % 512 = 0
) AS lineitem 
JOIN (
  SELECT CASE WHEN orderkey % 2 = 0 THEN NULL ELSE orderkey END AS orderkey
  FROM orders
  WHERE custkey % 512 = 0
) AS orders
ON lineitem.orderkey = orders.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM (SELECT * FROM lineitem WHERE orderkey % 16 = 0 AND partkey % 2 = 0) lineitem JOIN (SELECT * FROM orders WHERE orderkey % 16 = 0 AND custkey % 2 = 0) orders ON lineitem.orderkey % 8 = orders.orderkey % 8 AND lineitem.linenumber % 2 = 0 AND orders.custkey % 8 < 7 AND lineitem.suppkey % 10 < orders.custkey % 7 AND lineitem.suppkey % 7 > orders.custkey % 7', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON orders.orderkey = lineitem.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT count() FROM nation a INNER JOIN nation b ON a.name = (SELECT max(name) FROM nation) INNER JOIN nation c ON c.name = split_part(b.name,'<',2)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM (VALUES 1,2,3,4) t(x)  JOIN (VALUES 1,2,3,5) t2(y) ON (x+y = (SELECT 4))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT nationkey, a FROM nation, LATERAL (SELECT region.name || '_' FROM region WHERE region.regionkey = nation.regionkey) t(a) ORDER BY nationkey LIMIT 1', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT custkey, linestatus, tax, totalprice, orderstatus FROM (SELECT * FROM lineitem WHERE orderkey % 2 = 0) a JOIN orders ON a.orderkey = orders.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*)
FROM lineitem 
LEFT JOIN (
  SELECT * FROM orders WHERE orders.orderkey % 2 = 0
) orders 
ON lineitem.orderkey = orders.orderkey 
WHERE orders.orderkey % 4 = 0
  AND (lineitem.suppkey % 2 = orders.orderkey % 2 OR orders.custkey IS NULL)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey = orders.orderkey AND lineitem.orderkey = orders.custkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.orderkey = lineitem.partkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*)
FROM (SELECT * FROM lineitem WHERE orderkey % 4 = 0 AND suppkey % 2 = partkey % 2 AND linenumber % 3 = orderkey % 3) lineitem
LEFT JOIN (SELECT * FROM orders WHERE orderkey % 4 = 0) orders
ON lineitem.linenumber % 3 = orders.orderkey % 4 AND lineitem.orderkey % 3 = orders.custkey % 3
WHERE lineitem.suppkey % 2 = lineitem.linenumber % 3', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey = orders.orderkey WHERE orders.orderkey IS NOT NULL', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*)
FROM (SELECT * FROM lineitem WHERE orderkey % 16 = 0 AND partkey % 2 = 0) lineitem
LEFT JOIN (SELECT * FROM orders WHERE orderkey % 16 = 0 AND custkey % 2 = 0) orders
ON lineitem.orderkey % 8 = orders.orderkey % 8
WHERE (orders.custkey % 8 < 7 OR orders.custkey % 8 IS NULL) AND orders.custkey % 8 = lineitem.orderkey % 8', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM lineitem a LEFT JOIN (SELECT * FROM orders WHERE orderkey = rand()) b ON a.orderkey = b.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT *
FROM (
  SELECT CASE WHEN orderkey % 3 = 0 THEN NULL ELSE orderkey END AS orderkey
  FROM lineitem
  WHERE partkey % 512 = 0
) AS lineitem 
LEFT JOIN (
  SELECT CASE WHEN orderkey % 2 = 0 THEN NULL ELSE orderkey END AS orderkey
  FROM orders
  WHERE custkey % 512 = 0
) AS orders
ON lineitem.orderkey = orders.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM (VALUES (1,1), (1,2)) t1(a,b) LEFT OUTER JOIN (VALUES (1,1), (1,2)) t2(c,d) ON a=c AND from_unixtime(b) > current_timestamp', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND lineitem.quantity + length(orders.comment) > 7', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem LEFT OUTER JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.custkey > 1000 WHERE orders.orderkey IS NULL', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='Wrong page channel count, expected 1 but got 3', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*)
FROM lineitem 
LEFT JOIN (
  SELECT * FROM orders WHERE orders.orderkey % 2 = 0
) orders 
ON lineitem.orderkey = orders.orderkey 
WHERE lineitem.orderkey % 4 = 0
  AND (lineitem.suppkey % 2 = orders.orderkey % 2 OR orders.orderkey IS NULL)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT *
FROM (
  SELECT custkey custkey1, custkey%4 custkey1a, custkey%8 custkey1b, custkey%16 custkey1c
  FROM orders
) orders1 
JOIN (
  SELECT custkey custkey2, custkey%4 custkey2a, custkey%8 custkey2b
  FROM orders
) orders2 ON orders1.custkey1 = orders2.custkey2
WHERE custkey2a = custkey2b
  AND custkey1 = custkey1a
  AND custkey2 = custkey2a
  AND custkey1a = custkey1c
  AND custkey1b = custkey1c
  AND custkey1b % 2 = 0', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM (SELECT * FROM lineitem WHERE orderkey % 2 = 0) a LEFT JOIN orders ON a.orderkey = orders.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT a.*, b.* FROM (select orderkey, partkey from lineitem) a join (select orderkey, custkey from orders) b using (orderkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT custkey, linestatus, tax, totalprice, orderstatus FROM lineitem JOIN (SELECT *  FROM orders WHERE orderkey % 2 = 0) a ON lineitem.orderkey = a.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*)
FROM (
  SELECT * FROM orders WHERE orders.orderkey % 2 = 0
) orders
RIGHT JOIN lineitem
ON lineitem.orderkey = orders.orderkey 
WHERE orders.orderkey % 4 = 0
  AND (lineitem.suppkey % 2 = orders.orderkey % 2 OR orders.custkey IS NULL)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey = orders.orderkey WHERE lineitem.orderkey IS NOT NULL', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*)
FROM (SELECT * FROM orders WHERE orderkey % 16 = 0 AND custkey % 2 = 0) orders
RIGHT JOIN (SELECT * FROM lineitem WHERE orderkey % 16 = 0 AND partkey % 2 = 0) lineitem
ON lineitem.orderkey % 8 = orders.orderkey % 8
WHERE (orders.custkey % 8 < 7 OR orders.custkey % 8 IS NULL) AND orders.custkey % 8 = lineitem.orderkey % 8', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*)
FROM (
  SELECT * FROM orders WHERE orders.orderkey % 2 = 0
) orders 
RIGHT JOIN lineitem
ON lineitem.orderkey = orders.orderkey 
WHERE orders.orderkey = orders.orderkey
  AND lineitem.orderkey % 4 = 0
  AND (lineitem.suppkey % 2 = orders.orderkey % 2 OR orders.orderkey IS NULL)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT t.a.col1, custkey, orderkey FROM (VALUES ROW(CAST(ROW(1, 11) AS ROW(col0 integer, col1 integer))), ROW(CAST(ROW(2, 22) AS ROW(col0 integer, col1 integer))), ROW(CAST(ROW(3, 33) AS ROW(col0 integer, col1 integer)))) t(a) INNER JOIN orders ON t.a.col0 = orders.orderkey', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='Wrong page channel count, expected 2 but got 3', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM lineitem WHERE orderkey = 
(SELECT max(orderkey) FROM orders)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM orders a JOIN orders b on a.orderkey = b.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT *, o2.custkey
  IN (
    SELECT orderkey
    FROM lineitem
    WHERE orderkey % 5 = 0)
FROM (SELECT * FROM orders WHERE custkey % 256 = 0) o1
JOIN (SELECT * FROM orders WHERE custkey % 256 = 0) o2
  ON (o1.orderkey IN (SELECT orderkey FROM lineitem WHERE orderkey % 4 = 0)) = (o2.orderkey IN (SELECT orderkey FROM lineitem WHERE orderkey % 4 = 0))
WHERE o1.orderkey
  IN (
    SELECT orderkey
    FROM lineitem
    WHERE orderkey % 4 = 0)
ORDER BY o1.orderkey
  IN (
    SELECT orderkey
    FROM lineitem
    WHERE orderkey % 7 = 0)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey = orders.orderkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT custkey, COUNT(DISTINCT orderstatus) FROM (   SELECT orders.custkey AS custkey, orders.orderstatus AS orderstatus    FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey AND orders.orderkey = lineitem.partkey    GROUP BY orders.custkey, orders.orderstatus) GROUP BY custkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM ( SELECT orderkey, count(*) FROM (   SELECT orderdate ds, orderkey FROM orders    UNION ALL    SELECT shipdate ds, orderkey FROM lineitem) a GROUP BY orderkey) t JOIN orders o ON (o.orderkey = t.orderkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM (   SELECT orderdate ds, orderkey FROM orders    UNION ALL    SELECT shipdate ds, orderkey FROM lineitem) a JOIN orders o ON (a.orderkey = o.orderkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT *
FROM (SELECT orderdate ds, orderkey
      FROM orders
      UNION ALL
      SELECT shipdate ds, orderkey
      FROM lineitem) a
JOIN orders o
ON (substr(cast(a.ds AS VARCHAR), 6, 2) = substr(cast(o.orderdate AS VARCHAR), 6, 2) AND a.orderkey = o.orderkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM (select orderkey, partkey from lineitem) a join (select orderkey, custkey from orders) b using (orderkey)', isError=false}], nbFailures=84, nbErrors=0}
status: NOPATCH
dateEnd: Fri Nov 17 05:38:38 CET 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/303312237/presto-tests/src/main/java], projectClasspath='[Ljava.net.URL;@2ae2fa13', projectTests=[com.facebook.presto.tests.TestDistributedSpilledQueries], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



