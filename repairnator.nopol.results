nopolinfo #0
location: FailureLocation{className='fr.inria.diversify.dspot.assertGenerator.MethodsAssertGeneratorTest', failingMethods=[fr.inria.diversify.dspot.assertGenerator.MethodsAssertGeneratorTest#testBuildNewAssert], erroringMethods=[], failures=[FailureType{failureName='junit.framework.ComparisonFailure', failureDetail='expected:<....junit.Assert.assert[True(((fr.inria.sample.ClassWithBoolean)cl).getTrue());     // AssertGenerator add assertion     org.junit.Assert.assertEquals('a', ((char) (((fr.inria.sample.ClassWithBoolean)cl).getChar())));     // AssertGenerator add assertion     org.junit.Assert.assertTrue(((fr.inria.sample.ClassWithBoolean)cl).getListWithElements().contains("a"));     // AssertGenerator add assertion     org.junit.Assert.assertTrue(((fr.inria.sample.ClassWithBoolean)cl).getListWithElements().contains("b"));     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1.0, ((double) (((fr.inria.sample.ClassWithBoolean)cl).getDouble())));     // AssertGenerator add assertion     org.junit.Assert.assertNull(((fr.inria.sample.ClassWithBoolean)cl).getNull());     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1, ((byte) (((fr.inria.sample.ClassWithBoolean)cl).getByte())));     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1, ((int) (((fr.inria.sample.ClassWithBoolean)cl).getInt())));     // AssertGenerator add assertion     org.junit.Assert.assertTrue(((fr.inria.sample.ClassWithBoolean)cl).getEmptyList().isEmpty());     // AssertGenerator add assertion     org.junit.Assert.assertFalse(((fr.inria.sample.ClassWithBoolean)cl).getFalse());     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1.0F, ((float) (((fr.inria.sample.ClassWithBoolean)cl).getFloat())));     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1, ((short) (((fr.inria.sample.ClassWithBoolean)cl).getShort())));     cl.getFalse();     cl.getBoolean();     java.io.File file = new java.io.File("");     boolean var = cl.getTrue();     // AssertGenerator add assertion     org.junit.Assert.assertTrue(((fr.inria.sample.ClassWithBoolean)cl).getBoolean());     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1L, ((long) (((fr.inria.sample.ClassWithBoolean)cl).getLong())));     // AssertGenerator add assertion     org.junit.Assert.assertEquals("this.is.a.string", ((fr.inria.sample.ClassWithBoolean)cl).getString());     // AssertGenerator add assertion     org.junit.Assert.assertTrue(((fr.inria.sample.ClassWithBoolean)cl).getTrue());     // AssertGenerator add assertion     org.junit.Assert.assertEquals('a', ((char) (((fr.inria.sample.ClassWithBoolean)cl).getChar())]));     // AssertGen...> but was:<....junit.Assert.assert[Equals('a', ((char) (((fr.inria.sample.ClassWithBoolean)cl).getChar())));     // AssertGenerator add assertion     org.junit.Assert.assertTrue(((fr.inria.sample.ClassWithBoolean)cl).getTrue());     // AssertGenerator add assertion     org.junit.Assert.assertTrue(((fr.inria.sample.ClassWithBoolean)cl).getListWithElements().contains("a"));     // AssertGenerator add assertion     org.junit.Assert.assertTrue(((fr.inria.sample.ClassWithBoolean)cl).getListWithElements().contains("b"));     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1.0, ((double) (((fr.inria.sample.ClassWithBoolean)cl).getDouble())));     // AssertGenerator add assertion     org.junit.Assert.assertNull(((fr.inria.sample.ClassWithBoolean)cl).getNull());     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1, ((byte) (((fr.inria.sample.ClassWithBoolean)cl).getByte())));     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1, ((int) (((fr.inria.sample.ClassWithBoolean)cl).getInt())));     // AssertGenerator add assertion     org.junit.Assert.assertTrue(((fr.inria.sample.ClassWithBoolean)cl).getEmptyList().isEmpty());     // AssertGenerator add assertion     org.junit.Assert.assertFalse(((fr.inria.sample.ClassWithBoolean)cl).getFalse());     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1.0F, ((float) (((fr.inria.sample.ClassWithBoolean)cl).getFloat())));     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1, ((short) (((fr.inria.sample.ClassWithBoolean)cl).getShort())));     cl.getFalse();     cl.getBoolean();     java.io.File file = new java.io.File("");     boolean var = cl.getTrue();     // AssertGenerator add assertion     org.junit.Assert.assertTrue(((fr.inria.sample.ClassWithBoolean)cl).getBoolean());     // AssertGenerator add assertion     org.junit.Assert.assertEquals(1L, ((long) (((fr.inria.sample.ClassWithBoolean)cl).getLong())));     // AssertGenerator add assertion     org.junit.Assert.assertEquals("this.is.a.string", ((fr.inria.sample.ClassWithBoolean)cl).getString());     // AssertGenerator add assertion     org.junit.Assert.assertEquals('a', ((char) (((fr.inria.sample.ClassWithBoolean)cl).getChar())));     // AssertGenerator add assertion     org.junit.Assert.assertTrue(((fr.inria.sample.ClassWithBoolean)cl).getTrue(]));     // AssertGen...>', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Mon Jan 22 13:42:06 CET 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/danglotb/dspot/331781375/dspot/src/main/java], projectClasspath='[Ljava.net.URL;@2f382a5e', projectTests=[fr.inria.diversify.dspot.assertGenerator.MethodsAssertGeneratorTest], complianceLevel=8, outputFolder=./, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



