nopolinfo #0
location: FailureLocation{className='org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests', failingMethods=[], erroringMethods=[org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#deletesPersonCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldAllowReturningJava8StreamInCustomQuery, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldFindByFirstnameForSpELExpressionWithParameterIndexOnly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#deleteByUsingAnnotatedQueryShouldReturnNumberOfDocumentsRemovedIfReturnTypeIsLong, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPersonByShippingAddressesCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesDerivedExistsProjectionToBoolean, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPersonByAddressCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#readsDocumentsWithNestedPolymorphismCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleByZipCode, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#existsWorksCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPersonsByFirstnameAsArray, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPersonsByFirstnameLike, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#considersSortForAnnotatedQuery, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#deleteByShouldReturnZeroInCaseNoDocumentHasBeenRemovedAndReturnTypeIsNumber, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPersonInAgeRangeCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldFindByFirstnameAndCurrentUserWithCustomQuery, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#bindsDateParameterForManuallyDefinedQueryCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#deleteByShouldRemoveElementsMatchingDerivedQuery, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#bindsDateParameterForAfterPredicateCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByCustomQueryFirstnamesInListAndLastname, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesGeoNearQueryForResultsCorrectlyWhenGivenMinAndMaxDistance, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldFindByFirstnameForSpELExpressionWithParameterVariableOnly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesPagedFinderCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#sliceShouldTraverseElementsWithoutSkippingOnes, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#deleteByShouldReturnNumberOfDocumentsRemovedIfReturnTypeIsLong, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsAllMusicians, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesDerivedCountProjectionToInt, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesGeoPageQueryForResultsCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPersonsByFirstname, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByFirstNameIgnoreCaseWithNull, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleUsingNotPredicate, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByFirstnameLikeWithNull, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleByLastnameAndOrdersCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#gettingNonFirstPageWorksWithoutLimitBeingSet, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#appliesStaticAndDynamicSorting, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleByzipCodePredicate, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleByLocationWithinBox, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleBySexPaginated, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPersonById, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsSliceOfPersons, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldLimitCollectionQueryToMaxResultsWhenPresent, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#bindsDateParameterToBeforePredicateCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleByNamedQuery, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findAllByExampleShouldResolveStuffCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesGeoPageQueryForWithPageRequestForPageInBetween, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPersonsByFirstnameNotLike, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByFirstnameNotIgnoreCase, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesGeoPageQueryForWithPageRequestForJustOneElement, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldSupportSortingWithQSort, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldLimitPagedQueryWhenPageRequestExceedsUpperBoundary, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPersonsByFirstnameNotContains, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#rejectsDuplicateEmailAddressOnSave, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesDerivedStartsWithQueryCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldBindPlaceholdersUsedAsKeysCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleByLocationNear, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findUsingAnnotatedQueryOnDBRef, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleByLocationWithinPolygon, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findOptionalSingleEntityThrowsErrorWhenNotUnique, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleByQueryDslLastnameSpec, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByNestedPropertyInCollectionShouldFindMatchingDocuments, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findBySkillsNotContains, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsAllWithGivenIds, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldFindPersonsWhenUsingQueryDslPerdicatedOnIdProperty, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#returnsOrderedResultsForQuerydslOrderSpecifier, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByFirstnameContainingIgnoreCase, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldNotLimitPagedQueryWhenPageRequestWithinBounds, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesDerivedCountProjection, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByFirstnameStartingWithIgnoreCase, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesAndQueryCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByFirstnameEndingWithIgnoreCase, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPagedPeopleByPredicate, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleByLocationWithinCircle, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldSupportSortingWithQSortByQueryDslOrderSpecifier, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#adjustedWllKnownFindAllMethodShouldReturnAnEmptyList, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleBySexCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesSingleEntityQueryWithProjectionCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesGeoPageQueryForWithPageRequestForPageAtTheEnd, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByExampleShouldResolveStuffCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#adjustedWellKnownPagedFindAllMethodShouldReturnOnlyTheUserWithFirstnameOliverAugust, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesQueryWithDBRefReferenceCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#readsOpenProjection, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldReturnEmptyWhenPageRequestedPageIsTotallyOutOfScopeForLimit, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#deletesPersonByIdCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByFirstNameIgnoreCase, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldExecuteFindOnDbRefCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesAnnotatedExistProjection, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#shouldSupportSortingByQueryDslOrderSpecifier, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#bindsDateParameterForLessThanPredicateCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByUUIDShouldReturnCorrectResult, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findSingleEntityThrowsErrorWhenNotUnique, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#countsPersonsByFirstname, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesGeoNearQueryForResultsCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesDerivedEndsWithQueryCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesAnnotatedCountProjection, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPeopleByLocationNearUsingGeoJsonType, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#deletesPersonsByFirstname, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findBySkillsContains, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesGeoPageQueryForWithPageRequestForJustOneElementEmptyPage, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#deleteByShouldReturnListOfDeletedElementsWhenRetunTypeIsCollectionLike, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#bindsDateParameterForGreaterThanPredicateCorrectly, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findByCustomQueryLastnameAndStreetInList, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#deleteByShouldReturnEmptyListInCaseNoDocumentHasBeenRemovedAndReturnTypeIsCollectionLike, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPersonsByLastname, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findFirstEntityReturnsFirstResultEvenForNonUniqueMatches, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#readsClosedProjection, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#findsPagedPersons, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#deleteByUsingAnnotatedQueryShouldReturnListOfDeletedElementsWhenRetunTypeIsCollectionLike, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#deleteByUsingAnnotatedQueryShouldRemoveElementsMatchingDerivedQuery, org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests#executesPagedFinderWithAnnotatedQueryCorrectly], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=109}
status: EXCEPTION
dateEnd: Tue Mar 27 23:32:15 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java], projectClasspath='[Ljava.net.URL;@60dd3c23', projectTests=[org.springframework.data.mongodb.repository.RedeclaringRepositoryMethodsTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-data-mongodb/359001584, json=false}
exception: Cannot infer type arguments for ReactiveUpdateSupport<> at /root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/ReactiveUpdateOperationSupport.java:77
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #1
location: FailureLocation{className='org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonByShippingAddressesCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstNameIgnoreCase, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForLessThanPredicateCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#exposesPersistentEntity, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldSupportSortingWithQSort, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationWithinBox, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#readsOpenProjection, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForPageInBetween, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deletesPersonsByFirstname, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByUUIDShouldReturnCorrectResult, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameAsArray, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonInAgeRangeCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldNotLimitPagedQueryWhenPageRequestWithinBounds, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#assertDefaultMappingContextIsWired, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByNamedQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindByFirstnameAndCurrentUserWithCustomQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findSingleEntityThrowsErrorWhenNotUnique, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByUsingAnnotatedQueryShouldReturnListOfDeletedElementsWhenRetunTypeIsCollectionLike, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForJustOneElement, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesPagedFinderWithAnnotatedQueryCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedExistsProjectionToBoolean, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#countsPersonsByFirstname, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByUsingAnnotatedQueryShouldReturnNumberOfDocumentsRemovedIfReturnTypeIsLong, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesAnnotatedExistProjection, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedEndsWithQueryCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForManuallyDefinedQueryCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#existsWorksCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsSliceOfPersons, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationNear, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForResultsCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnListOfDeletedElementsWhenRetunTypeIsCollectionLike, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#gettingNonFirstPageWorksWithoutLimitBeingSet, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deletesPersonCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#rejectsDuplicateEmailAddressOnSave, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationWithinCircle, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#readsClosedProjection, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationNearUsingGeoJsonType, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#appliesStaticAndDynamicSorting, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByExampleShouldResolveStuffCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByUsingAnnotatedQueryShouldRemoveElementsMatchingDerivedQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#returnsOrderedResultsForQuerydslOrderSpecifier, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForJustOneElementEmptyPage, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#considersSortForAnnotatedQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByCustomQueryLastnameAndStreetInList, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterToBeforePredicateCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldLimitCollectionQueryToMaxResultsWhenPresent, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findFirstEntityReturnsFirstResultEvenForNonUniqueMatches, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesQueryWithDBRefReferenceCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLastnameAndOrdersCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByQueryDslLastnameSpec, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonByAddressCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameNotContains, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameNotLike, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldReturnEmptyWhenPageRequestedPageIsTotallyOutOfScopeForLimit, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnZeroInCaseNoDocumentHasBeenRemovedAndReturnTypeIsNumber, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesAnnotatedCountProjection, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findBySkillsContains, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByCustomQueryFirstnamesInListAndLastname, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForPageAtTheEnd, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedCountProjectionToInt, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findOptionalSingleEntityThrowsErrorWhenNotUnique, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForGreaterThanPredicateCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedCountProjection, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldExecuteFindOnDbRefCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesSingleEntityQueryWithProjectionCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindByFirstnameForSpELExpressionWithParameterVariableOnly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPagedPersons, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedStartsWithQueryCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldBindPlaceholdersUsedAsKeysCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldSupportSortingWithQSortByQueryDslOrderSpecifier, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findBySkillsNotContains, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesAndQueryCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByLastname, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonById, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesPagedFinderCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameStartingWithIgnoreCase, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleBySexPaginated, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindPersonsWhenUsingQueryDslPerdicatedOnIdProperty, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldAllowReturningJava8StreamInCustomQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByNestedPropertyInCollectionShouldFindMatchingDocuments, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstNameIgnoreCaseWithNull, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForAfterPredicateCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameEndingWithIgnoreCase, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findAllByExampleShouldResolveStuffCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstname, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindByFirstnameForSpELExpressionWithParameterIndexOnly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByZipCode, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameContainingIgnoreCase, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameLikeWithNull, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsAllMusicians, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameNotIgnoreCase, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldSupportSortingByQueryDslOrderSpecifier, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnNumberOfDocumentsRemovedIfReturnTypeIsLong, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleBySexCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoNearQueryForResultsCorrectlyWhenGivenMinAndMaxDistance, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#sliceShouldTraverseElementsWithoutSkippingOnes, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#readsDocumentsWithNestedPolymorphismCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findUsingAnnotatedQueryOnDBRef, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoNearQueryForResultsCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPagedPeopleByPredicate, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameLike, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsAllWithGivenIds, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldRemoveElementsMatchingDerivedQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationWithinPolygon, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deletesPersonByIdCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByzipCodePredicate, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleUsingNotPredicate, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnEmptyListInCaseNoDocumentHasBeenRemovedAndReturnTypeIsCollectionLike, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldLimitPagedQueryWhenPageRequestExceedsUpperBoundary], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=109}
status: EXCEPTION
dateEnd: Tue Mar 27 23:32:16 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java], projectClasspath='[Ljava.net.URL;@5e976553', projectTests=[org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-data-mongodb/359001584, json=false}
exception: Cannot infer type arguments for ReactiveUpdateSupport<> at /root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/ReactiveUpdateOperationSupport.java:77
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #2
location: FailureLocation{className='org.springframework.data.mongodb.repository.ComplexIdRepositoryIntegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.mongodb.repository.ComplexIdRepositoryIntegrationTests#composedAnnotationFindMetaShouldWorkWhenUsingComplexId, org.springframework.data.mongodb.repository.ComplexIdRepositoryIntegrationTests#findAllShouldWorkWhenUsingComplexId, org.springframework.data.mongodb.repository.ComplexIdRepositoryIntegrationTests#findOneShouldWorkWhenUsingComplexId, org.springframework.data.mongodb.repository.ComplexIdRepositoryIntegrationTests#composedAnnotationFindQueryShouldWorkWhenUsingComplexId, org.springframework.data.mongodb.repository.ComplexIdRepositoryIntegrationTests#annotatedFindQueryShouldWorkWhenUsingComplexIdWithinCollection, org.springframework.data.mongodb.repository.ComplexIdRepositoryIntegrationTests#annotatedFindQueryShouldWorkWhenUsingComplexId], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=6}
status: EXCEPTION
dateEnd: Tue Mar 27 23:32:18 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java], projectClasspath='[Ljava.net.URL;@484a91f5', projectTests=[org.springframework.data.mongodb.repository.ComplexIdRepositoryIntegrationTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-data-mongodb/359001584, json=false}
exception: Cannot infer type arguments for ReactiveUpdateSupport<> at /root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/ReactiveUpdateOperationSupport.java:77
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #3
location: FailureLocation{className='org.springframework.data.mongodb.repository.PersonRepositoryLazyLoadingIntegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.mongodb.repository.PersonRepositoryLazyLoadingIntegrationTests#shouldLoadAssociationWithDbRefOnConcreteDomainClassAndLazyLoadingEnabled, org.springframework.data.mongodb.repository.PersonRepositoryLazyLoadingIntegrationTests#shouldLoadAssociationWithDbRefOnInterfaceAndLazyLoadingEnabled, org.springframework.data.mongodb.repository.PersonRepositoryLazyLoadingIntegrationTests#shouldLoadAssociationWithDbRefOnConcreteCollectionAndLazyLoadingEnabled], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=3}
status: EXCEPTION
dateEnd: Tue Mar 27 23:32:20 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java], projectClasspath='[Ljava.net.URL;@79b0128d', projectTests=[org.springframework.data.mongodb.repository.PersonRepositoryLazyLoadingIntegrationTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-data-mongodb/359001584, json=false}
exception: Cannot infer type arguments for ReactiveUpdateSupport<> at /root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/ReactiveUpdateOperationSupport.java:77
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #4
location: FailureLocation{className='org.springframework.data.mongodb.repository.cdi.CdiExtensionIntegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.mongodb.repository.cdi.CdiExtensionIntegrationTests#bootstrapsRepositoryCorrectly], failures=[FailureType{failureName='org.springframework.dao.DataAccessResourceFailureException', failureDetail='Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type=UNKNOWN, servers=[{address=127.0.0.1:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type=UNKNOWN, servers=[{address=127.0.0.1:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]', isError=true}], nbFailures=0, nbErrors=1}
status: EXCEPTION
dateEnd: Tue Mar 27 23:32:22 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java], projectClasspath='[Ljava.net.URL;@1fa07f1b', projectTests=[org.springframework.data.mongodb.repository.cdi.CdiExtensionIntegrationTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-data-mongodb/359001584, json=false}
exception: Cannot infer type arguments for ReactiveUpdateSupport<> at /root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/ReactiveUpdateOperationSupport.java:77
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #5
location: FailureLocation{className='org.springframework.data.mongodb.repository.config.MongoRepositoriesRegistrarIntegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.mongodb.repository.config.MongoRepositoriesRegistrarIntegrationTests#testConfiguration], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=1}
status: EXCEPTION
dateEnd: Tue Mar 27 23:32:24 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java], projectClasspath='[Ljava.net.URL;@c617585', projectTests=[org.springframework.data.mongodb.repository.config.MongoRepositoriesRegistrarIntegrationTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-data-mongodb/359001584, json=false}
exception: Cannot infer type arguments for ReactiveUpdateSupport<> at /root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/ReactiveUpdateOperationSupport.java:77
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #6
location: FailureLocation{className='org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoriesRegistrarIntegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoriesRegistrarIntegrationTests#testConfiguration], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=1}
status: EXCEPTION
dateEnd: Tue Mar 27 23:32:25 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java], projectClasspath='[Ljava.net.URL;@7e216277', projectTests=[org.springframework.data.mongodb.repository.config.ReactiveMongoRepositoriesRegistrarIntegrationTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-data-mongodb/359001584, json=false}
exception: Cannot infer type arguments for ReactiveUpdateSupport<> at /root/workspace/spring-projects/spring-data-mongodb/359001584/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/ReactiveUpdateOperationSupport.java:77
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



