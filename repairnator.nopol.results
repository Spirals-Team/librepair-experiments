nopolinfo #0
location: FailureLocation{className='com.facebook.presto.tests.TestDistributedSpilledQueries', failingMethods=[com.facebook.presto.tests.TestDistributedSpilledQueries#testAggregationPushedBelowOuterJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxSetDoubleGroupBy, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByBetween, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetMixedExpressionAndColumn, com.facebook.presto.tests.TestDistributedSpilledQueries#testCubeNoInput, com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedExistsSubqueries, com.facebook.presto.tests.TestDistributedSpilledQueries#testMergeHyperLogLogGroupBy, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsRepeatedSetsDistinct, com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxSetBigintGroupBy, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByRepeatedField2, com.facebook.presto.tests.TestDistributedSpilledQueries#testRollupOverUnion, com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxSetVarcharGroupBy, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByWithNulls, com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetGroupByWithNulls, com.facebook.presto.tests.TestDistributedSpilledQueries#testApproximateCountDistinctGroupByWithStandardError, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithSingleDistinctAndUnion, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupBySearchedCaseNoElse, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithSingleDistinct, com.facebook.presto.tests.TestDistributedSpilledQueries#testSingleDistinctOptimizer, com.facebook.presto.tests.TestDistributedSpilledQueries#testExistsSubqueryWithGroupBy, com.facebook.presto.tests.TestDistributedSpilledQueries#testSingleGroupingSet, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupAggregationOverNestedGroupByAggregation, com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedInPredicateSubqueries, com.facebook.presto.tests.TestDistributedSpilledQueries#testCustomRank, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByWithAlias, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsMultipleAggregatesOnGroupedColumn, com.facebook.presto.tests.TestDistributedSpilledQueries#testExceptWithAggregation, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithMultipleDistinct, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinAggregations, com.facebook.presto.tests.TestDistributedSpilledQueries#testTry, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsGrandTotalSetFirst, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsAggregateOnGroupedColumn, com.facebook.presto.tests.TestDistributedSpilledQueries#testAssignUniqueId, com.facebook.presto.tests.TestDistributedSpilledQueries#test15WayGroupBy, com.facebook.presto.tests.TestDistributedSpilledQueries#testRollup, com.facebook.presto.tests.TestDistributedSpilledQueries#testCustomSum, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByRow, com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedExistsSubqueriesWithEqualityPredicatesInWhere, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByWithoutAggregation, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingCombinationsDistinct, com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoinWithGroupBy, com.facebook.presto.tests.TestDistributedSpilledQueries#testAggregationOverRightJoinOverSingleStreamProbe, com.facebook.presto.tests.TestDistributedSpilledQueries#testScalarSubqueryWithGroupBy, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsGrandTotalSet, com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedScalarSubqueriesWithScalarAggregationAndEqualityPredicatesInWhere, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSets, com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxPercentile, com.facebook.presto.tests.TestDistributedSpilledQueries#testIntersectWithAggregation, com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedScalarSubqueriesWithScalarAggregation, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithSingleDistinctAndUnionGroupedArguments, com.facebook.presto.tests.TestDistributedSpilledQueries#testMaxMinStringWithNulls, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByRequireIntegerCoercion, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByKeyPredicatePushdown, com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithAggregation, com.facebook.presto.tests.TestDistributedSpilledQueries#testExcept, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsRepeatedSetsAll, com.facebook.presto.tests.TestDistributedSpilledQueries#testExtractDistinctAggregationOptimizer, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsMultipleAggregatesOnUngroupedColumn, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithMultipleDistinctAndUnion, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByCoalesce, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByCaseNoElse, com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByCast, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByNullIf, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByRepeatedField, com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByWithAggregation, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByOrdinal, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByCase, com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctGroupBy, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByCount, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingInWindowFunction, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithGlobalAggregationNoInput, com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctMultipleFields, com.facebook.presto.tests.TestDistributedSpilledQueries#testExistsSubquery, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithConstantPredicatePushDown, com.facebook.presto.tests.TestDistributedSpilledQueries#testApproximateCountDistinctGroupBy, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsRepeatedSetsAllNoInput, com.facebook.presto.tests.TestDistributedSpilledQueries#testCube, com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedExistsSubqueriesWithPrunedCorrelationSymbols, com.facebook.presto.tests.TestDistributedSpilledQueries#testHaving, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingCombinationsAll, com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctHaving, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByOnSupersetOfPartitioning, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetMixedExpressionAndOrdinal, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingInTableSubquery, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinCoercionOnEqualityComparison, com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxSetGroupByWithOnlyNullsInOneGroup, com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testMergeHyperLogLogGroupByWithNulls, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetSubsetAndPartitioning, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsMultipleAggregatesWithGroupedColumns, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByMap, com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinConstantPropagation, com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctWindow, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetPredicatePushdown, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByArray, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByIf, com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithAggregationAndJoin, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByMultipleFields, com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxSetGroupByWithNulls, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsAliasedGroupingColumns, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByNullConstant, com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupBySearchedCase], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT     orderkey + 1, orderkey + 2, orderkey + 3, orderkey + 4, orderkey + 5,     orderkey + 6, orderkey + 7, orderkey + 8, orderkey + 9, orderkey + 10,     count(*) FROM orders GROUP BY     orderkey + 1, orderkey + 2, orderkey + 3, orderkey + 4, orderkey + 5,     orderkey + 6, orderkey + 7, orderkey + 8, orderkey + 9, orderkey + 10', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT
  value
FROM
(
    SELECT
        key
    FROM
        (VALUES 'match') as a(key)
        LEFT JOIN (SELECT * FROM (VALUES (0)) limit 0) AS x(ignored)
        ON TRUE
    GROUP BY 1
) a
RIGHT JOIN
(
    VALUES
    ('match', 'value'),
    ('no-match', 'value')
) AS b(key, value)
ON a.key = b.key
GROUP BY 1
', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT max(name), min(name), count(nationkey) + 1, count(nationkey) FROM (SELECT DISTINCT regionkey FROM region) as r1 LEFT JOIN nation ON r1.regionkey = nation.regionkey GROUP BY r1.regionkey HAVING sum(nationkey) < 20', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT count(*) FROM (SELECT * FROM (   SELECT (SELECT count(*) WHERE c = 1)    FROM (SELECT CASE orderkey WHEN 1 THEN orderkey ELSE 1 END        FROM (SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem)) o(c)) result(a) WHERE a = 1)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT count(*) FROM orders o WHERE EXISTS(SELECT 1 FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 1000 = 0)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT EXISTS(SELECT 1 WHERE o.orderkey = 1) FROM orders o', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT max(o.totalprice), o.orderkey FROM orders o GROUP BY o.orderkey, EXISTS (SELECT o.orderkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderkey, clerk IN (SELECT clerk FROM orders s WHERE s.custkey = o.custkey AND s.orderkey < o.orderkey) FROM orders o', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT count(*) FROM orders o WHERE (SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0) > 100', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT (SELECT count(*) WHERE o.orderkey = 1) FROM orders o', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY CUBE (linenumber, suppkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem WHERE quantity < 0 GROUP BY CUBE (linenumber, suppkey)', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderstatus, custom_sum(orderkey) FROM orders GROUP BY orderstatus', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(DISTINCT clerk) as count, orderdate FROM orders GROUP BY orderdate ORDER BY count, orderdate', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(DISTINCT clerk) AS count FROM orders GROUP BY orderdate HAVING COUNT(DISTINCT clerk) > 1', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT(DISTINCT CAST(b.quantity AS BIGINT)), a.orderstatus FROM orders a JOIN lineitem b ON a.orderkey = b.orderkey GROUP BY a.orderstatus', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT DISTINCT custkey, orderstatus FROM ORDERS', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT num FROM (SELECT 1 as num FROM nation WHERE nationkey=10 EXCEPT SELECT 2 FROM nation WHERE nationkey=20) T', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT SUM(nationkey), COUNT(name) FROM (SELECT nationkey, name FROM nation where nationkey < 6 EXCEPT SELECT regionkey, name FROM nation) n', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT o1.orderkey, COUNT(*) FROM orders o1 LEFT JOIN (SELECT * FROM orders LIMIT 10) o2 ON EXISTS(SELECT avg(orderkey) FROM ORDERS) GROUP BY o1.orderkey ORDER BY o1.orderkey LIMIT 5', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, min(orderkey), EXISTS(SELECT orderkey FROM orders WHERE orderkey < 7)FROM lineitem GROUP BY linenumber', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT max(orderstatus), COUNT(orderkey), sum(DISTINCT orderkey) FROM orders', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT sum(custkey), max(orderstatus), min(c) FROM (SELECT orderstatus, custkey, COUNT(*) c FROM ORDERS GROUP BY orderstatus, custkey) T', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT col[1], count FROM (SELECT ARRAY[custkey] col, COUNT(*) count FROM ORDERS GROUP BY 1 ORDER BY 1)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderkey BETWEEN 1 AND 100 FROM orders GROUP BY orderkey BETWEEN 1 AND 100 ', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT CASE orderstatus WHEN 'O' THEN 'a' ELSE 'b' END, count(*)
FROM orders
GROUP BY CASE orderstatus WHEN 'O' THEN 'a' ELSE 'b' END', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT CASE orderstatus WHEN 'O' THEN 'a' END, count(*)
FROM orders
GROUP BY CASE orderstatus WHEN 'O' THEN 'a' END', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT CAST(orderkey AS VARCHAR), count(*) FROM orders GROUP BY CAST(orderkey AS VARCHAR)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COALESCE(orderkey, custkey), count(*) FROM orders GROUP BY COALESCE(orderkey, custkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderstatus, COUNT(*) FROM ORDERS GROUP BY orderstatus', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT IF(orderkey between 1 and 5, 'orders', 'others'), sum(totalprice) FROM orders GROUP BY 1', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT *
FROM (
  SELECT custkey1, orderstatus1, SUM(totalprice1) totalprice, MAX(custkey2) maxcustkey
  FROM (
    SELECT *
    FROM (
      SELECT custkey custkey1, orderstatus orderstatus1, CAST(totalprice AS BIGINT) totalprice1, orderkey orderkey1
      FROM orders
    ) orders1 
    JOIN (
      SELECT custkey custkey2, orderstatus orderstatus2, CAST(totalprice AS BIGINT) totalprice2, orderkey orderkey2
      FROM orders
    ) orders2 ON orders1.orderkey1 = orders2.orderkey2
  ) 
  GROUP BY custkey1, orderstatus1
)
WHERE custkey1 = maxcustkey
AND maxcustkey % 2 = 0 
AND orderstatus1 = 'F'
AND totalprice > 10000
ORDER BY custkey1, orderstatus1, totalprice, maxcustkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT col[1], count FROM (SELECT MAP(ARRAY[1], ARRAY[custkey]) col, COUNT(*) count FROM ORDERS GROUP BY 1)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT custkey, orderstatus, COUNT(*) FROM ORDERS GROUP BY custkey, orderstatus', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT count(*)
FROM (
  SELECT cast(null as VARCHAR) constant, orderdate
  FROM orders
) a
group by constant, orderdate
', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT NULLIF(orderkey, custkey), count(*) FROM orders GROUP BY NULLIF(orderkey, custkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderdate, c, count(*) FROM (SELECT orderdate, count(*) c FROM orders GROUP BY orderdate) GROUP BY orderdate, c', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderstatus, sum(totalprice) FROM orders GROUP BY 1', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT sum(custkey) FROM orders GROUP BY orderstatus, orderstatus', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT count(*) FROM (select orderstatus a, orderstatus b FROM orders) GROUP BY a, b', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT partkey, COUNT(DISTINCT shipdate), SUM(linenumber) FROM lineitem GROUP BY partkey', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT col.col1, count FROM (SELECT cast(row(custkey, custkey) as row(col0 bigint, col1 bigint)) col, COUNT(*) count FROM ORDERS GROUP BY 1)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT CASE WHEN orderstatus = 'O' THEN 'a' ELSE 'b' END, count(*)
FROM orders
GROUP BY CASE WHEN orderstatus = 'O' THEN 'a' ELSE 'b' END', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT CASE WHEN orderstatus = 'O' THEN 'a' END, count(*)
FROM orders
GROUP BY CASE WHEN orderstatus = 'O' THEN 'a' END', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderdate x, COUNT(*) FROM orders GROUP BY orderdate', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT key, COUNT(*) FROM (SELECT CASE   WHEN orderkey % 3 = 0 THEN NULL   WHEN orderkey % 5 = 0 THEN 0   ELSE orderkey   END as key FROM lineitem) GROUP BY key', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderstatus FROM orders GROUP BY orderstatus', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderkey, partkey, suppkey, linenumber, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY orderkey, partkey, ROLLUP (suppkey, linenumber), CUBE (linenumber)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderkey, partkey, suppkey, linenumber, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY DISTINCT orderkey, partkey, ROLLUP (suppkey, linenumber), CUBE (linenumber)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderkey, custkey, g, sum(agg_price) as outer_sum, grouping(orderkey, custkey) FROM     (SELECT orderkey, custkey, sum(totalprice) as agg_price, grouping(custkey, orderkey) as g      FROM orders      GROUP BY GROUPING SETS ((custkey), (orderkey))      ORDER BY agg_price ASC      LIMIT 5) as t GROUP BY orderkey, custkey, g', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderkey, custkey, sum(totalprice), grouping(orderkey)+grouping(custkey) as g,        rank() OVER (PARTITION BY grouping(orderkey)+grouping(custkey),        CASE WHEN grouping(orderkey) = 0 THEN custkey END ORDER BY orderkey ASC) as r FROM orders GROUP BY ROLLUP (orderkey, custkey) ORDER BY orderkey, custkey LIMIT 10', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT suppkey, month(shipdate), SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY month(shipdate), ROLLUP(suppkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT suppkey, month(shipdate), SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY 2, ROLLUP(suppkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM (SELECT COALESCE(orderpriority, 'ALL'), COALESCE(shippriority, -1) sp FROM (SELECT orderpriority, shippriority, COUNT(1) FROM orders GROUP BY GROUPING SETS ((orderpriority), (shippriority)))) WHERE sp=-1', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT COUNT_IF(x IS NULL) FROM (SELECT x, y, COUNT(z) FROM (SELECT CAST(lineitem.orderkey AS BIGINT) x, lineitem.linestatus y, SUM(lineitem.quantity) z FROM lineitem JOIN orders ON lineitem.orderkey = orders.orderkey GROUP BY 1, 2) GROUP BY GROUPING SETS ((x, y), ()))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), (suppkey))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderpriority, COUNT(orderpriority) FROM orders GROUP BY ROLLUP (orderpriority)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT lna, lnb, SUM(quantity) FROM (SELECT linenumber lna, linenumber lnb, CAST(quantity AS BIGINT) quantity FROM lineitem) GROUP BY GROUPING SETS ((lna, lnb), (lna), (lnb), ())', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), ())', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((), (linenumber), (linenumber, suppkey))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(suppkey), COUNT(linenumber), SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), ())', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, COUNT(CAST(quantity AS BIGINT)), SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), ())', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, COUNT(linenumber), SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), ())', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((), (linenumber, suppkey), (), (linenumber, suppkey))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem WHERE quantity < 0 GROUP BY GROUPING SETS ((), (linenumber, suppkey), (), (linenumber, suppkey))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY DISTINCT GROUPING SETS ((), (linenumber, suppkey), (), (linenumber, suppkey))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem WHERE quantity < 0 GROUP BY GROUPING SETS ((linenumber, suppkey), (suppkey), ())', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(DISTINCT CAST(quantity AS BIGINT)), COUNT(DISTINCT linestatus) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), (suppkey))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, COUNT(DISTINCT linenumber), SUM(DISTINCT suppkey) FROM (SELECT * FROM lineitem WHERE linenumber%2 = 0 UNION ALL SELECT * FROM lineitem WHERE linenumber%2 = 1) GROUP BY GROUPING SETS ((linenumber), ())', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(DISTINCT CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), (suppkey))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT suppkey, COUNT(DISTINCT linenumber) FROM (SELECT * FROM lineitem WHERE linenumber%2 = 0 UNION ALL SELECT * FROM lineitem WHERE linenumber%2 = 1) GROUP BY GROUPING SETS ((suppkey), ())', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, COUNT(DISTINCT linenumber) FROM (SELECT * FROM lineitem WHERE linenumber%2 = 0 UNION ALL SELECT * FROM lineitem WHERE linenumber%2 = 1) GROUP BY GROUPING SETS ((linenumber), ())', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderstatus, sum(totalprice) FROM orders GROUP BY orderstatus HAVING orderstatus = 'O'', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT SUM(nationkey), COUNT(name) FROM (SELECT nationkey,name FROM nation INTERSECT SELECT regionkey, name FROM nation) n', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT x + y FROM (   SELECT orderdate, COUNT(*) x FROM orders GROUP BY orderdate) a JOIN (   SELECT orderdate, COUNT(*) y FROM orders GROUP BY orderdate) b ON a.orderdate = b.orderdate', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT o.clerk, avg(o.shippriority), COUNT(l.linenumber) FROM orders o LEFT OUTER JOIN lineitem l ON o.orderkey=l.orderkey AND o.shippriority=1 GROUP BY o.clerk', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT x, y, COUNT(*)
FROM (SELECT orderkey, 0 AS x FROM orders) a 
JOIN (SELECT orderkey, 1 AS y FROM orders) b 
ON a.orderkey = b.orderkey
GROUP BY 1, 2', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT
  a.orderstatus
  , a.clerk
FROM (
  SELECT DISTINCT orderstatus, clerk FROM orders
) a
INNER JOIN (
  SELECT DISTINCT orderstatus, clerk FROM orders
) b
ON
  a.orderstatus = b.orderstatus
  and a.clerk = b.clerk
where a.orderstatus = 'F'
', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT custkey, MAX(NULLIF(orderstatus, 'O')), MIN(NULLIF(orderstatus, 'O')) FROM orders GROUP BY custkey', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: select count(*) , letter from (select substr(name,1,1) letter from nation) x group by letter order by x.letter', isError=false}, FailureType{failureName='com.facebook.presto.client.FailureInfo$FailureException', failureDetail='No free space available for spill', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY ROLLUP (linenumber, suppkey)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderstatus, sum(orderkey)
FROM (SELECT orderkey, orderstatus
      FROM orders
      UNION ALL
      SELECT orderkey, orderstatus
      FROM orders) x
GROUP BY ROLLUP (orderstatus)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, min(orderkey), (SELECT max(orderkey) FROM orders WHERE orderkey < 7)FROM lineitem GROUP BY linenumber, (SELECT max(orderkey) FROM orders WHERE orderkey < 7)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT orderkey
  IN (
    SELECT orderkey
    FROM lineitem
    WHERE partkey % 4 = 0),
  SUM(
    CASE
      WHEN orderkey
        IN (
          SELECT orderkey
          FROM lineitem
          WHERE suppkey % 4 = 0)
      THEN 1
      ELSE 0
      END)
FROM orders
GROUP BY orderkey
  IN (
    SELECT orderkey
    FROM lineitem
    WHERE partkey % 4 = 0)
HAVING SUM(
  CASE
    WHEN orderkey
      IN (
        SELECT orderkey
        FROM lineitem
        WHERE suppkey % 4 = 0)
      THEN 1
      ELSE 0
      END) > 1', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, min(orderkey) FROM lineitem GROUP BY linenumber HAVING 6 IN (SELECT orderkey FROM orders WHERE orderkey < 7)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT custkey, orderstatus, COUNT(DISTINCT orderkey), SUM(DISTINCT orderkey) FROM orders GROUP BY custkey, orderstatus', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS (linenumber)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT linenumber, sum(TRY(100/(CAST (tax*10 AS BIGINT)))) FROM lineitem GROUP BY linenumber', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT ds, count(*) FROM (   SELECT orderdate ds, orderkey FROM orders    UNION    SELECT shipdate ds, orderkey FROM lineitem) a GROUP BY ds', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Execution of 'actual' query failed: SELECT * FROM ( SELECT orderkey, count(*) FROM (   SELECT orderdate ds, orderkey FROM orders    UNION ALL    SELECT shipdate ds, orderkey FROM lineitem) a GROUP BY orderkey) t JOIN orders o ON (o.orderkey = t.orderkey)', isError=false}], nbFailures=103, nbErrors=0}
status: NOPATCH
dateEnd: Wed Aug 30 01:56:45 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/269711646/presto-tests/src/main/java], projectClasspath='[Ljava.net.URL;@30331109', projectTests=[com.facebook.presto.tests.TestDistributedSpilledQueries], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



