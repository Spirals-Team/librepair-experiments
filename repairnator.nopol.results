nopolinfo #0
location: FailureLocation{className='org.molgenis.data.importer.emx.EmxDataProviderTest', failingMethods=[org.molgenis.data.importer.emx.EmxDataProviderTest#testGetEntitiesAlternativeEntityTypeId, org.molgenis.data.importer.emx.EmxDataProviderTest#tearDownAfterMethod, org.molgenis.data.importer.emx.EmxDataProviderTest#testGetEntitiesAlternativeEntityTypeIdUnknownRepository], erroringMethods=[], failures=[FailureType{failureName='org.mockito.exceptions.misusing.PotentialStubbingProblem', failureDetail='
Strict stubbing argument mismatch. Please check:
 - this invocation of 'getRepository' method:
    repositoryCollection.getRepository(
    Mock for EntityType, hashCode: 284394658
);
    -> at org.molgenis.data.importer.emx.EmxDataProvider.getEntities(EmxDataProvider.java:61)
 - has following stubbing(s) with different arguments:
    1. repositoryCollection.getRepository(
    "EntityTypeId"
);
      -> at org.molgenis.data.importer.emx.EmxDataProviderTest.testGetEntitiesAlternativeEntityTypeId(EmxDataProviderTest.java:122)
Typically, stubbing argument mismatch indicates user mistake when writing tests.
Mockito fails early so that you can debug potential problem easily.
However, there are legit scenarios when this exception generates false negative signal:
  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API
    Please use 'will().given()' or 'doReturn().when()' API for stubbing.
  - stubbed method is intentionally invoked with different arguments by code under test
    Please use 'default' or 'silent' JUnit Rule.
For more information see javadoc for PotentialStubbingProblem class.', isError=false}, FailureType{failureName='org.testng.TestException', failureDetail='
Expected exception org.molgenis.data.UnknownRepositoryException but got org.mockito.exceptions.misusing.PotentialStubbingProblem: 
Strict stubbing argument mismatch. Please check:
 - this invocation of 'getRepository' method:
    repositoryCollection.getRepository(
    Mock for EntityType, hashCode: 354764137
);
    -> at org.molgenis.data.importer.emx.EmxDataProvider.getEntities(EmxDataProvider.java:61)
 - has following stubbing(s) with different arguments:
    1. repositoryCollection.getRepository(
    "EntityTypeId"
);
      -> at org.molgenis.data.importer.emx.EmxDataProviderTest.testGetEntitiesAlternativeEntityTypeIdUnknownRepository(EmxDataProviderTest.java:149)
Typically, stubbing argument mismatch indicates user mistake when writing tests.
Mockito fails early so that you can debug potential problem easily.
However, there are legit scenarios when this exception generates false negative signal:
  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API
    Please use 'will().given()' or 'doReturn().when()' API for stubbing.
  - stubbed method is intentionally invoked with different arguments by code under test
    Please use 'default' or 'silent' JUnit Rule.
For more information see javadoc for PotentialStubbingProblem class.', isError=false}, FailureType{failureName='org.mockito.exceptions.misusing.UnnecessaryStubbingException', failureDetail='
Unnecessary stubbings detected.
Clean & maintainable test code requires zero unnecessary code.
Following stubbings are unnecessary (click to navigate to relevant line of code):
  1. -> at org.molgenis.data.importer.emx.EmxDataProviderTest.testGetEntitiesUnknownRepository(EmxDataProviderTest.java:132)
Please remove unnecessary stubbings or use 'silent' option. More info: javadoc for UnnecessaryStubbingException class.', isError=false}], nbFailures=3, nbErrors=0}
status: NOPATCH
dateEnd: Tue Apr 03 09:33:20 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/molgenis/molgenis/361505910/molgenis-data-import/src/main/java], projectClasspath='[Ljava.net.URL;@1cb7936c', projectTests=[org.molgenis.data.importer.emx.EmxDataProviderTest], complianceLevel=8, outputFolder=./workspace/molgenis/molgenis/361505910, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



