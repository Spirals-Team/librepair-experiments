nopolinfo #0
location: FailureLocation{className='org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonByShippingAddressesCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstNameIgnoreCase, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForLessThanPredicateCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#exposesPersistentEntity, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldSupportSortingWithQSort, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationWithinBox, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#readsOpenProjection, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForPageInBetween, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deletesPersonsByFirstname, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByUUIDShouldReturnCorrectResult, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameAsArray, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonInAgeRangeCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldNotLimitPagedQueryWhenPageRequestWithinBounds, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#assertDefaultMappingContextIsWired, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByNamedQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindByFirstnameAndCurrentUserWithCustomQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findSingleEntityThrowsErrorWhenNotUnique, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByUsingAnnotatedQueryShouldReturnListOfDeletedElementsWhenRetunTypeIsCollectionLike, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForJustOneElement, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesPagedFinderWithAnnotatedQueryCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedExistsProjectionToBoolean, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#countsPersonsByFirstname, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByUsingAnnotatedQueryShouldReturnNumberOfDocumentsRemovedIfReturnTypeIsLong, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesAnnotatedExistProjection, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedEndsWithQueryCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForManuallyDefinedQueryCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#existsWorksCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsSliceOfPersons, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationNear, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForResultsCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnListOfDeletedElementsWhenRetunTypeIsCollectionLike, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#gettingNonFirstPageWorksWithoutLimitBeingSet, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deletesPersonCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#rejectsDuplicateEmailAddressOnSave, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationWithinCircle, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#readsClosedProjection, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationNearUsingGeoJsonType, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#appliesStaticAndDynamicSorting, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByExampleShouldResolveStuffCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByUsingAnnotatedQueryShouldRemoveElementsMatchingDerivedQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#returnsOrderedResultsForQuerydslOrderSpecifier, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForJustOneElementEmptyPage, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#considersSortForAnnotatedQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByCustomQueryLastnameAndStreetInList, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterToBeforePredicateCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldLimitCollectionQueryToMaxResultsWhenPresent, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findFirstEntityReturnsFirstResultEvenForNonUniqueMatches, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesQueryWithDBRefReferenceCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLastnameAndOrdersCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByQueryDslLastnameSpec, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonByAddressCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameNotContains, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameNotLike, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldReturnEmptyWhenPageRequestedPageIsTotallyOutOfScopeForLimit, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnZeroInCaseNoDocumentHasBeenRemovedAndReturnTypeIsNumber, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesAnnotatedCountProjection, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findBySkillsContains, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByCustomQueryFirstnamesInListAndLastname, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForPageAtTheEnd, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedCountProjectionToInt, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findOptionalSingleEntityThrowsErrorWhenNotUnique, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForGreaterThanPredicateCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedCountProjection, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldExecuteFindOnDbRefCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesSingleEntityQueryWithProjectionCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindByFirstnameForSpELExpressionWithParameterVariableOnly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPagedPersons, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedStartsWithQueryCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldBindPlaceholdersUsedAsKeysCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldSupportSortingWithQSortByQueryDslOrderSpecifier, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findBySkillsNotContains, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesAndQueryCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByLastname, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonById, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesPagedFinderCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameStartingWithIgnoreCase, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleBySexPaginated, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindPersonsWhenUsingQueryDslPerdicatedOnIdProperty, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldAllowReturningJava8StreamInCustomQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByNestedPropertyInCollectionShouldFindMatchingDocuments, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstNameIgnoreCaseWithNull, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForAfterPredicateCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameEndingWithIgnoreCase, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findAllByExampleShouldResolveStuffCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstname, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindByFirstnameForSpELExpressionWithParameterIndexOnly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByZipCode, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameContainingIgnoreCase, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameLikeWithNull, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsAllMusicians, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameNotIgnoreCase, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldSupportSortingByQueryDslOrderSpecifier, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnNumberOfDocumentsRemovedIfReturnTypeIsLong, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleBySexCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoNearQueryForResultsCorrectlyWhenGivenMinAndMaxDistance, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#sliceShouldTraverseElementsWithoutSkippingOnes, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#readsDocumentsWithNestedPolymorphismCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findUsingAnnotatedQueryOnDBRef, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoNearQueryForResultsCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPagedPeopleByPredicate, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameLike, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsAllWithGivenIds, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldRemoveElementsMatchingDerivedQuery, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationWithinPolygon, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deletesPersonByIdCorrectly, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByzipCodePredicate, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleUsingNotPredicate, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnEmptyListInCaseNoDocumentHasBeenRemovedAndReturnTypeIsCollectionLike, org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldLimitPagedQueryWhenPageRequestExceedsUpperBoundary], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=109}
status: EXCEPTION
dateEnd: Tue May 08 21:54:40 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-mongodb/376432841/spring-data-mongodb/src/main/java], projectClasspath='[Ljava.net.URL;@6ae3fb94', projectTests=[org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-data-mongodb/376432841, json=false}
exception: The constructor DocumentValidator(Document) is undefined at /root/workspace/spring-projects/spring-data-mongodb/376432841/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/validation/DocumentValidator.java:51
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #1
location: FailureLocation{className='org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#deleteByUsingAnnotatedQueryShouldReturnNumberOfDocumentsRemovedIfReturnTypeIsLong, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByNestedPropertyInCollectionShouldFindMatchingDocuments, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesDerivedCountProjection, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#deleteByShouldReturnEmptyListInCaseNoDocumentHasBeenRemovedAndReturnTypeIsCollectionLike, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleByzipCodePredicate, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesGeoPageQueryForWithPageRequestForJustOneElement, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByExampleShouldResolveStuffCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldNotLimitPagedQueryWhenPageRequestWithinBounds, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldSupportSortingByQueryDslOrderSpecifier, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesQueryWithDBRefReferenceCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#existsWorksCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#bindsDateParameterForLessThanPredicateCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleByZipCode, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#bindsDateParameterToBeforePredicateCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPersonByShippingAddressesCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesGeoPageQueryForResultsCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleUsingNotPredicate, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findUsingAnnotatedQueryOnDBRef, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleBySexPaginated, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByCustomQueryLastnameAndStreetInList, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldFindPersonsWhenUsingQueryDslPerdicatedOnIdProperty, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPersonById, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleBySexCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldLimitCollectionQueryToMaxResultsWhenPresent, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#deleteByShouldReturnZeroInCaseNoDocumentHasBeenRemovedAndReturnTypeIsNumber, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findFirstEntityReturnsFirstResultEvenForNonUniqueMatches, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleByQueryDslLastnameSpec, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleByNamedQuery, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#deleteByShouldReturnListOfDeletedElementsWhenRetunTypeIsCollectionLike, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByFirstnameLikeWithNull, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#deleteByShouldRemoveElementsMatchingDerivedQuery, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesPagedFinderCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByFirstnameEndingWithIgnoreCase, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#appliesStaticAndDynamicSorting, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#deleteByUsingAnnotatedQueryShouldRemoveElementsMatchingDerivedQuery, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#returnsOrderedResultsForQuerydslOrderSpecifier, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleByLocationWithinCircle, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#deletesPersonCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldReturnEmptyWhenPageRequestedPageIsTotallyOutOfScopeForLimit, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleByLocationNearUsingGeoJsonType, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesGeoPageQueryForWithPageRequestForJustOneElementEmptyPage, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPersonsByFirstname, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPersonsByFirstnameNotLike, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleByLocationWithinBox, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesDerivedExistsProjectionToBoolean, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPagedPeopleByPredicate, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByFirstnameStartingWithIgnoreCase, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findSingleEntityThrowsErrorWhenNotUnique, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#countsPersonsByFirstname, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#readsDocumentsWithNestedPolymorphismCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findBySkillsNotContains, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPersonsByFirstnameLike, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByFirstNameIgnoreCaseWithNull, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesGeoPageQueryForWithPageRequestForPageInBetween, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldExecuteFindOnDbRefCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPagedPersons, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleByLocationWithinPolygon, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPersonsByFirstnameAsArray, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#deletesPersonsByFirstname, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#deleteByUsingAnnotatedQueryShouldReturnListOfDeletedElementsWhenRetunTypeIsCollectionLike, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleByLastnameAndOrdersCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findOptionalSingleEntityThrowsErrorWhenNotUnique, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldFindByFirstnameForSpELExpressionWithParameterVariableOnly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldLimitPagedQueryWhenPageRequestExceedsUpperBoundary, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesGeoNearQueryForResultsCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByFirstnameNotIgnoreCase, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesPagedFinderWithAnnotatedQueryCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesDerivedCountProjectionToInt, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesGeoPageQueryForWithPageRequestForPageAtTheEnd, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#considersSortForAnnotatedQuery, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldSupportSortingWithQSortByQueryDslOrderSpecifier, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesAnnotatedCountProjection, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsSliceOfPersons, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldBindPlaceholdersUsedAsKeysCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#gettingNonFirstPageWorksWithoutLimitBeingSet, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByFirstNameIgnoreCase, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPersonsByFirstnameNotContains, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPersonInAgeRangeCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesSingleEntityQueryWithProjectionCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsAllWithGivenIds, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldSupportSortingWithQSort, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#readsClosedProjection, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesDerivedStartsWithQueryCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#rejectsDuplicateEmailAddressOnSave, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findAllByExampleShouldResolveStuffCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#bindsDateParameterForAfterPredicateCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByCustomQueryFirstnamesInListAndLastname, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#deleteByShouldReturnNumberOfDocumentsRemovedIfReturnTypeIsLong, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#bindsDateParameterForGreaterThanPredicateCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findBySkillsContains, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsAllMusicians, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPersonByAddressCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesDerivedEndsWithQueryCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPersonsByLastname, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByFirstnameContainingIgnoreCase, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldFindByFirstnameAndCurrentUserWithCustomQuery, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#readsOpenProjection, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findsPeopleByLocationNear, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#sliceShouldTraverseElementsWithoutSkippingOnes, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#deletesPersonByIdCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesAndQueryCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldAllowReturningJava8StreamInCustomQuery, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesAnnotatedExistProjection, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#executesGeoNearQueryForResultsCorrectlyWhenGivenMinAndMaxDistance, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#bindsDateParameterForManuallyDefinedQueryCorrectly, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#findByUUIDShouldReturnCorrectResult, org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests#shouldFindByFirstnameForSpELExpressionWithParameterIndexOnly], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=107}
status: EXCEPTION
dateEnd: Tue May 08 21:54:43 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-mongodb/376432841/spring-data-mongodb/src/main/java], projectClasspath='[Ljava.net.URL;@6b23897a', projectTests=[org.springframework.data.mongodb.repository.PersonRepositoryIntegrationTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-data-mongodb/376432841, json=false}
exception: The constructor DocumentValidator(Document) is undefined at /root/workspace/spring-projects/spring-data-mongodb/376432841/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/validation/DocumentValidator.java:51
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #2
location: FailureLocation{className='org.springframework.data.mongodb.repository.config.MongoRepositoriesRegistrarIntegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.mongodb.repository.config.MongoRepositoriesRegistrarIntegrationTests#testConfiguration], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=1}
status: EXCEPTION
dateEnd: Tue May 08 21:54:46 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-mongodb/376432841/spring-data-mongodb/src/main/java], projectClasspath='[Ljava.net.URL;@46309fa8', projectTests=[org.springframework.data.mongodb.repository.config.MongoRepositoriesRegistrarIntegrationTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-data-mongodb/376432841, json=false}
exception: The constructor DocumentValidator(Document) is undefined at /root/workspace/spring-projects/spring-data-mongodb/376432841/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/validation/DocumentValidator.java:51
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



