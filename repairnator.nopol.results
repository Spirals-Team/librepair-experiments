nopolinfo #0
location: FailureLocation{className='com.facebook.presto.sql.planner.TestQuantifiedComparison', failingMethods=[com.facebook.presto.sql.planner.TestQuantifiedComparison#testQuantifiedComparisonEqualAll, com.facebook.presto.sql.planner.TestQuantifiedComparison#testQuantifiedComparisonGreaterEqualAny, com.facebook.presto.sql.planner.TestQuantifiedComparison#testQuantifiedComparisonLessAll, com.facebook.presto.sql.planner.TestQuantifiedComparison#testQuantifiedComparisonNotEqualAny, com.facebook.presto.sql.planner.TestQuantifiedComparison#testQuantifiedComparisonGreaterEqualAll, com.facebook.presto.sql.planner.TestQuantifiedComparison#testQuantifiedComparisonLessSome], erroringMethods=[], failures=[FailureType{failureName='java.lang.IllegalArgumentException', failureDetail='Cross join does not support output symbols pruning or reordering', isError=false}, FailureType{failureName='java.lang.IllegalArgumentException', failureDetail='Cross join does not support output symbols pruning or reordering', isError=false}, FailureType{failureName='java.lang.IllegalArgumentException', failureDetail='Cross join does not support output symbols pruning or reordering', isError=false}, FailureType{failureName='java.lang.IllegalArgumentException', failureDetail='Cross join does not support output symbols pruning or reordering', isError=false}, FailureType{failureName='java.lang.IllegalArgumentException', failureDetail='Cross join does not support output symbols pruning or reordering', isError=false}, FailureType{failureName='java.lang.IllegalArgumentException', failureDetail='Cross join does not support output symbols pruning or reordering', isError=false}], nbFailures=6, nbErrors=0}
status: NOPATCH
dateEnd: Mon Aug 28 21:27:41 CEST 2017
allocatedtime: 120minutes 
passingTime: 1minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/269207478/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@69d6a7cd', projectTests=[com.facebook.presto.sql.planner.TestQuantifiedComparison], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #1
location: FailureLocation{className='com.facebook.presto.sql.planner.TestLogicalPlanner', failingMethods=[com.facebook.presto.sql.planner.TestLogicalPlanner#testLeftConvertedToInnerInequalityJoinNoEquiJoinConjuncts, com.facebook.presto.sql.planner.TestLogicalPlanner#testSameQualifiedSubqueryIsAppliedOnlyOnce, com.facebook.presto.sql.planner.TestLogicalPlanner#testUncorrelatedSubqueries, com.facebook.presto.sql.planner.TestLogicalPlanner#testSameInSubqueryIsAppliedOnlyOnce], erroringMethods=[], failures=[FailureType{failureName='java.lang.IllegalArgumentException', failureDetail='Cross join does not support output symbols pruning or reordering', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Invalid SQL: SELECT * FROM orders o1 JOIN orders o2 ON o1.orderkey IN (SELECT 1) AND (o1.orderkey IN (SELECT 1) OR o1.orderkey IN (SELECT 1))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Invalid SQL: SELECT * FROM orders o1 JOIN orders o2 ON o1.orderkey <= ALL(SELECT 1) AND (o1.orderkey <= ALL(SELECT 1) OR o1.orderkey <= ALL(SELECT 1))', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Plan does not match, expected [

- anyTree
    - node(JoinNode)
        JoinMatcher{equiCriteria=[X = Y], dynamicFilter=Optional.empty}
        - node(ProjectNode)
            - node(FilterNode)
                - node(TableScanNode)
                    TableScanMatcher{expectedTableName=orders}
                    bind X -> Column orders:orderkey
        - node(ProjectNode)
            - node(EnforceSingleRowNode)
                - anyTree
                    - node(TableScanNode)
                        TableScanMatcher{expectedTableName=lineitem}
                        bind Y -> Column lineitem:orderkey

] but found [

- Output[orderkey, custkey, orderstatus, totalprice, orderdate, orderpriority, clerk, shippriority, comment] => [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79)]
        Cost: {rows: 30000, bytes: ?}
    - InnerJoin[("orderkey" = "orderkey_0")][$hashvalue, $hashvalue_42] => [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79)]
            Cost: {rows: 30000, bytes: ?}
        - ScanProject[table = local:tpch:orders:sf0.01, originalConstraint = true] => [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79), $hashvalue:bigint]
                Cost: {rows: 15000, bytes: ?}/{rows: 15000, bytes: ?}
                $hashvalue := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0))
                orderkey := tpch:orderkey
                custkey := tpch:custkey
                orderstatus := tpch:orderstatus
                totalprice := tpch:totalprice
                orderdate := tpch:orderdate
                orderpriority := tpch:orderpriority
                clerk := tpch:clerk
                shippriority := tpch:shippriority
                comment := tpch:comment
        - Project[] => [orderkey_0:bigint, $hashvalue_42:bigint]
                Cost: {rows: 1, bytes: ?}
                $hashvalue_42 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey_0"), 0))
            - Scalar => [orderkey_0:bigint]
                    Cost: {rows: 1, bytes: ?}
                - TopN[1 by (orderkey_0 ASC_NULLS_LAST)] => [orderkey_0:bigint]
                    - LocalExchange[SINGLE] () => orderkey_0:bigint
                        - TopN[1 by (orderkey_0 ASC_NULLS_LAST)] => [orderkey_0:bigint]
                            - TableScan[local:tpch:lineitem:sf0.01, originalConstraint = true] => [orderkey_0:bigint]
                                    Cost: {rows: 60175, bytes: ?}
                                    orderkey_0 := tpch:orderkey

] which resolves to [

- Output[orderkey, custkey, orderstatus, totalprice, orderdate, orderpriority, clerk, shippriority, comment] => [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79)]
        Cost: {rows: 30000, bytes: ?}
    - InnerJoin[("orderkey" = "orderkey_0")][$hashvalue, $hashvalue_42] => [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79)]
            Cost: {rows: 30000, bytes: ?}
        - ScanProject[table = local:tpch:orders:sf0.01, originalConstraint = true] => [orderkey:bigint, custkey:bigint, orderstatus:varchar(1), totalprice:double, orderdate:date, orderpriority:varchar(15), clerk:varchar(15), shippriority:integer, comment:varchar(79), $hashvalue:bigint]
                Cost: {rows: 15000, bytes: ?}/{rows: 15000, bytes: ?}
                $hashvalue := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0))
                orderkey := tpch:orderkey
                custkey := tpch:custkey
                orderstatus := tpch:orderstatus
                totalprice := tpch:totalprice
                orderdate := tpch:orderdate
                orderpriority := tpch:orderpriority
                clerk := tpch:clerk
                shippriority := tpch:shippriority
                comment := tpch:comment
        - Project[] => [orderkey_0:bigint, $hashvalue_42:bigint]
                Cost: {rows: 1, bytes: ?}
                $hashvalue_42 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey_0"), 0))
            - Scalar => [orderkey_0:bigint]
                    Cost: {rows: 1, bytes: ?}
                - TopN[1 by (orderkey_0 ASC_NULLS_LAST)] => [orderkey_0:bigint]
                    - LocalExchange[SINGLE] () => orderkey_0:bigint
                        - TopN[1 by (orderkey_0 ASC_NULLS_LAST)] => [orderkey_0:bigint]
                            - TableScan[local:tpch:lineitem:sf0.01, originalConstraint = true] => [orderkey_0:bigint]
                                    Cost: {rows: 60175, bytes: ?}
                                    orderkey_0 := tpch:orderkey

]', isError=false}], nbFailures=4, nbErrors=0}
status: NOPATCH
dateEnd: Mon Aug 28 21:28:42 CEST 2017
allocatedtime: 119minutes 
passingTime: 1minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/269207478/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@3e491595', projectTests=[com.facebook.presto.sql.planner.TestLogicalPlanner], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #2
location: FailureLocation{className='com.facebook.presto.sql.planner.optimizations.TestReorderJoins', failingMethods=[com.facebook.presto.sql.planner.optimizations.TestReorderJoins#testEliminateCrossJoinWithNonEqualityCondition, com.facebook.presto.sql.planner.optimizations.TestReorderJoins#testEliminateCrossJoinPreserveFilters, com.facebook.presto.sql.planner.optimizations.TestReorderJoins#testEliminateSimpleCrossJoin], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='Plan does not match, expected [

- anyTree
    - node(JoinNode)
        JoinMatcher{equiCriteria=[L_ORDERKEY = O_ORDERKEY], dynamicFilter=Optional.empty}
        - anyTree
            - node(JoinNode)
                JoinMatcher{equiCriteria=[P_PARTKEY = L_PARTKEY], dynamicFilter=Optional.empty}
                - anyTree
                    - node(TableScanNode)
                        TableScanMatcher{expectedTableName=part}
                        bind P_PARTKEY -> Column part:partkey
                - anyTree
                    - node(FilterNode)
                        FilterMatcher{predicate=(("L_RETURNFLAG" = 'R') AND ("L_ORDERKEY" = "$INTERNAL$DEFERRED_SYMBOL_REFERENCE"("128", "dynamic_filter_orderkey")))}
                        - node(TableScanNode)
                            TableScanMatcher{expectedTableName=lineitem}
                            bind L_PARTKEY -> Column lineitem:partkey
                            bind L_ORDERKEY -> Column lineitem:orderkey
                            bind L_RETURNFLAG -> Column lineitem:returnflag
        - anyTree
            - node(FilterNode)
                FilterMatcher{predicate=("O_SHIPPRIORITY" >= 10)}
                - node(TableScanNode)
                    TableScanMatcher{expectedTableName=orders}
                    bind O_ORDERKEY -> Column orders:orderkey
                    bind O_SHIPPRIORITY -> Column orders:shippriority

] but found [

- Output[orderkey] => [orderkey:bigint]
        Cost: {rows: 120350, bytes: ?}
    - InnerJoin[("orderkey_2" = "orderkey")][$hashvalue_11, $hashvalue_12] => [orderkey:bigint]
            Cost: {rows: 120350, bytes: ?}
        - Project[] => [orderkey_2:bigint, $hashvalue_11:bigint]
                Cost: {rows: 60175, bytes: ?}
                $hashvalue_11 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey_2"), 0))
            - InnerJoin[("partkey" = "partkey_3")][$hashvalue, $hashvalue_9] => [orderkey_2:bigint]
                    Cost: {rows: 60175, bytes: ?}
                - ScanProject[table = local:tpch:part:sf0.01, originalConstraint = true] => [partkey:bigint, $hashvalue:bigint]
                        Cost: {rows: 2000, bytes: ?}/{rows: 2000, bytes: ?}
                        $hashvalue := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("partkey"), 0))
                        partkey := tpch:partkey
                - LocalExchange[SINGLE] () => orderkey_2:bigint, partkey_3:bigint, $hashvalue_9:bigint
                        Cost: {rows: 30087, bytes: ?}
                    - ScanFilterProject[table = local:tpch:lineitem:sf0.01, originalConstraint = ('R' = "returnflag"), filterPredicate = ("returnflag" = 'R')] => [orderkey_2:bigint, partkey_3:bigint, $hashvalue_10:bigint]
                            Cost: {rows: 60175, bytes: ?}/{rows: 30087, bytes: ?}/{rows: 30087, bytes: ?}
                            $hashvalue_10 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("partkey_3"), 0))
                            orderkey_2 := tpch:orderkey
                            partkey_3 := tpch:partkey
                            returnflag := tpch:returnflag
        - LocalExchange[SINGLE] () => orderkey:bigint, $hashvalue_12:bigint
                Cost: {rows: 7500, bytes: ?}
            - ScanFilterProject[table = local:tpch:orders:sf0.01, originalConstraint = ("shippriority" >= 10), filterPredicate = ("shippriority" >= 10)] => [orderkey:bigint, $hashvalue_13:bigint]
                    Cost: {rows: 15000, bytes: ?}/{rows: 7500, bytes: ?}/{rows: 7500, bytes: ?}
                    $hashvalue_13 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0))
                    orderkey := tpch:orderkey
                    shippriority := tpch:shippriority

] which resolves to [

- Output[orderkey] => [orderkey:bigint]
        Cost: {rows: 120350, bytes: ?}
    - InnerJoin[("orderkey_2" = "orderkey")][$hashvalue_11, $hashvalue_12] => [orderkey:bigint]
            Cost: {rows: 120350, bytes: ?}
        - Project[] => [orderkey_2:bigint, $hashvalue_11:bigint]
                Cost: {rows: 60175, bytes: ?}
                $hashvalue_11 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey_2"), 0))
            - InnerJoin[("partkey" = "partkey_3")][$hashvalue, $hashvalue_9] => [orderkey_2:bigint]
                    Cost: {rows: 60175, bytes: ?}
                - ScanProject[table = local:tpch:part:sf0.01, originalConstraint = true] => [partkey:bigint, $hashvalue:bigint]
                        Cost: {rows: 2000, bytes: ?}/{rows: 2000, bytes: ?}
                        $hashvalue := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("partkey"), 0))
                        partkey := tpch:partkey
                - LocalExchange[SINGLE] () => orderkey_2:bigint, partkey_3:bigint, $hashvalue_9:bigint
                        Cost: {rows: 30087, bytes: ?}
                    - ScanFilterProject[table = local:tpch:lineitem:sf0.01, originalConstraint = ('R' = "returnflag"), filterPredicate = ("returnflag" = 'R')] => [orderkey_2:bigint, partkey_3:bigint, $hashvalue_10:bigint]
                            Cost: {rows: 60175, bytes: ?}/{rows: 30087, bytes: ?}/{rows: 30087, bytes: ?}
                            $hashvalue_10 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("partkey_3"), 0))
                            orderkey_2 := tpch:orderkey
                            partkey_3 := tpch:partkey
                            returnflag := tpch:returnflag
        - LocalExchange[SINGLE] () => orderkey:bigint, $hashvalue_12:bigint
                Cost: {rows: 7500, bytes: ?}
            - ScanFilterProject[table = local:tpch:orders:sf0.01, originalConstraint = ("shippriority" >= 10), filterPredicate = ("shippriority" >= 10)] => [orderkey:bigint, $hashvalue_13:bigint]
                    Cost: {rows: 15000, bytes: ?}/{rows: 7500, bytes: ?}/{rows: 7500, bytes: ?}
                    $hashvalue_13 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0))
                    orderkey := tpch:orderkey
                    shippriority := tpch:shippriority

]', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Plan does not match, expected [

- anyTree
    - node(JoinNode)
        JoinMatcher{equiCriteria=[L_ORDERKEY = O_ORDERKEY], dynamicFilter=Optional.empty}
        - anyTree
            - node(JoinNode)
                JoinMatcher{equiCriteria=[P_PARTKEY = L_PARTKEY], filter=("P_NAME" < CAST("L_COMMENT" AS varchar(55))), dynamicFilter=Optional.empty}
                - anyTree
                    - node(TableScanNode)
                        TableScanMatcher{expectedTableName=part}
                        bind P_PARTKEY -> Column part:partkey
                        bind P_NAME -> Column part:name
                - anyTree
                    - node(FilterNode)
                        FilterMatcher{predicate=(("L_PARTKEY" <> "L_ORDERKEY") AND ("L_ORDERKEY" = "$INTERNAL$DEFERRED_SYMBOL_REFERENCE"("128", "dynamic_filter_orderkey")))}
                        - node(TableScanNode)
                            TableScanMatcher{expectedTableName=lineitem}
                            bind L_PARTKEY -> Column lineitem:partkey
                            bind L_ORDERKEY -> Column lineitem:orderkey
                            bind L_COMMENT -> Column lineitem:comment
        - anyTree
            - node(TableScanNode)
                TableScanMatcher{expectedTableName=orders}
                bind O_ORDERKEY -> Column orders:orderkey

] but found [

- Output[orderkey] => [orderkey:bigint]
        Cost: {rows: 120350, bytes: ?}
    - InnerJoin[("orderkey_2" = "orderkey")][$hashvalue_11, $hashvalue_12] => [orderkey:bigint]
            Cost: {rows: 120350, bytes: ?}
        - Project[] => [orderkey_2:bigint, $hashvalue_11:bigint]
                Cost: {rows: 60175, bytes: ?}
                $hashvalue_11 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey_2"), 0))
            - InnerJoin[("partkey" = "partkey_3") AND ("name" < CAST("comment_4" AS varchar(55)))][$hashvalue, $hashvalue_9] => [orderkey_2:bigint]
                    Cost: {rows: 60175, bytes: ?}
                - ScanProject[table = local:tpch:part:sf0.01, originalConstraint = true] => [partkey:bigint, name:varchar(55), $hashvalue:bigint]
                        Cost: {rows: 2000, bytes: ?}/{rows: 2000, bytes: ?}
                        $hashvalue := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("partkey"), 0))
                        partkey := tpch:partkey
                        name := tpch:name
                - LocalExchange[SINGLE] () => orderkey_2:bigint, partkey_3:bigint, comment_4:varchar(44), $hashvalue_9:bigint
                        Cost: {rows: 30087, bytes: ?}
                    - ScanFilterProject[table = local:tpch:lineitem:sf0.01, originalConstraint = true, filterPredicate = ("partkey_3" <> "orderkey_2")] => [orderkey_2:bigint, partkey_3:bigint, comment_4:varchar(44), $hashvalue_10:bigint]
                            Cost: {rows: 60175, bytes: ?}/{rows: 30087, bytes: ?}/{rows: 30087, bytes: ?}
                            $hashvalue_10 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("partkey_3"), 0))
                            orderkey_2 := tpch:orderkey
                            partkey_3 := tpch:partkey
                            comment_4 := tpch:comment
        - LocalExchange[SINGLE] () => orderkey:bigint, $hashvalue_12:bigint
                Cost: {rows: 15000, bytes: ?}
            - ScanProject[table = local:tpch:orders:sf0.01, originalConstraint = true] => [orderkey:bigint, $hashvalue_13:bigint]
                    Cost: {rows: 15000, bytes: ?}/{rows: 15000, bytes: ?}
                    $hashvalue_13 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0))
                    orderkey := tpch:orderkey

] which resolves to [

- Output[orderkey] => [orderkey:bigint]
        Cost: {rows: 120350, bytes: ?}
    - InnerJoin[("orderkey_2" = "orderkey")][$hashvalue_11, $hashvalue_12] => [orderkey:bigint]
            Cost: {rows: 120350, bytes: ?}
        - Project[] => [orderkey_2:bigint, $hashvalue_11:bigint]
                Cost: {rows: 60175, bytes: ?}
                $hashvalue_11 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey_2"), 0))
            - InnerJoin[("partkey" = "partkey_3") AND ("name" < CAST("comment_4" AS varchar(55)))][$hashvalue, $hashvalue_9] => [orderkey_2:bigint]
                    Cost: {rows: 60175, bytes: ?}
                - ScanProject[table = local:tpch:part:sf0.01, originalConstraint = true] => [partkey:bigint, name:varchar(55), $hashvalue:bigint]
                        Cost: {rows: 2000, bytes: ?}/{rows: 2000, bytes: ?}
                        $hashvalue := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("partkey"), 0))
                        partkey := tpch:partkey
                        name := tpch:name
                - LocalExchange[SINGLE] () => orderkey_2:bigint, partkey_3:bigint, comment_4:varchar(44), $hashvalue_9:bigint
                        Cost: {rows: 30087, bytes: ?}
                    - ScanFilterProject[table = local:tpch:lineitem:sf0.01, originalConstraint = true, filterPredicate = ("partkey_3" <> "orderkey_2")] => [orderkey_2:bigint, partkey_3:bigint, comment_4:varchar(44), $hashvalue_10:bigint]
                            Cost: {rows: 60175, bytes: ?}/{rows: 30087, bytes: ?}/{rows: 30087, bytes: ?}
                            $hashvalue_10 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("partkey_3"), 0))
                            orderkey_2 := tpch:orderkey
                            partkey_3 := tpch:partkey
                            comment_4 := tpch:comment
        - LocalExchange[SINGLE] () => orderkey:bigint, $hashvalue_12:bigint
                Cost: {rows: 15000, bytes: ?}
            - ScanProject[table = local:tpch:orders:sf0.01, originalConstraint = true] => [orderkey:bigint, $hashvalue_13:bigint]
                    Cost: {rows: 15000, bytes: ?}/{rows: 15000, bytes: ?}
                    $hashvalue_13 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0))
                    orderkey := tpch:orderkey

]', isError=false}, FailureType{failureName='java.lang.IllegalArgumentException', failureDetail='Cross join does not support output symbols pruning or reordering', isError=false}], nbFailures=3, nbErrors=0}
status: NOPATCH
dateEnd: Mon Aug 28 21:29:42 CEST 2017
allocatedtime: 119minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/269207478/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@51505ee8', projectTests=[com.facebook.presto.sql.planner.optimizations.TestReorderJoins], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



