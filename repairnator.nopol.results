nopolinfo #0
location: FailureLocation{className='io.swagger.v3.jaxrs2.annotations.operations.AnnotatedOperationMethodTest', failingMethods=[io.swagger.v3.jaxrs2.annotations.operations.AnnotatedOperationMethodTest#testCompletePetResource], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='expected [openapi: 3.0.1
paths:
  /pet/findByTags:
    get:
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma seperated strings. Use
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        schema:
          type: string
      responses:
        default:
          description: Pets matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid tag value
  /pet/findByCategory/{category}:
    get:
      summary: Finds Pets by category
      operationId: findPetsByCategory
      parameters:
      - name: category
        in: path
        description: Category value that need to be considered for filter
        required: true
        style: matrix
        schema:
          $ref: '#/components/schemas/Category'
      - name: skip
        in: query
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid category value
  /pet/{petId}:
    get:
      summary: Find pet by ID
      description: Returns a pet when 0 < ID <= 10.  ID > 10 or nonintegers will simulate
        API error conditions
      operationId: getPetById
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: The pet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
  /pet/bodynoannotation:
    post:
      summary: Add a new pet to the store no annotation
      operationId: addPetNoAnnotation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        405:
          description: Invalid input
  /pet/bodyid:
    post:
      summary: Add a new pet to the store passing an integer with generic parameter
        annotation
      operationId: addPetByInteger
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              type: integer
              format: int32
          application/xml:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        405:
          description: Invalid input
  /pet/bodyidnoannotation:
    post:
      summary: Add a new pet to the store passing an integer without parameter annotation
      operationId: addPetByIntegerNoAnnotation
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
          application/xml:
            schema:
              type: integer
              format: int32
      responses:
        405:
          description: Invalid input
  /pet:
    put:
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
    post:
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        405:
          description: Invalid input
  /pet/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: findPetsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        schema:
          type: string
      - name: skip
        in: query
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid status value
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available,pending,sold
      xml:
        name: Pet
] but found [openapi: 3.0.1
paths:
  /pet/{petId}:
    get:
      summary: Find pet by ID
      description: Returns a pet when 0 < ID <= 10.  ID > 10 or nonintegers will simulate
        API error conditions
      operationId: getPetById
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: The pet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
  /pet:
    put:
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
    post:
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        405:
          description: Invalid input
  /pet/bodynoannotation:
    post:
      summary: Add a new pet to the store no annotation
      operationId: addPetNoAnnotation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        405:
          description: Invalid input
  /pet/bodyid:
    post:
      summary: Add a new pet to the store passing an integer with generic parameter
        annotation
      operationId: addPetByInteger
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              type: integer
              format: int32
          application/xml:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        405:
          description: Invalid input
  /pet/bodyidnoannotation:
    post:
      summary: Add a new pet to the store passing an integer without parameter annotation
      operationId: addPetByIntegerNoAnnotation
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
          application/xml:
            schema:
              type: integer
              format: int32
      responses:
        405:
          description: Invalid input
  /pet/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: findPetsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        schema:
          type: string
      - name: skip
        in: query
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid status value
  /pet/findByTags:
    get:
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma seperated strings. Use
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        schema:
          type: string
      responses:
        default:
          description: Pets matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid tag value
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available,pending,sold
      xml:
        name: Pet
]', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Fri Apr 13 09:15:36 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/swagger-api/swagger-core/365975529/modules/swagger-jaxrs2/src/main/java], projectClasspath='[Ljava.net.URL;@11841b15', projectTests=[io.swagger.v3.jaxrs2.annotations.operations.AnnotatedOperationMethodTest], complianceLevel=8, outputFolder=./workspace/swagger-api/swagger-core/365975529, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



