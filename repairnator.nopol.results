nopolinfo #0
location: FailureLocation{className='com.squareup.kotlinpoet.TypeSpecTest', failingMethods=[com.squareup.kotlinpoet.TypeSpecTest#anonymousClassToString, com.squareup.kotlinpoet.TypeSpecTest#anonymousClassWithMultipleSuperTypes, com.squareup.kotlinpoet.TypeSpecTest#multilineStatementWithAnonymousClass, com.squareup.kotlinpoet.TypeSpecTest#anonymousInnerClass], erroringMethods=[], failures=[FailureType{failureName='org.junit.ComparisonFailure', failureDetail='expected:<object : []java.lang.Runnable {...> but was:<object : [ ]java.lang.Runnable {...>', isError=false}, FailureType{failureName='org.junit.ComparisonFailure', failureDetail='expected:<...Runnable = object : []Message(), Runnable ...> but was:<...Runnable = object : [ ]Message(), Runnable ...>', isError=false}, FailureType{failureName='org.junit.ComparisonFailure', failureDetail='expected:<...    return object : [Comparator<String> {             override fun compare(a: String, b: String): Int {                 // Prefix the strings and compare them                 return a.substring(0, length)                         .compareTo(b.substring(0, length))             }         }     }      fun sortPrefix(list: List<String>, final length: Int) {         Collections.sort(                 list,                 object :] Comparator<String> ...> but was:<...    return object : [ Comparator<String> {             override fun compare(a: String, b: String): Int {                 // Prefix the strings and compare them                 return a.substring(0, length)                         .compareTo(b.substring(0, length))             }         }     }      fun sortPrefix(list: List<String>, final length: Int) {         Collections.sort(                 list,                 object : ] Comparator<String> ...>', isError=false}, FailureType{failureName='org.junit.ComparisonFailure', failureDetail='expected:<...oo, Bar> = object : [Thing.Thang<Foo, Bar>() {         override fun call(final thung: Thung<in Foo>): Thung<in Bar> = object :] SimpleThung<Bar>(th...> but was:<...oo, Bar> = object : [ Thing.Thang<Foo, Bar>() {         override fun call(final thung: Thung<in Foo>): Thung<in Bar> = object : ] SimpleThung<Bar>(th...>', isError=false}], nbFailures=4, nbErrors=0}
status: NOPATCH
dateEnd: Wed Jan 24 04:27:59 CET 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/square/kotlinpoet/332613503/src/main/java], projectClasspath='[Ljava.net.URL;@124dac75', projectTests=[com.squareup.kotlinpoet.TypeSpecTest], complianceLevel=8, outputFolder=./, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



