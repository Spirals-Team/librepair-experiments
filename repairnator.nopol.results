nopolinfo #0
location: FailureLocation{className='com.facebook.presto.sql.planner.TestLogicalPlanner', failingMethods=[com.facebook.presto.sql.planner.TestLogicalPlanner#testDistinctLimitOverInequalityJoin, com.facebook.presto.sql.planner.TestLogicalPlanner#testInnerInequalityJoinWithEquiJoinConjuncts], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='Plan does not match, expected [

- anyTree
    - node(DistinctLimitNode)
        - anyTree
            - node(JoinNode)
                JoinMatcher{equiCriteria=[O_SHIPPRIORITY = L_LINENUMBER], filter=("O_ORDERKEY" < "L_ORDERKEY"), dynamicFilter=Optional.empty}
                StrictSymbolsMatcher{exact outputs=[O_ORDERKEY]}
                - node
                    - node(TableScanNode)
                        TableScanMatcher{expectedTableName=orders}
                        bind O_SHIPPRIORITY -> Column orders:shippriority
                        bind O_ORDERKEY -> Column orders:orderkey
                - anyTree
                    - node(TableScanNode)
                        TableScanMatcher{expectedTableName=lineitem}
                        bind L_LINENUMBER -> Column lineitem:linenumber
                        bind L_ORDERKEY -> Column lineitem:orderkey

] but found [

- Output[orderkey] => [orderkey:bigint]
    - Project[] => [orderkey:bigint]
        - DistinctLimit[1][$hashvalue] => [orderkey:bigint, $hashvalue:bigint]
            - LocalExchange[SINGLE] () => orderkey:bigint, $hashvalue:bigint
                    Cost: {rows: 120350, bytes: ?}
                - Project[] => [orderkey:bigint, $hashvalue_13:bigint]
                        Cost: {rows: 120350, bytes: ?}
                        $hashvalue_13 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0))
                    - InnerJoin[("shippriority" = "linenumber") AND ("orderkey" < "orderkey_0")][$hashvalue_10, $hashvalue_11] => [orderkey:bigint]
                            dynamicFilterAssignments = {df <- "linenumber"}
                            SortExpression["orderkey_0"]
                            Cost: {rows: 120350, bytes: ?}
                        - ScanFilterProject[table = local:tpch:orders:sf0.01, originalConstraint = true, filterPredicate = true, dynamicFilter = {df -> "shippriority"}] => [orderkey:bigint, shippriority:integer, $hashvalue_10:bigint]
                                Cost: {rows: 15000, bytes: ?}/{rows: 7500, bytes: ?}/{rows: 7500, bytes: ?}
                                $hashvalue_10 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("shippriority"), 0))
                                orderkey := tpch:orderkey
                                shippriority := tpch:shippriority
                        - LocalExchange[SINGLE] () => orderkey_0:bigint, linenumber:integer, $hashvalue_11:bigint
                                Cost: {rows: 60175, bytes: ?}
                            - ScanProject[table = local:tpch:lineitem:sf0.01, originalConstraint = true] => [orderkey_0:bigint, linenumber:integer, $hashvalue_12:bigint]
                                    Cost: {rows: 60175, bytes: ?}/{rows: 60175, bytes: ?}
                                    $hashvalue_12 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("linenumber"), 0))
                                    orderkey_0 := tpch:orderkey
                                    linenumber := tpch:linenumber

] which resolves to [

- Output[orderkey] => [orderkey:bigint]
    - Project[] => [orderkey:bigint]
        - DistinctLimit[1][$hashvalue] => [orderkey:bigint, $hashvalue:bigint]
            - LocalExchange[SINGLE] () => orderkey:bigint, $hashvalue:bigint
                    Cost: {rows: 120350, bytes: ?}
                - Project[] => [orderkey:bigint, $hashvalue_13:bigint]
                        Cost: {rows: 120350, bytes: ?}
                        $hashvalue_13 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0))
                    - InnerJoin[("shippriority" = "linenumber") AND ("orderkey" < "orderkey_0")][$hashvalue_10, $hashvalue_11] => [orderkey:bigint]
                            dynamicFilterAssignments = {df <- "linenumber"}
                            SortExpression["orderkey_0"]
                            Cost: {rows: 120350, bytes: ?}
                        - ScanFilterProject[table = local:tpch:orders:sf0.01, originalConstraint = true, filterPredicate = true, dynamicFilter = {df -> "shippriority"}] => [orderkey:bigint, shippriority:integer, $hashvalue_10:bigint]
                                Cost: {rows: 15000, bytes: ?}/{rows: 7500, bytes: ?}/{rows: 7500, bytes: ?}
                                $hashvalue_10 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("shippriority"), 0))
                                orderkey := tpch:orderkey
                                shippriority := tpch:shippriority
                        - LocalExchange[SINGLE] () => orderkey_0:bigint, linenumber:integer, $hashvalue_11:bigint
                                Cost: {rows: 60175, bytes: ?}
                            - ScanProject[table = local:tpch:lineitem:sf0.01, originalConstraint = true] => [orderkey_0:bigint, linenumber:integer, $hashvalue_12:bigint]
                                    Cost: {rows: 60175, bytes: ?}/{rows: 60175, bytes: ?}
                                    $hashvalue_12 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("linenumber"), 0))
                                    orderkey_0 := tpch:orderkey
                                    linenumber := tpch:linenumber

]', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Plan does not match, expected [

- anyTree
    - node
        NotPlanNodeMatcher{excludedNodeClass=class com.facebook.presto.sql.planner.plan.FilterNode}
        - node(JoinNode)
            JoinMatcher{equiCriteria=[O_SHIPPRIORITY = L_LINENUMBER], filter=("O_ORDERKEY" < "L_ORDERKEY"), dynamicFilter=Optional.empty}
            - node
                - node(TableScanNode)
                    TableScanMatcher{expectedTableName=orders}
                    bind O_SHIPPRIORITY -> Column orders:shippriority
                    bind O_ORDERKEY -> Column orders:orderkey
            - anyTree
                - node(TableScanNode)
                    TableScanMatcher{expectedTableName=lineitem}
                    bind L_LINENUMBER -> Column lineitem:linenumber
                    bind L_ORDERKEY -> Column lineitem:orderkey

] but found [

- Output[_col0] => [expr_6:integer]
        Cost: {rows: 120350, bytes: ?}
        _col0 := expr_6
    - Project[] => [expr_6:integer]
            Cost: {rows: 120350, bytes: ?}
            expr_6 := 1
        - InnerJoin[("shippriority" = "linenumber") AND ("orderkey" < "orderkey_0")][$hashvalue, $hashvalue_10] => []
                dynamicFilterAssignments = {df <- "linenumber"}
                SortExpression["orderkey_0"]
                Cost: {rows: 120350, bytes: ?}
            - ScanFilterProject[table = local:tpch:orders:sf0.01, originalConstraint = true, filterPredicate = true, dynamicFilter = {df -> "shippriority"}] => [orderkey:bigint, shippriority:integer, $hashvalue:bigint]
                    Cost: {rows: 15000, bytes: ?}/{rows: 7500, bytes: ?}/{rows: 7500, bytes: ?}
                    $hashvalue := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("shippriority"), 0))
                    orderkey := tpch:orderkey
                    shippriority := tpch:shippriority
            - LocalExchange[SINGLE] () => orderkey_0:bigint, linenumber:integer, $hashvalue_10:bigint
                    Cost: {rows: 60175, bytes: ?}
                - ScanProject[table = local:tpch:lineitem:sf0.01, originalConstraint = true] => [orderkey_0:bigint, linenumber:integer, $hashvalue_11:bigint]
                        Cost: {rows: 60175, bytes: ?}/{rows: 60175, bytes: ?}
                        $hashvalue_11 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("linenumber"), 0))
                        orderkey_0 := tpch:orderkey
                        linenumber := tpch:linenumber

] which resolves to [

- Output[_col0] => [expr_6:integer]
        Cost: {rows: 120350, bytes: ?}
        _col0 := expr_6
    - Project[] => [expr_6:integer]
            Cost: {rows: 120350, bytes: ?}
            expr_6 := 1
        - InnerJoin[("shippriority" = "linenumber") AND ("orderkey" < "orderkey_0")][$hashvalue, $hashvalue_10] => []
                dynamicFilterAssignments = {df <- "linenumber"}
                SortExpression["orderkey_0"]
                Cost: {rows: 120350, bytes: ?}
            - ScanFilterProject[table = local:tpch:orders:sf0.01, originalConstraint = true, filterPredicate = true, dynamicFilter = {df -> "shippriority"}] => [orderkey:bigint, shippriority:integer, $hashvalue:bigint]
                    Cost: {rows: 15000, bytes: ?}/{rows: 7500, bytes: ?}/{rows: 7500, bytes: ?}
                    $hashvalue := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("shippriority"), 0))
                    orderkey := tpch:orderkey
                    shippriority := tpch:shippriority
            - LocalExchange[SINGLE] () => orderkey_0:bigint, linenumber:integer, $hashvalue_10:bigint
                    Cost: {rows: 60175, bytes: ?}
                - ScanProject[table = local:tpch:lineitem:sf0.01, originalConstraint = true] => [orderkey_0:bigint, linenumber:integer, $hashvalue_11:bigint]
                        Cost: {rows: 60175, bytes: ?}/{rows: 60175, bytes: ?}
                        $hashvalue_11 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("linenumber"), 0))
                        orderkey_0 := tpch:orderkey
                        linenumber := tpch:linenumber

]', isError=false}], nbFailures=2, nbErrors=0}
status: NOPATCH
dateEnd: Thu Dec 07 06:45:51 CET 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/312762977/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@65d43df9', projectTests=[com.facebook.presto.sql.planner.TestLogicalPlanner], complianceLevel=8, outputFolder=./, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



