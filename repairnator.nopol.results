nopolinfo #0
location: FailureLocation{className='com.facebook.presto.sql.analyzer.TestAnalyzer', failingMethods=[com.facebook.presto.sql.analyzer.TestAnalyzer#testInvalidAggregationFilter], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='Expected error NOT_SUPPORTED, but analysis succeeded', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Thu Mar 22 01:39:44 CET 2018
allocatedtime: 120minutes 
passingTime: 1minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/356624919/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@60e5272', projectTests=[com.facebook.presto.sql.analyzer.TestAnalyzer], complianceLevel=8, outputFolder=./workspace/prestodb/presto/356624919, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #1
location: FailureLocation{className='com.facebook.presto.sql.planner.TestLogicalPlanner', failingMethods=[com.facebook.presto.sql.planner.TestLogicalPlanner#testCorrelatedScalarAggregationRewriteToLeftOuterJoin], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='Plan does not match, expected [

- anyTree
    - node(FilterNode)
        FilterMatcher{predicate=("FINAL_COUNT" > BIGINT '0')}
        - node
            - node(AggregationNode)
                bind FINAL_COUNT -> count (PARTIAL_COUNT) 
                - node
                    - node(AggregationNode)
                        bind PARTIAL_COUNT -> count (NON_NULL) 
                        - node
                            - node(JoinNode)
                                JoinMatcher{equiCriteria=[], filter=(BIGINT '3' = "ORDERKEY")}
                                - node
                                    - node(TableScanNode)
                                        TableScanMatcher{expectedTableName=orders}
                                        bind ORDERKEY -> Column orders:orderkey
                                - node(ProjectNode)
                                    bind NON_NULL -> true
                                    - node(ValuesNode)

] but found [

- Output[orderkey] => [orderkey:bigint]
    - FilterProject[filterPredicate = ("count" > BIGINT '0')] => [orderkey:bigint]
        - Project[] => [orderkey:bigint, unique:bigint, count:bigint]
            - Aggregate[orderkey, unique][$hashvalue] => [orderkey:bigint, unique:bigint, $hashvalue:bigint, count:bigint]
                    count := "count"("non_null")
                - LocalExchange[SINGLE] () => orderkey:bigint, unique:bigint, non_null:boolean, $hashvalue:bigint
                    - Project[] => [orderkey:bigint, unique:bigint, non_null:boolean, $hashvalue_8:bigint]
                            $hashvalue_8 := "combine_hash"("combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0)), COALESCE("$operator$hash_code"("unique"), 0))
                        - LeftJoin[(BIGINT '3' = "orderkey")] => [orderkey:bigint, unique:bigint, non_null:boolean]
                            - AssignUniqueId => [orderkey:bigint, unique:bigint]
                                - TableScan[local:tpch:orders:sf0.01, originalConstraint = true] => [orderkey:bigint]
                                        Cost: {rows: 15000 (146.48kB), cpu: ?, memory: ?, network: ?}
                                        orderkey := tpch:orderkey
                                        tpch:orderstatus
                                            :: [[F], [O], [P]]
                            - Project[] => [non_null:boolean]
                                    Cost: {rows: 1 (10B), cpu: ?, memory: ?, network: ?}
                                    non_null := true
                                - Values => []
                                        Cost: {rows: 1 (0B), cpu: ?, memory: ?, network: ?}
                                        ()

] which resolves to [

- Output[orderkey] => [orderkey:bigint]
    - FilterProject[filterPredicate = ("count" > BIGINT '0')] => [orderkey:bigint]
        - Project[] => [orderkey:bigint, unique:bigint, count:bigint]
            - Aggregate[orderkey, unique][$hashvalue] => [orderkey:bigint, unique:bigint, $hashvalue:bigint, count:bigint]
                    count := "count"("non_null")
                - LocalExchange[SINGLE] () => orderkey:bigint, unique:bigint, non_null:boolean, $hashvalue:bigint
                    - Project[] => [orderkey:bigint, unique:bigint, non_null:boolean, $hashvalue_8:bigint]
                            $hashvalue_8 := "combine_hash"("combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("orderkey"), 0)), COALESCE("$operator$hash_code"("unique"), 0))
                        - LeftJoin[(BIGINT '3' = "orderkey")] => [orderkey:bigint, unique:bigint, non_null:boolean]
                            - AssignUniqueId => [orderkey:bigint, unique:bigint]
                                - TableScan[local:tpch:orders:sf0.01, originalConstraint = true] => [orderkey:bigint]
                                        Cost: {rows: 15000 (146.48kB), cpu: ?, memory: ?, network: ?}
                                        orderkey := tpch:orderkey
                                        tpch:orderstatus
                                            :: [[F], [O], [P]]
                            - Project[] => [non_null:boolean]
                                    Cost: {rows: 1 (10B), cpu: ?, memory: ?, network: ?}
                                    non_null := true
                                - Values => []
                                        Cost: {rows: 1 (0B), cpu: ?, memory: ?, network: ?}
                                        ()

]', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Thu Mar 22 01:40:36 CET 2018
allocatedtime: 119minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/356624919/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@5a8d411f', projectTests=[com.facebook.presto.sql.planner.TestLogicalPlanner], complianceLevel=8, outputFolder=./workspace/prestodb/presto/356624919, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #2
location: FailureLocation{className='com.facebook.presto.sql.planner.optimizations.TestUnion', failingMethods=[com.facebook.presto.sql.planner.optimizations.TestUnion#testPartialRollupAggregationsWithUnion], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='There is a node that should be distributed between output and first REMOTE GATHER ExchangeNode expected [true] but found [false]', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Thu Mar 22 01:41:27 CET 2018
allocatedtime: 119minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/356624919/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@14eae1e6', projectTests=[com.facebook.presto.sql.planner.optimizations.TestUnion], complianceLevel=8, outputFolder=./workspace/prestodb/presto/356624919, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #3
location: FailureLocation{className='com.facebook.presto.sql.planner.optimizations.TestUnionWithReplicatedJoin', failingMethods=[com.facebook.presto.sql.planner.optimizations.TestUnionWithReplicatedJoin#testPartialRollupAggregationsWithUnion], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='There is a node that should be distributed between output and first REMOTE GATHER ExchangeNode expected [true] but found [false]', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Thu Mar 22 01:42:17 CET 2018
allocatedtime: 119minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/prestodb/presto/356624919/presto-main/src/main/java], projectClasspath='[Ljava.net.URL;@4e79c8ef', projectTests=[com.facebook.presto.sql.planner.optimizations.TestUnionWithReplicatedJoin], complianceLevel=8, outputFolder=./workspace/prestodb/presto/356624919, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



