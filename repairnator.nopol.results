nopolinfo #0
location: FailureLocation{className='io.druid.query.groupby.GroupByQueryRunnerFailureTest', failingMethods=[io.druid.query.groupby.GroupByQueryRunnerFailureTest#testNotEnoughMergeBuffersOnQueryable[mMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerFailureTest#testNotEnoughMergeBuffersOnQueryable[noRollupMMappedTestIndex], io.druid.query.groupby.GroupByQueryRunnerFailureTest#testNotEnoughMergeBuffersOnQueryable[noRollupRtIndex], io.druid.query.groupby.GroupByQueryRunnerFailureTest#testNotEnoughMergeBuffersOnQueryable[mergedRealtimeIndex], io.druid.query.groupby.GroupByQueryRunnerFailureTest#testNotEnoughMergeBuffersOnQueryable[rtIndex]], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: (an instance of io.druid.query.QueryInterruptedException and exception with cause an instance of io.druid.query.InsufficientResourcesException and exception with message a string containing "Cannot acquire enough merge buffers")
     but: exception with cause an instance of io.druid.query.InsufficientResourcesException cause <java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers> is a java.util.concurrent.TimeoutException
Stacktrace was: QueryInterruptedException{msg=Cannot acquire enough merge buffers, code=Query timeout, class=java.util.concurrent.TimeoutException, host=null}
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:345)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.access$000(GroupByMergingQueryRunnerV2.java:72)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:176)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:158)
 at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)
 at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.FilteredSequence.accumulate(FilteredSequence.java:45)
 at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:167)
 at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:127)
 at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)
 at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)
 at io.druid.java.util.common.guava.SequenceWrapper.wrap(SequenceWrapper.java:55)
 at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.Sequence.toList(Sequence.java:76)
 at io.druid.query.groupby.GroupByQueryRunnerTestHelper.runQuery(GroupByQueryRunnerTestHelper.java:57)
 at io.druid.query.groupby.GroupByQueryRunnerFailureTest.testNotEnoughMergeBuffersOnQueryable(GroupByQueryRunnerFailureTest.java:208)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
Caused by: java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:337)
 ... 28 more
', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: (an instance of io.druid.query.QueryInterruptedException and exception with cause an instance of io.druid.query.InsufficientResourcesException and exception with message a string containing "Cannot acquire enough merge buffers")
     but: exception with cause an instance of io.druid.query.InsufficientResourcesException cause <java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers> is a java.util.concurrent.TimeoutException
Stacktrace was: QueryInterruptedException{msg=Cannot acquire enough merge buffers, code=Query timeout, class=java.util.concurrent.TimeoutException, host=null}
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:345)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.access$000(GroupByMergingQueryRunnerV2.java:72)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:176)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:158)
 at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)
 at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.FilteredSequence.accumulate(FilteredSequence.java:45)
 at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:167)
 at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:127)
 at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)
 at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)
 at io.druid.java.util.common.guava.SequenceWrapper.wrap(SequenceWrapper.java:55)
 at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.Sequence.toList(Sequence.java:76)
 at io.druid.query.groupby.GroupByQueryRunnerTestHelper.runQuery(GroupByQueryRunnerTestHelper.java:57)
 at io.druid.query.groupby.GroupByQueryRunnerFailureTest.testNotEnoughMergeBuffersOnQueryable(GroupByQueryRunnerFailureTest.java:208)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
Caused by: java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:337)
 ... 28 more
', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: (an instance of io.druid.query.QueryInterruptedException and exception with cause an instance of io.druid.query.InsufficientResourcesException and exception with message a string containing "Cannot acquire enough merge buffers")
     but: exception with cause an instance of io.druid.query.InsufficientResourcesException cause <java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers> is a java.util.concurrent.TimeoutException
Stacktrace was: QueryInterruptedException{msg=Cannot acquire enough merge buffers, code=Query timeout, class=java.util.concurrent.TimeoutException, host=null}
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:345)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.access$000(GroupByMergingQueryRunnerV2.java:72)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:176)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:158)
 at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)
 at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.FilteredSequence.accumulate(FilteredSequence.java:45)
 at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:167)
 at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:127)
 at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)
 at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)
 at io.druid.java.util.common.guava.SequenceWrapper.wrap(SequenceWrapper.java:55)
 at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.Sequence.toList(Sequence.java:76)
 at io.druid.query.groupby.GroupByQueryRunnerTestHelper.runQuery(GroupByQueryRunnerTestHelper.java:57)
 at io.druid.query.groupby.GroupByQueryRunnerFailureTest.testNotEnoughMergeBuffersOnQueryable(GroupByQueryRunnerFailureTest.java:208)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
Caused by: java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:337)
 ... 28 more
', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: (an instance of io.druid.query.QueryInterruptedException and exception with cause an instance of io.druid.query.InsufficientResourcesException and exception with message a string containing "Cannot acquire enough merge buffers")
     but: exception with cause an instance of io.druid.query.InsufficientResourcesException cause <java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers> is a java.util.concurrent.TimeoutException
Stacktrace was: QueryInterruptedException{msg=Cannot acquire enough merge buffers, code=Query timeout, class=java.util.concurrent.TimeoutException, host=null}
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:345)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.access$000(GroupByMergingQueryRunnerV2.java:72)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:176)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:158)
 at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)
 at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.FilteredSequence.accumulate(FilteredSequence.java:45)
 at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:167)
 at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:127)
 at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)
 at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)
 at io.druid.java.util.common.guava.SequenceWrapper.wrap(SequenceWrapper.java:55)
 at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.Sequence.toList(Sequence.java:76)
 at io.druid.query.groupby.GroupByQueryRunnerTestHelper.runQuery(GroupByQueryRunnerTestHelper.java:57)
 at io.druid.query.groupby.GroupByQueryRunnerFailureTest.testNotEnoughMergeBuffersOnQueryable(GroupByQueryRunnerFailureTest.java:208)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
Caused by: java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:337)
 ... 28 more
', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: (an instance of io.druid.query.QueryInterruptedException and exception with cause an instance of io.druid.query.InsufficientResourcesException and exception with message a string containing "Cannot acquire enough merge buffers")
     but: exception with cause an instance of io.druid.query.InsufficientResourcesException cause <java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers> is a java.util.concurrent.TimeoutException
Stacktrace was: QueryInterruptedException{msg=Cannot acquire enough merge buffers, code=Query timeout, class=java.util.concurrent.TimeoutException, host=null}
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:345)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.access$000(GroupByMergingQueryRunnerV2.java:72)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:176)
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:158)
 at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)
 at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.FilteredSequence.accumulate(FilteredSequence.java:45)
 at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:167)
 at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:127)
 at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)
 at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)
 at io.druid.java.util.common.guava.SequenceWrapper.wrap(SequenceWrapper.java:55)
 at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)
 at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)
 at io.druid.java.util.common.guava.Sequence.toList(Sequence.java:76)
 at io.druid.query.groupby.GroupByQueryRunnerTestHelper.runQuery(GroupByQueryRunnerTestHelper.java:57)
 at io.druid.query.groupby.GroupByQueryRunnerFailureTest.testNotEnoughMergeBuffersOnQueryable(GroupByQueryRunnerFailureTest.java:208)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
Caused by: java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers
 at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:337)
 ... 28 more
', isError=false}], nbFailures=5, nbErrors=0}
status: EXCEPTION
dateEnd: Tue Apr 24 22:55:29 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/druid-io/druid/370697447/processing/src/main/java], projectClasspath='[Ljava.net.URL;@258ee7de', projectTests=[io.druid.query.groupby.GroupByQueryRunnerFailureTest], complianceLevel=8, outputFolder=./workspace/druid-io/druid/370697447, json=false}
exception: The constructor ExpressionPostAggregator(String, String, String, ExprMacroTable, aggregators.entrySet().stream().collect(Collectors.toMap((<no type> entry) -> entry.getKey(), (<no type> entry) -> entry.getValue()::finalizeComputation))) is undefined at /root/workspace/druid-io/druid/370697447/processing/src/main/java/io/druid/query/aggregation/post/ExpressionPostAggregator.java:144
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



