nopolinfo #0
location: FailureLocation{className='org.everit.json.schema.V6TestSuiteTest', failingMethods=[org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword validation], org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, all true], org.everit.json.schema.V6TestSuiteTest#test[[patternProperties.json]/patternProperties with boolean schemas], org.everit.json.schema.V6TestSuiteTest#test[[properties.json]/properties with boolean schema], org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const with object], org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const with null], org.everit.json.schema.V6TestSuiteTest#test[[anyOf.json]/anyOf with boolean schemas, all true], org.everit.json.schema.V6TestSuiteTest#test[[allOf.json]/allOf with boolean schemas, all true], org.everit.json.schema.V6TestSuiteTest#test[[anyOf.json]/anyOf with boolean schemas, some true], org.everit.json.schema.V6TestSuiteTest#test[[not.json]/not with boolean schema false], org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword with boolean schema true], org.everit.json.schema.V6TestSuiteTest#test[[exclusiveMaximum.json]/exclusiveMaximum validation], org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, one true], org.everit.json.schema.V6TestSuiteTest#test[[items.json]/items with boolean schema (false)], org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword with boolean schema false], org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, all false], org.everit.json.schema.V6TestSuiteTest#test[[items.json]/items with boolean schema (true)], org.everit.json.schema.V6TestSuiteTest#test[[allOf.json]/allOf with boolean schemas, some false], org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const validation], org.everit.json.schema.V6TestSuiteTest#test[[propertyNames.json]/propertyNames validation], org.everit.json.schema.V6TestSuiteTest#test[[exclusiveMinimum.json]/exclusiveMinimum validation], org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword with const keyword], org.everit.json.schema.V6TestSuiteTest#test[[allOf.json]/allOf with boolean schemas, all false], org.everit.json.schema.V6TestSuiteTest#test[[items.json]/items with boolean schemas], org.everit.json.schema.V6TestSuiteTest#test[[dependencies.json]/dependencies with boolean subschemas], org.everit.json.schema.V6TestSuiteTest#test[[propertyNames.json]/propertyNames with boolean schema false], org.everit.json.schema.V6TestSuiteTest#test[[not.json]/not with boolean schema true], org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/ref overrides any sibling keywords], org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, more than one true], org.everit.json.schema.V6TestSuiteTest#test[[anyOf.json]/anyOf with boolean schemas, all false]], erroringMethods=[org.everit.json.schema.V6TestSuiteTest#test[[boolean_schema.json]/boolean schema 'true'], org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/base URI change - change folder in subschema], org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/root ref in remote ref], org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/$ref to boolean schema true], org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/Recursive references between schemas], org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/$ref to boolean schema false], org.everit.json.schema.V6TestSuiteTest#test[[boolean_schema.json]/boolean schema 'false'], org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/base URI change], org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/base URI change - change folder]], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/array without items matching schema is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/empty array is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/array without item 5 is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/empty array is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/any non-empty array is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/empty array is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [allOf.json]/allOf with boolean schemas, all true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [allOf.json]/allOf with boolean schemas, some false', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [allOf.json]/allOf with boolean schemas, all false', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [patternProperties.json]/patternProperties with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [patternProperties.json]/patternProperties with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [patternProperties.json]/patternProperties with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [patternProperties.json]/patternProperties with boolean schemas', isError=false}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: name.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: name.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: name.json', isError=true}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [not.json]/not with boolean schema true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [not.json]/not with boolean schema false', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [properties.json]/properties with boolean schema', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [properties.json]/properties with boolean schema', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [properties.json]/properties with boolean schema', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [properties.json]/properties with boolean schema', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [exclusiveMaximum.json]/boundary point is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [exclusiveMaximum.json]/above the exclusiveMaximum is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schema (true)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schema (true)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schema (false)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schema (false)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [exclusiveMinimum.json]/boundary point is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [exclusiveMinimum.json]/below the exclusiveMinimum is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false failure for [ref.json]/ref valid, maxItems ignored', isError=false}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: node', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: node', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [const.json]/another value is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [const.json]/another type is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [const.json]/another object is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [const.json]/another type is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [const.json]/not null is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [oneOf.json]/oneOf with boolean schemas, all true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [oneOf.json]/oneOf with boolean schemas, one true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [oneOf.json]/oneOf with boolean schemas, more than one true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [oneOf.json]/oneOf with boolean schemas, all false', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [propertyNames.json]/some property names invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [propertyNames.json]/object with any properties is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [dependencies.json]/dependencies with boolean subschemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [dependencies.json]/dependencies with boolean subschemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [dependencies.json]/dependencies with boolean subschemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [dependencies.json]/dependencies with boolean subschemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [anyOf.json]/anyOf with boolean schemas, all true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [anyOf.json]/anyOf with boolean schemas, some true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [anyOf.json]/anyOf with boolean schemas, all false', isError=false}], nbFailures=49, nbErrors=31}
status: NOPATCH
dateEnd: Thu Jun 01 05:33:58 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/everit-org/json-schema/238123824/tests/../core/src/main/java], projectClasspath='[Ljava.net.URL;@2b27cc70', projectTests=[org.everit.json.schema.V6TestSuiteTest], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: IGNORE_ERRORING
----------



nopolinfo #1
location: FailureLocation{className='org.everit.json.schema.V6TestSuiteTest', failingMethods=[org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword validation], org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, all true], org.everit.json.schema.V6TestSuiteTest#test[[patternProperties.json]/patternProperties with boolean schemas], org.everit.json.schema.V6TestSuiteTest#test[[properties.json]/properties with boolean schema], org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const with object], org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const with null], org.everit.json.schema.V6TestSuiteTest#test[[anyOf.json]/anyOf with boolean schemas, all true], org.everit.json.schema.V6TestSuiteTest#test[[allOf.json]/allOf with boolean schemas, all true], org.everit.json.schema.V6TestSuiteTest#test[[anyOf.json]/anyOf with boolean schemas, some true], org.everit.json.schema.V6TestSuiteTest#test[[not.json]/not with boolean schema false], org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword with boolean schema true], org.everit.json.schema.V6TestSuiteTest#test[[exclusiveMaximum.json]/exclusiveMaximum validation], org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, one true], org.everit.json.schema.V6TestSuiteTest#test[[items.json]/items with boolean schema (false)], org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword with boolean schema false], org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, all false], org.everit.json.schema.V6TestSuiteTest#test[[items.json]/items with boolean schema (true)], org.everit.json.schema.V6TestSuiteTest#test[[allOf.json]/allOf with boolean schemas, some false], org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const validation], org.everit.json.schema.V6TestSuiteTest#test[[propertyNames.json]/propertyNames validation], org.everit.json.schema.V6TestSuiteTest#test[[exclusiveMinimum.json]/exclusiveMinimum validation], org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword with const keyword], org.everit.json.schema.V6TestSuiteTest#test[[allOf.json]/allOf with boolean schemas, all false], org.everit.json.schema.V6TestSuiteTest#test[[items.json]/items with boolean schemas], org.everit.json.schema.V6TestSuiteTest#test[[dependencies.json]/dependencies with boolean subschemas], org.everit.json.schema.V6TestSuiteTest#test[[propertyNames.json]/propertyNames with boolean schema false], org.everit.json.schema.V6TestSuiteTest#test[[not.json]/not with boolean schema true], org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/ref overrides any sibling keywords], org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, more than one true], org.everit.json.schema.V6TestSuiteTest#test[[anyOf.json]/anyOf with boolean schemas, all false]], erroringMethods=[org.everit.json.schema.V6TestSuiteTest#test[[boolean_schema.json]/boolean schema 'true'], org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/base URI change - change folder in subschema], org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/root ref in remote ref], org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/$ref to boolean schema true], org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/Recursive references between schemas], org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/$ref to boolean schema false], org.everit.json.schema.V6TestSuiteTest#test[[boolean_schema.json]/boolean schema 'false'], org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/base URI change], org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/base URI change - change folder]], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/array without items matching schema is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/empty array is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/array without item 5 is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/empty array is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/any non-empty array is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [contains.json]/empty array is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [allOf.json]/allOf with boolean schemas, all true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [allOf.json]/allOf with boolean schemas, some false', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [allOf.json]/allOf with boolean schemas, all false', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [patternProperties.json]/patternProperties with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [patternProperties.json]/patternProperties with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [patternProperties.json]/patternProperties with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [patternProperties.json]/patternProperties with boolean schemas', isError=false}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: folderInteger.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: name.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: name.json', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: name.json', isError=true}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [not.json]/not with boolean schema true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [not.json]/not with boolean schema false', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [properties.json]/properties with boolean schema', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [properties.json]/properties with boolean schema', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [properties.json]/properties with boolean schema', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [properties.json]/properties with boolean schema', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [exclusiveMaximum.json]/boundary point is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [exclusiveMaximum.json]/above the exclusiveMaximum is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schema (true)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schema (true)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schema (false)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schema (false)', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [items.json]/items with boolean schemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [exclusiveMinimum.json]/boundary point is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [exclusiveMinimum.json]/below the exclusiveMinimum is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false failure for [ref.json]/ref valid, maxItems ignored', isError=false}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: node', isError=true}, FailureType{failureName='java.io.UncheckedIOException', failureDetail='java.net.MalformedURLException: no protocol: node', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.ClassCastException', failureDetail='java.lang.Boolean cannot be cast to org.json.JSONObject', isError=true}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [const.json]/another value is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [const.json]/another type is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [const.json]/another object is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [const.json]/another type is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [const.json]/not null is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [oneOf.json]/oneOf with boolean schemas, all true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [oneOf.json]/oneOf with boolean schemas, one true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [oneOf.json]/oneOf with boolean schemas, more than one true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [oneOf.json]/oneOf with boolean schemas, all false', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [propertyNames.json]/some property names invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='false success for [propertyNames.json]/object with any properties is invalid', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [dependencies.json]/dependencies with boolean subschemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [dependencies.json]/dependencies with boolean subschemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [dependencies.json]/dependencies with boolean subschemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [dependencies.json]/dependencies with boolean subschemas', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [anyOf.json]/anyOf with boolean schemas, all true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [anyOf.json]/anyOf with boolean schemas, some true', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='schema loading failure for [anyOf.json]/anyOf with boolean schemas, all false', isError=false}], nbFailures=49, nbErrors=31}
status: NOPATCH
dateEnd: Thu Jun 01 05:34:02 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/everit-org/json-schema/238123824/tests/../core/src/main/java], projectClasspath='[Ljava.net.URL;@51841ac6', projectTests=[org.everit.json.schema.V6TestSuiteTest], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: IGNORE_FAILING
----------



