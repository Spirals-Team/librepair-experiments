nopolinfo #0
location: FailureLocation{className='com.github.funthomas424242.rades.annotations.processors.RadesBuilderProcessorTest', failingMethods=[com.github.funthomas424242.rades.annotations.processors.RadesBuilderProcessorTest#processAuto], erroringMethods=[], failures=[FailureType{failureName='com.google.common.truth.Truth$AssertionErrorWithCause', failureDetail='Not true that </SOURCE_OUTPUT/com/github/funthomas424242/domain/CarBuilder.java> is equivalent to </root/workspace/FunThomas424242/rades-annotations/363795989/src/test/expectations/CarBuilder.java>.

Diffs:
======

Found 10 nodes that differed in expected and actual trees. 

> Difference in expected tree and actual tree.
  Expected node: Line 43 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withMotor)
  Actual node: Line 43 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withTyp)
  Expected method name to be <withMotor> but was <withTyp>.

> Difference in expected tree and actual tree.
  Expected node: Line 43 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withMotor)->VARIABLE(motor)
  Actual node: Line 43 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withTyp)->VARIABLE(typ)
  Expected variable name to be <motor> but was <typ>.

> Difference in expected tree and actual tree.
  Expected node: Line 43 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withMotor)->VARIABLE(motor)->MEMBER_SELECT(Object)
  Actual node: Line 43 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withTyp)->VARIABLE(typ)->MEMBER_SELECT(String)
  Expected member identifier to be <Object> but was <String>.

> Difference in expected tree and actual tree.
  Expected node: Line 44 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withMotor)->BLOCK(non-static)->EXPRESSION_STATEMENT->ASSIGNMENT->MEMBER_SELECT(motor)
  Actual node: Line 44 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withTyp)->BLOCK(non-static)->EXPRESSION_STATEMENT->ASSIGNMENT->MEMBER_SELECT(typ)
  Expected member identifier to be <motor> but was <typ>.

> Difference in expected tree and actual tree.
  Expected node: Line 44 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withMotor)->BLOCK(non-static)->EXPRESSION_STATEMENT->ASSIGNMENT->IDENTIFIER(motor)
  Actual node: Line 44 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withTyp)->BLOCK(non-static)->EXPRESSION_STATEMENT->ASSIGNMENT->IDENTIFIER(typ)
  Expected identifier to be <motor> but was <typ>.

> Difference in expected tree and actual tree.
  Expected node: Line 48 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withTyp)
  Actual node: Line 48 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withMotor)
  Expected method name to be <withTyp> but was <withMotor>.

> Difference in expected tree and actual tree.
  Expected node: Line 48 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withTyp)->VARIABLE(typ)
  Actual node: Line 48 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withMotor)->VARIABLE(motor)
  Expected variable name to be <typ> but was <motor>.

> Difference in expected tree and actual tree.
  Expected node: Line 48 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withTyp)->VARIABLE(typ)->MEMBER_SELECT(String)
  Actual node: Line 48 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withMotor)->VARIABLE(motor)->MEMBER_SELECT(Object)
  Expected member identifier to be <String> but was <Object>.

> Difference in expected tree and actual tree.
  Expected node: Line 49 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withTyp)->BLOCK(non-static)->EXPRESSION_STATEMENT->ASSIGNMENT->MEMBER_SELECT(typ)
  Actual node: Line 49 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withMotor)->BLOCK(non-static)->EXPRESSION_STATEMENT->ASSIGNMENT->MEMBER_SELECT(motor)
  Expected member identifier to be <typ> but was <motor>.

> Difference in expected tree and actual tree.
  Expected node: Line 49 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withTyp)->BLOCK(non-static)->EXPRESSION_STATEMENT->ASSIGNMENT->IDENTIFIER(typ)
  Actual node: Line 49 COMPILATION_UNIT->CLASS(CarBuilder)->METHOD(withMotor)->BLOCK(non-static)->EXPRESSION_STATEMENT->ASSIGNMENT->IDENTIFIER(motor)
  Expected identifier to be <typ> but was <motor>.


Expected Source:
================

package com.github.funthomas424242.domain;
import javax.annotation.Generated;
import org.apache.commons.lang3.StringUtils;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.ValidationException;
import javax.validation.Validator;

@Generated(value="com.github.funthomas424242.rades.annotations.processors.RadesBuilderProcessor"
        , date="2018-04-06T20:36:46.750"
        , comments="com.github.funthomas424242.domain.Auto")
public class CarBuilder {

    private Auto auto;

    public CarBuilder(){
        this(new Auto());
    }

    public CarBuilder( final Auto auto ){
        this.auto = auto;
    }

    public Auto build() {
        final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        final java.util.Set<ConstraintViolation<Auto>> constraintViolations = validator.validate(this.auto);

        if (constraintViolations.size() > 0) {
            java.util.Set<String> violationMessages = new java.util.HashSet<String>();

            for (ConstraintViolation<?> constraintViolation : constraintViolations) {
                violationMessages.add(constraintViolation.getPropertyPath() + ": " + constraintViolation.getMessage());
            }

            throw new ValidationException("Auto is not valid:\n" + StringUtils.join(violationMessages, "\n"));
        }
        final Auto value = this.auto;
        this.auto = null;
        return value;
    }

    public CarBuilder withMotor( final java.lang.Object motor ) {
        this.auto.motor = motor;
        return this;
    }

    public CarBuilder withTyp( final java.lang.String typ ) {
        this.auto.typ = typ;
        return this;
    }

    public CarBuilder withHersteller( final java.lang.String hersteller ) {
        this.auto.hersteller = hersteller;
        return this;
    }

}


Actual Source:
==============

package com.github.funthomas424242.domain;
import javax.annotation.Generated;
import org.apache.commons.lang3.StringUtils;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.ValidationException;
import javax.validation.Validator;

@Generated(value="com.github.funthomas424242.rades.annotations.processors.RadesBuilderProcessor"
, date="2018-04-06T20:36:46.750"
, comments="com.github.funthomas424242.domain.Auto")
public class CarBuilder {

    private Auto auto;

    public CarBuilder(){
        this(new Auto());
    }

    public CarBuilder( final Auto auto ){
        this.auto = auto;
    }

    public Auto build() {
        final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        final java.util.Set<ConstraintViolation<Auto>> constraintViolations = validator.validate(this.auto);

        if (constraintViolations.size() > 0) {
            java.util.Set<String> violationMessages = new java.util.HashSet<String>();

            for (ConstraintViolation<?> constraintViolation : constraintViolations) {
                violationMessages.add(constraintViolation.getPropertyPath() + ": " + constraintViolation.getMessage());
            }

            throw new ValidationException("Auto is not valid:\n" + StringUtils.join(violationMessages, "\n"));
        }
        final Auto value = this.auto;
        this.auto = null;
        return value;
    }

    public CarBuilder withTyp( final java.lang.String typ ) {
        this.auto.typ = typ;
        return this;
    }

    public CarBuilder withMotor( final java.lang.Object motor ) {
        this.auto.motor = motor;
        return this;
    }

    public CarBuilder withHersteller( final java.lang.String hersteller ) {
        this.auto.hersteller = hersteller;
        return this;
    }

}
', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Sun Apr 08 17:53:41 CEST 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/FunThomas424242/rades-annotations/363795989/src/main/java], projectClasspath='[Ljava.net.URL;@514eedd8', projectTests=[com.github.funthomas424242.rades.annotations.processors.RadesBuilderProcessorTest], complianceLevel=8, outputFolder=./workspace/FunThomas424242/rades-annotations/363795989, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



