nopolinfo #0
location: FailureLocation{className='org.apache.calcite.test.JdbcAdapterTest', failingMethods=[org.apache.calcite.test.JdbcAdapterTest#testTableModifyInsertWithSubQuery, org.apache.calcite.test.JdbcAdapterTest#testCrossJoinWithJoinKeyAndFilterPlan, org.apache.calcite.test.JdbcAdapterTest#testJoin3TablesPlan, org.apache.calcite.test.JdbcAdapterTest#testCrossJoinWithJoinKeyPlan, org.apache.calcite.test.JdbcAdapterTest#testInPlan, org.apache.calcite.test.JdbcAdapterTest#testMixedJoinWithOrPlan, org.apache.calcite.test.JdbcAdapterTest#testMixedJoinPlan, org.apache.calcite.test.JdbcAdapterTest#testNonEquiJoinPlan, org.apache.calcite.test.JdbcAdapterTest#testCartesianJoinWithoutKeyPlan, org.apache.calcite.test.JdbcAdapterTest#testTableModifyUpdate, org.apache.calcite.test.JdbcAdapterTest#testNonEquiJoinReverseConditionPlan, org.apache.calcite.test.JdbcAdapterTest#testEquiJoinPlan], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcTableModify(table=[[foodmart, expense_fact]], operation=[INSERT], flattened=[false])\n    JdbcProject(store_id=[$0], account_id=[$1], exp_date=[$2], time_id=[+($3, 1)], category_id=[$4], currency_id=[$5], amount=[$6])\n      JdbcFilter(condition=[=($0, 666)])\n        JdbcTableScan(table=[[foodmart, expense_fact]])\n"
     but: was "PLAN=EnumerableTableModify(table=[[foodmart, expense_fact]], operation=[INSERT], flattened=[false])\n  EnumerableCalc(expr#0..6=[{inputs}], expr#7=[1], expr#8=[+($t3, $t7)], proj#0..2=[{exprs}], time_id=[$t8], category_id=[$t4], currency_id=[$t5], amount=[$t6])\n    JdbcToEnumerableConverter\n      JdbcFilter(condition=[=($0, 666)])\n        JdbcTableScan(table=[[foodmart, expense_fact]])\n\n"', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "PLAN=EnumerableJoin(condition=[true], joinType=[inner])\n  JdbcToEnumerableConverter\n    JdbcProject(EMPNO=[$0], ENAME=[$1])\n      JdbcTableScan(table=[[SCOTT, EMP]])\n  JdbcToEnumerableConverter\n    JdbcProject(DEPTNO=[$0], DNAME=[$1])\n      JdbcTableScan(table=[[SCOTT, DEPT]])"
     but: was "PLAN=EnumerableJoin(condition=[true], joinType=[inner])\n  EnumerableCalc(expr#0..7=[{inputs}], proj#0..1=[{exprs}])\n    JdbcToEnumerableConverter\n      JdbcTableScan(table=[[SCOTT, EMP]])\n  EnumerableCalc(expr#0..2=[{inputs}], proj#0..1=[{exprs}])\n    JdbcToEnumerableConverter\n      JdbcTableScan(table=[[SCOTT, DEPT]])\n\n"', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\n    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=EnumerableCalc(expr#0..5=[{inputs}], expr#6=[>($t3, $t5)], proj#0..1=[{exprs}], EMPNO0=[$t0], ENAME0=[$t1], $condition=[$t6])\n  EnumerableJoin(condition=[=($2, $4)], joinType=[inner])\n    EnumerableCalc(expr#0..7=[{inputs}], proj#0..1=[{exprs}], MGR=[$t3], SAL=[$t5])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, EMP]])\n    EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, EMP]])\n\n"', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], GRADE=[$0])\n    JdbcJoin(condition=[AND(>($5, $1), <($5, $2))], joinType=[inner])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=EnumerableCalc(expr#0..5=[{inputs}], expr#6=[>($t2, $t4)], expr#7=[<($t2, $t5)], expr#8=[AND($t6, $t7)], proj#0..1=[{exprs}], GRADE=[$t3], $condition=[$t8])\n  EnumerableJoin(condition=[true], joinType=[inner])\n    EnumerableCalc(expr#0..7=[{inputs}], proj#0..1=[{exprs}], SAL=[$t5])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, EMP]])\n    JdbcToEnumerableConverter\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n\n"', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], DNAME=[$8], GRADE=[$0])\n    JdbcJoin(condition=[AND(>($5, $1), <($5, $2))], joinType=[inner])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n      JdbcJoin(condition=[=($3, $4)], joinType=[inner])\n        JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5], DEPTNO=[$7])\n          JdbcTableScan(table=[[SCOTT, EMP]])\n        JdbcProject(DEPTNO=[$0], DNAME=[$1])\n          JdbcTableScan(table=[[SCOTT, DEPT]])"
     but: was "PLAN=EnumerableCalc(expr#0..8=[{inputs}], EMPNO=[$t2], ENAME=[$t3], DNAME=[$t1], GRADE=[$t6])\n  EnumerableJoin(condition=[=($0, $5)], joinType=[inner])\n    EnumerableCalc(expr#0..2=[{inputs}], proj#0..1=[{exprs}])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, DEPT]])\n    EnumerableCalc(expr#0..6=[{inputs}], expr#7=[>($t2, $t5)], expr#8=[<($t2, $t6)], expr#9=[AND($t7, $t8)], proj#0..6=[{exprs}], $condition=[$t9])\n      EnumerableJoin(condition=[true], joinType=[inner])\n        EnumerableCalc(expr#0..7=[{inputs}], proj#0..1=[{exprs}], SAL=[$t5], DEPTNO=[$t7])\n          JdbcToEnumerableConverter\n            JdbcTableScan(table=[[SCOTT, EMP]])\n        JdbcToEnumerableConverter\n          JdbcTableScan(table=[[SCOTT, SALGRADE]])\n\n"', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$4], DNAME=[$1])\n    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\n      JdbcProject(DEPTNO=[$0], DNAME=[$1])\n        JdbcTableScan(table=[[SCOTT, DEPT]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=EnumerableCalc(expr#0..4=[{inputs}], proj#0..2=[{exprs}], DNAME=[$t4])\n  EnumerableJoin(condition=[=($2, $3)], joinType=[inner])\n    EnumerableCalc(expr#0..7=[{inputs}], proj#0..1=[{exprs}], DEPTNO=[$t7])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, EMP]])\n    EnumerableCalc(expr#0..2=[{inputs}], proj#0..1=[{exprs}])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, DEPT]])\n\n"', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$3], DNAME=[$4])\n    JdbcJoin(condition=[=($2, $3)], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(DEPTNO=[$0], DNAME=[$1])\n        JdbcTableScan(table=[[SCOTT, DEPT]])"
     but: was "PLAN=EnumerableCalc(expr#0..4=[{inputs}], proj#0..1=[{exprs}], DEPTNO=[$t3], DNAME=[$t4])\n  EnumerableJoin(condition=[=($2, $3)], joinType=[inner])\n    EnumerableCalc(expr#0..7=[{inputs}], proj#0..1=[{exprs}], DEPTNO=[$t7])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, EMP]])\n    EnumerableCalc(expr#0..2=[{inputs}], proj#0..1=[{exprs}])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, DEPT]])\n\n"', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$3], DNAME=[$4])\n    JdbcJoin(condition=[=($2, $3)], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\n        JdbcFilter(condition=[=(CAST($7):INTEGER, 20)])\n          JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(DEPTNO=[$0], DNAME=[$1])\n        JdbcTableScan(table=[[SCOTT, DEPT]])"
     but: was "PLAN=EnumerableCalc(expr#0..4=[{inputs}], proj#0..1=[{exprs}], DEPTNO=[$t3], DNAME=[$t4])\n  EnumerableJoin(condition=[=($2, $3)], joinType=[inner])\n    EnumerableCalc(expr#0..7=[{inputs}], proj#0..1=[{exprs}], DEPTNO=[$t7])\n      JdbcToEnumerableConverter\n        JdbcFilter(condition=[=(CAST($7):INTEGER, 20)])\n          JdbcTableScan(table=[[SCOTT, EMP]])\n    EnumerableCalc(expr#0..2=[{inputs}], proj#0..1=[{exprs}])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, DEPT]])\n\n"', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='Plan [org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = org.apache.calcite.runtime.ResultSetEnumerable.of(((org.apache.calcite.adapter.jdbc.JdbcSchema) root.getRootSchema().getSubSchema("foodmart").unwrap(org.apache.calcite.adapter.jdbc.JdbcSchema.class)).getDataSource(), "SELECT *\nFROM \"foodmart\".\"store\"\nWHERE \"store_name\" = 'Store 1' OR \"store_name\" = 'Store 10' OR \"store_name\" = 'Store 11' OR \"store_name\" = 'Store 15' OR \"store_name\" = 'Store 16' OR \"store_name\" = 'Store 24' OR \"store_name\" = 'Store 3' OR \"store_name\" = 'Store 7'", new org.apache.calcite.linq4j.function.Function1() {
              public org.apache.calcite.linq4j.function.Function0 apply(final java.sql.ResultSet resultSet) {
                return new org.apache.calcite.linq4j.function.Function0() {
                    public Object apply() {
                      try {
                        final Object[] values = new Object[24];
                        values[0] = resultSet.getInt(1);
                        if (resultSet.wasNull()) {
                          values[0] = null;
                        }
                        values[1] = resultSet.getObject(2);
                        values[2] = resultSet.getInt(3);
                        if (resultSet.wasNull()) {
                          values[2] = null;
                        }
                        values[3] = resultSet.getObject(4);
                        values[4] = resultSet.getInt(5);
                        if (resultSet.wasNull()) {
                          values[4] = null;
                        }
                        values[5] = resultSet.getObject(6);
                        values[6] = resultSet.getObject(7);
                        values[7] = resultSet.getObject(8);
                        values[8] = resultSet.getObject(9);
                        values[9] = resultSet.getObject(10);
                        values[10] = resultSet.getObject(11);
                        values[11] = resultSet.getObject(12);
                        values[12] = resultSet.getObject(13);
                        values[13] = org.apache.calcite.runtime.SqlFunctions.toLongOptional(resultSet.getTimestamp(14));
                        if (resultSet.wasNull()) {
                          values[13] = null;
                        }
                        values[14] = org.apache.calcite.runtime.SqlFunctions.toLongOptional(resultSet.getTimestamp(15));
                        if (resultSet.wasNull()) {
                          values[14] = null;
                        }
                        values[15] = resultSet.getInt(16);
                        if (resultSet.wasNull()) {
                          values[15] = null;
                        }
                        values[16] = resultSet.getInt(17);
                        if (resultSet.wasNull()) {
                          values[16] = null;
                        }
                        values[17] = resultSet.getInt(18);
                        if (resultSet.wasNull()) {
                          values[17] = null;
                        }
                        values[18] = resultSet.getInt(19);
                        if (resultSet.wasNull()) {
                          values[18] = null;
                        }
                        values[19] = resultSet.getBoolean(20);
                        if (resultSet.wasNull()) {
                          values[19] = null;
                        }
                        values[20] = resultSet.getBoolean(21);
                        if (resultSet.wasNull()) {
                          values[20] = null;
                        }
                        values[21] = resultSet.getBoolean(22);
                        if (resultSet.wasNull()) {
                          values[21] = null;
                        }
                        values[22] = resultSet.getBoolean(23);
                        if (resultSet.wasNull()) {
                          values[22] = null;
                        }
                        values[23] = resultSet.getBoolean(24);
                        if (resultSet.wasNull()) {
                          values[23] = null;
                        }
                        return values;
                      } catch (java.sql.SQLException e) {
                        throw new RuntimeException(
                          e);
                      }
                    }
                  }
                ;
              }
              public Object apply(final Object resultSet) {
                return apply(
                  (java.sql.ResultSet) resultSet);
              }
            }
            ).enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              return new Object[] {
                  current[0],
                  current[3]};
            }

          };
      }

    };
}


public Class getElementType() {
  return java.lang.Object[].class;
}


] contains [getDataSource(), "SELECT \"store_id\", \"store_name\"\nFROM \"foodmart\".\"store\"\nWHERE \"store_name\" = 'Store 1' OR \"store_name\" = 'Store 10' OR \"store_name\" = 'Store 11' OR \"store_name\" = 'Store 15' OR \"store_name\" = 'Store 16' OR \"store_name\" = 'Store 24' OR \"store_name\" = 'Store 3' OR \"store_name\" = 'Store 7'"]', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcTableModify(table=[[foodmart, expense_fact]], operation=[UPDATE], updateColumnList=[[account_id]], sourceExpressionList=[[888]], flattened=[false])\n    JdbcProject(store_id=[$0], account_id=[$1], exp_date=[$2], time_id=[$3], category_id=[$4], currency_id=[$5], amount=[$6], EXPR$0=[888])\n      JdbcFilter(condition=[=($0, 666)])\n        JdbcTableScan(table=[[foodmart, expense_fact]])"
     but: was "PLAN=EnumerableTableModify(table=[[foodmart, expense_fact]], operation=[UPDATE], updateColumnList=[[account_id]], sourceExpressionList=[[888]], flattened=[false])\n  EnumerableCalc(expr#0..6=[{inputs}], expr#7=[888], proj#0..7=[{exprs}])\n    JdbcToEnumerableConverter\n      JdbcFilter(condition=[=($0, 666)])\n        JdbcTableScan(table=[[foodmart, expense_fact]])\n\n"', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], GRADE=[$0])\n    JdbcJoin(condition=[AND(<=($1, $5), >=($2, $5))], joinType=[inner])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=EnumerableCalc(expr#0..5=[{inputs}], expr#6=[<=($t4, $t2)], expr#7=[>=($t5, $t2)], expr#8=[AND($t6, $t7)], proj#0..1=[{exprs}], GRADE=[$t3], $condition=[$t8])\n  EnumerableJoin(condition=[true], joinType=[inner])\n    EnumerableCalc(expr#0..7=[{inputs}], proj#0..1=[{exprs}], SAL=[$t5])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, EMP]])\n    JdbcToEnumerableConverter\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n\n"', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], EMPNO0=[$3], ENAME0=[$4])\n    JdbcJoin(condition=[AND(=($5, $0), OR(>($7, $2), >($1, $6)))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], HIREDATE=[$4], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], HIREDATE=[$4], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=EnumerableCalc(expr#0..7=[{inputs}], expr#8=[>($t4, $t7)], expr#9=[>($t6, $t3)], expr#10=[OR($t8, $t9)], proj#0..1=[{exprs}], EMPNO0=[$t0], ENAME0=[$t1], $condition=[$t10])\n  EnumerableJoin(condition=[=($2, $5)], joinType=[inner])\n    EnumerableCalc(expr#0..7=[{inputs}], proj#0..1=[{exprs}], MGR=[$t3], HIREDATE=[$t4], SAL=[$t5])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, EMP]])\n    EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], HIREDATE=[$t4], SAL=[$t5])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[SCOTT, EMP]])\n\n"', isError=false}], nbFailures=12, nbErrors=0}
status: NOPATCH
dateEnd: Fri Apr 13 04:15:31 CEST 2018
allocatedtime: 120minutes 
passingTime: 1minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/apache/calcite/365902520/core/src/main/java], projectClasspath='[Ljava.net.URL;@3766c667', projectTests=[org.apache.calcite.test.JdbcAdapterTest], complianceLevel=8, outputFolder=./workspace/apache/calcite/365902520, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #1
location: FailureLocation{className='org.apache.calcite.test.JdbcTest', failingMethods=[org.apache.calcite.test.JdbcTest#testSelfJoinCount, org.apache.calcite.test.JdbcTest#testUpdateBind], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='UPDATE', isError=false}, FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "JdbcToEnumerableConverter\n  JdbcAggregate(group=[{}], C=[COUNT()])\n    JdbcJoin(condition=[=($0, $1)], joinType=[inner])\n      JdbcProject(store_id=[$0])\n        JdbcTableScan(table=[[foodmart, store]])\n      JdbcProject(store_id=[$0])\n        JdbcTableScan(table=[[foodmart, store]])\n"
     but: was "PLAN=EnumerableAggregate(group=[{}], C=[COUNT()])\n  EnumerableJoin(condition=[=($0, $1)], joinType=[inner])\n    EnumerableCalc(expr#0..23=[{inputs}], store_id=[$t0])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[foodmart, store]])\n    EnumerableCalc(expr#0..23=[{inputs}], store_id=[$t0])\n      JdbcToEnumerableConverter\n        JdbcTableScan(table=[[foodmart, store]])\n\n"', isError=false}], nbFailures=2, nbErrors=0}
status: NOPATCH
dateEnd: Fri Apr 13 04:16:29 CEST 2018
allocatedtime: 119minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/apache/calcite/365902520/core/src/main/java], projectClasspath='[Ljava.net.URL;@48771b1a', projectTests=[org.apache.calcite.test.JdbcTest], complianceLevel=8, outputFolder=./workspace/apache/calcite/365902520, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #2
location: FailureLocation{className='org.apache.calcite.test.LatticeTest', failingMethods=[org.apache.calcite.test.LatticeTest#testJG], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='
Expected: a string containing "JdbcToEnumerableConverter\n  JdbcAggregate(group=[{3, 6, 8, 9, 10, 12}], m0=[COUNT()], m1=[$SUM0($2)], m2=[$SUM0($3)])\n    JdbcJoin(condition=[=($4, $11)], joinType=[inner])\n      JdbcJoin(condition=[=($1, $7)], joinType=[inner])\n        JdbcJoin(condition=[=($0, $5)], joinType=[inner])\n          JdbcProject(product_id=[$0], time_id=[$1], store_sales=[$5], unit_sales=[$7])\n            JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n          JdbcProject(product_class_id=[$0], product_id=[$1], recyclable_package=[$8])\n            JdbcTableScan(table=[[foodmart, product]])\n        JdbcProject(time_id=[$0], the_day=[$2], the_year=[$4], quarter=[$8])\n          JdbcTableScan(table=[[foodmart, time_by_day]])\n      JdbcProject(product_class_id=[$0], product_family=[$4])\n        JdbcTableScan(table=[[foodmart, product_class]])"
     but: was "PLAN=EnumerableCalc(expr#0..8=[{inputs}], unit_sales=[$t3], recyclable_package=[$t4], the_day=[$t0], the_year=[$t1], quarter=[$t2], product_family=[$t5], m0=[$t6], m1=[$t7], m2=[$t8])\n  EnumerableAggregate(group=[{1, 2, 3, 7, 10, 12}], m0=[COUNT()], m1=[$SUM0($6)], m2=[$SUM0($7)])\n    EnumerableJoin(condition=[=($0, $5)], joinType=[inner])\n      EnumerableCalc(expr#0..9=[{inputs}], time_id=[$t0], the_day=[$t2], the_year=[$t4], quarter=[$t8])\n        JdbcToEnumerableConverter\n          JdbcTableScan(table=[[foodmart, time_by_day]])\n      EnumerableJoin(condition=[=($4, $7)], joinType=[inner])\n        EnumerableJoin(condition=[=($0, $5)], joinType=[inner])\n          EnumerableCalc(expr#0..7=[{inputs}], proj#0..1=[{exprs}], store_sales=[$t5], unit_sales=[$t7])\n            JdbcToEnumerableConverter\n              JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n          EnumerableCalc(expr#0..14=[{inputs}], proj#0..1=[{exprs}], recyclable_package=[$t8])\n            JdbcToEnumerableConverter\n              JdbcTableScan(table=[[foodmart, product]])\n        EnumerableCalc(expr#0..4=[{inputs}], product_class_id=[$t0], product_family=[$t4])\n          JdbcToEnumerableConverter\n            JdbcTableScan(table=[[foodmart, product_class]])\n\n"', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Fri Apr 13 04:17:23 CEST 2018
allocatedtime: 119minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/apache/calcite/365902520/core/src/main/java], projectClasspath='[Ljava.net.URL;@21ef5c94', projectTests=[org.apache.calcite.test.LatticeTest], complianceLevel=8, outputFolder=./workspace/apache/calcite/365902520, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #3
location: FailureLocation{className='org.apache.calcite.test.CoreQuidemTest', failingMethods=[org.apache.calcite.test.CoreQuidemTest#test[3: quidem(sql/agg.iq)]], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='Files differ: /root/workspace/apache/calcite/365902520/core/target/surefire/sql/agg.iq /root/workspace/apache/calcite/365902520/core/target/test-classes/sql/agg.iq
2057c2057
< | SCOTT |
---
> | sa    |
2071c2071
< | SCOTT |
---
> | sa    |
', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Fri Apr 13 04:18:17 CEST 2018
allocatedtime: 119minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/apache/calcite/365902520/core/src/main/java], projectClasspath='[Ljava.net.URL;@62e49cf9', projectTests=[org.apache.calcite.test.CoreQuidemTest], complianceLevel=8, outputFolder=./workspace/apache/calcite/365902520, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



