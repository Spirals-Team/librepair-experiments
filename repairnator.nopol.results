nopolinfo #0
location: FailureLocation{className='org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests', failingMethods=[], erroringMethods=[org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testStoreAccessToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRefreshTokenIsNotStoredDuringAccessToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRemoveRefreshToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#storeAccessTokenWithoutRefreshTokenRemoveAccessTokenVerifyTokenRemoved, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testFindAccessTokensByClientIdAndUserName, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testStoreAccessTokenTwice, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testStoreRefreshToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testFindAccessTokensByClientId, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testReadingAccessTokenForTokenThatDoesNotExist, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRemovedTokenCannotBeFoundByUsername, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testReadingAuthenticationForTokenThatDoesNotExist, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testExpiringAccessToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRetrieveAccessToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testGetAccessTokenForDeletedUser, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testExpiringRefreshToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testReadingRefreshTokenForTokenThatDoesNotExist], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}], nbFailures=0, nbErrors=16}
status: NOPATCH
dateEnd: Sun Apr 29 12:46:14 EDT 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-security-oauth/372722228/spring-security-oauth2/src/main/java], projectClasspath='[Ljava.net.URL;@44a085e5', projectTests=[org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-security-oauth/372722228, json=false}
exception: null
nbStatements: 75
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #1
location: FailureLocation{className='org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests', failingMethods=[], erroringMethods=[org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testExpiringRefreshToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testReadingAuthenticationForTokenThatDoesNotExist, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRefreshTokenIsNotStoredDuringAccessToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testStoreRefreshToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testReadingRefreshTokenForTokenThatDoesNotExist, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testFindAccessTokensByClientIdAndUserName, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testReadingAccessTokenForTokenThatDoesNotExist, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testFindAccessTokensByClientId, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testGetAccessTokenForDeletedUser, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRetrieveAccessToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRemovedTokenCannotBeFoundByUsername, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testStoreAccessTokenTwice, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testStoreAccessToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testExpiringAccessToken, org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRemoveRefreshToken], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)', isError=true}], nbFailures=0, nbErrors=15}
status: NOPATCH
dateEnd: Sun Apr 29 12:46:47 EDT 2018
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-security-oauth/372722228/spring-security-oauth2/src/main/java], projectClasspath='[Ljava.net.URL;@3bbf1c0d', projectTests=[org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests], complianceLevel=8, outputFolder=./workspace/spring-projects/spring-security-oauth/372722228, json=false}
exception: null
nbStatements: 76
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



