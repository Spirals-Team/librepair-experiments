/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor;

import com.microsoft.azure.PagedList;
import org.joda.time.DateTime;
import org.joda.time.Period;
import rx.Observable;

import java.util.List;

/**
 * The Azure metric definition entries are of type MetricDefinition.
 */
public interface MetricDefinition {

    /**
     * Get the resourceId value.
     *
     * @return the resourceId value
     */
    public String resourceId();

    /**
     * Get the name value.
     *
     * @return the name value
     */
    public LocalizableString name();

    /**
     * Get the unit value.
     *
     * @return the unit value
     */
    public Unit unit();

    /**
     * Get the primaryAggregationType value.
     *
     * @return the primaryAggregationType value
     */
    public AggregationType primaryAggregationType();

    /**
     * Get the metricAvailabilities value.
     *
     * @return the metricAvailabilities value
     */
    public List<MetricAvailability> metricAvailabilities();

    /**
     * Get the id value.
     *
     * @return the id value
     */
    public String id();

    FilterDefinitionStages.WithStartTimeFilter  defineQuery();

    /**
     * The entirety of a Metrics query definition.
     */
    interface Definition extends
            FilterDefinitionStages.WithStartTimeFilter,
            FilterDefinitionStages.WithEndFilter,
            FilterDefinitionStages.WithExecute {
    }

    interface FilterDefinitionStages {

        interface WithStartTimeFilter {
            WithEndFilter withStartTime(DateTime startTime);
        }

        interface WithEndFilter {
            WithExecute withEndTime(DateTime endTime);
        }

        interface WithExecute {
            WithExecute withAggregation(String aggregation);

            WithExecute withInterval(Period interval);

            WithExecute withOdataFilter(String odataFilter);

            WithExecute withResultType(ResultType resultType);

            WithExecute selectTop(double top);

            WithExecute orderBy(String orderBy);

            MetricCollection execute();

            Observable<MetricCollection> executeAsync();
        }
    }
}
