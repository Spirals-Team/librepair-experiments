<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="157" passed="157">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="6228" started-at="2018-06-01T10:51:45Z" finished-at="2018-06-01T10:51:51Z">
    <groups>
    </groups>
    <test name="Surefire test" duration-ms="6228" started-at="2018-06-01T10:51:45Z" finished-at="2018-06-01T10:51:51Z">
      <class name="org.molgenis.security.user.UserDetailsCheckerTest">
        <test-method status="PASS" signature="check_disabledUser()[pri:0, instance:org.molgenis.security.user.UserDetailsCheckerTest@2835b3d1]" name="check_disabledUser" duration-ms="9" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <exception class="org.springframework.security.authentication.DisabledException">
            <message>
              <![CDATA[User is disabled Mock for UserDetails, hashCode: 564764701]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.security.authentication.DisabledException: User is disabled Mock for UserDetails, hashCode: 564764701
	at org.molgenis.security.user.MolgenisUserDetailsChecker.check(MolgenisUserDetailsChecker.java:23)
	at org.molgenis.security.user.UserDetailsCheckerTest.check_disabledUser(UserDetailsCheckerTest.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.security.authentication.DisabledException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- check_disabledUser -->
        <test-method status="PASS" signature="check_enabledUser()[pri:0, instance:org.molgenis.security.user.UserDetailsCheckerTest@2835b3d1]" name="check_enabledUser" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- check_enabledUser -->
      </class> <!-- org.molgenis.security.user.UserDetailsCheckerTest -->
      <class name="org.molgenis.security.account.AccountControllerTest">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="115" started-at="2018-06-01T12:51:49Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.activateUser() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="101" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="activateUser()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="activateUser" duration-ms="17" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- activateUser -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.activateUser() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="23" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.activateUserMolgenisUserException() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="activateUserMolgenisUserException()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="activateUserMolgenisUserException" duration-ms="3" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- activateUserMolgenisUserException -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.activateUserMolgenisUserException() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.getLoginForm() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="19" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getLoginForm()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="getLoginForm" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLoginForm -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.getLoginForm() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.getPasswordResetForm() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="25" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getPasswordResetForm()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="getPasswordResetForm" duration-ms="2" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPasswordResetForm -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.getPasswordResetForm() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.getRegisterForm() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="22" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getRegisterForm()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="getRegisterForm" duration-ms="5" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRegisterForm -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="23" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.getRegisterForm() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_activationModeAdmin() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="registerUser_activationModeAdmin()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="registerUser_activationModeAdmin" duration-ms="202" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUser_activationModeAdmin -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_activationModeUser() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_activationModeAdmin() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="21" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="registerUser_activationModeUser()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="registerUser_activationModeUser" duration-ms="23" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUser_activationModeUser -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_activationModeUser() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="22" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_activationModeUserProxy() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="registerUser_activationModeUserProxy()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="registerUser_activationModeUserProxy" duration-ms="23" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUser_activationModeUserProxy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_activationModeUserProxy() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_activationModeUserProxyWithScheme() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="24" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="registerUser_activationModeUserProxyWithScheme()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="registerUser_activationModeUserProxyWithScheme" duration-ms="20" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUser_activationModeUserProxyWithScheme -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_activationModeUserProxyWithScheme() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_invalidCaptcha() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="19" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="registerUser_invalidCaptcha()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="registerUser_invalidCaptcha" duration-ms="18" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUser_invalidCaptcha -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_invalidCaptcha() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="23" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_invalidUserField() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="registerUser_invalidUserField()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="registerUser_invalidUserField" duration-ms="33" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUser_invalidUserField -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_passwordNotEqualsConfirmPassword() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_invalidUserField() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="33" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="registerUser_passwordNotEqualsConfirmPassword()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="registerUser_passwordNotEqualsConfirmPassword" duration-ms="17" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUser_passwordNotEqualsConfirmPassword -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.registerUser_passwordNotEqualsConfirmPassword() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.resetPassword() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="setUp" is-config="true" duration-ms="27" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="resetPassword()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="resetPassword" duration-ms="10" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- resetPassword -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountControllerTest.resetPassword() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.account.AccountControllerTest@3338d29d]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.account.AccountControllerTest -->
      <class name="org.molgenis.security.token.TokenGeneratorTest">
        <test-method status="PASS" signature="generateToken()[pri:0, instance:org.molgenis.security.token.TokenGeneratorTest@4abb4041]" name="generateToken" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateToken -->
      </class> <!-- org.molgenis.security.token.TokenGeneratorTest -->
      <class name="org.molgenis.security.token.DataServiceTokenServiceTest">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.molgenis.security.token.DataServiceTokenServiceTest@6e757f39]" name="beforeMethod" is-config="true" duration-ms="58" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="findUserByToken()[pri:0, instance:org.molgenis.security.token.DataServiceTokenServiceTest@6e757f39]" name="findUserByToken" duration-ms="42" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findUserByToken -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.molgenis.security.token.DataServiceTokenServiceTest@6e757f39]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="findUserByTokenExpired()[pri:0, instance:org.molgenis.security.token.DataServiceTokenServiceTest@6e757f39]" name="findUserByTokenExpired" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <exception class="org.molgenis.security.core.token.UnknownTokenException">
            <message>
              <![CDATA[Invalid token]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.molgenis.security.core.token.UnknownTokenException: Invalid token
	at org.molgenis.security.token.DataServiceTokenService.getMolgenisToken(DataServiceTokenService.java:103)
	at org.molgenis.security.token.DataServiceTokenService.findUserByToken(DataServiceTokenService.java:53)
	at org.molgenis.security.token.DataServiceTokenServiceTest.findUserByTokenExpired(DataServiceTokenServiceTest.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.molgenis.security.core.token.UnknownTokenException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findUserByTokenExpired -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.molgenis.security.token.DataServiceTokenServiceTest@6e757f39]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="generateAndStoreToken()[pri:0, instance:org.molgenis.security.token.DataServiceTokenServiceTest@6e757f39]" name="generateAndStoreToken" duration-ms="4" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateAndStoreToken -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.molgenis.security.token.DataServiceTokenServiceTest@6e757f39]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="removeToken()[pri:0, instance:org.molgenis.security.token.DataServiceTokenServiceTest@6e757f39]" name="removeToken" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- removeToken -->
      </class> <!-- org.molgenis.security.token.DataServiceTokenServiceTest -->
      <class name="org.molgenis.security.token.TokenAuthenticationFilterTest">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.molgenis.security.token.TokenAuthenticationFilterTest@20e9b10b]" name="beforeMethod" is-config="true" duration-ms="14" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="doFilter()[pri:0, instance:org.molgenis.security.token.TokenAuthenticationFilterTest@20e9b10b]" name="doFilter" duration-ms="19" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- doFilter -->
      </class> <!-- org.molgenis.security.token.TokenAuthenticationFilterTest -->
      <class name="org.molgenis.security.twofactor.service.RecoveryServiceImplTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="286" started-at="2018-06-01T12:51:46Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.RecoveryServiceImplTest.testGenerateRecoveryCodes()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="setUpBeforeMethod" is-config="true" duration-ms="73" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testGenerateRecoveryCodes()[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="testGenerateRecoveryCodes" duration-ms="15" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerateRecoveryCodes -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.RecoveryServiceImplTest.testGenerateRecoveryCodes()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.RecoveryServiceImplTest.testGetRecoveryCodes()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testGetRecoveryCodes()[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="testGetRecoveryCodes" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetRecoveryCodes -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.RecoveryServiceImplTest.testGetRecoveryCodes()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.RecoveryServiceImplTest.testUseRecoveryCode()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testUseRecoveryCode()[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="testUseRecoveryCode" duration-ms="22" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUseRecoveryCode -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.RecoveryServiceImplTest@4f8641d1]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.RecoveryServiceImplTest.testUseRecoveryCode()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- org.molgenis.security.twofactor.service.RecoveryServiceImplTest -->
      <class name="org.molgenis.security.permission.UserPermissionEvaluatorImplTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="17" started-at="2018-06-01T12:51:46Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnEntityTypeFalse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="24" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="hasPermissionOnEntityTypeFalse()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionOnEntityTypeFalse" duration-ms="2" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionOnEntityTypeFalse -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnEntityTypeFalse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnEntityTypeSuperuser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="hasPermissionOnEntityTypeSuperuser()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionOnEntityTypeSuperuser" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionOnEntityTypeSuperuser -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnEntityTypeSystemUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnEntityTypeSuperuser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnEntityTypeSystemUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="hasPermissionOnEntityTypeSystemUser()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionOnEntityTypeSystemUser" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionOnEntityTypeSystemUser -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnEntityTypeTrue()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="hasPermissionOnEntityTypeTrue()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionOnEntityTypeTrue" duration-ms="28" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionOnEntityTypeTrue -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnEntityTypeTrue()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnPluginFalse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="hasPermissionOnPluginFalse()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionOnPluginFalse" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionOnPluginFalse -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnPluginFalse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnPluginSuperuser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="hasPermissionOnPluginSuperuser()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionOnPluginSuperuser" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionOnPluginSuperuser -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnPluginSuperuser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnPluginSystemUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="hasPermissionOnPluginSystemUser()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionOnPluginSystemUser" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionOnPluginSystemUser -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnPluginSystemUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnPluginTrue()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="hasPermissionOnPluginTrue()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionOnPluginTrue" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionOnPluginTrue -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionOnPluginTrue()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnEntityTypeFalse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="hasPermissionSetOnEntityTypeFalse()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionSetOnEntityTypeFalse" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionSetOnEntityTypeFalse -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnEntityTypeFalse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnEntityTypeSuperuser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="hasPermissionSetOnEntityTypeSuperuser()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionSetOnEntityTypeSuperuser" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionSetOnEntityTypeSuperuser -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnEntityTypeSuperuser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnEntityTypeSystemUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="hasPermissionSetOnEntityTypeSystemUser()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionSetOnEntityTypeSystemUser" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionSetOnEntityTypeSystemUser -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnEntityTypeSystemUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnEntityTypeTrue()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="hasPermissionSetOnEntityTypeTrue()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionSetOnEntityTypeTrue" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionSetOnEntityTypeTrue -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnEntityTypeTrue()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnPluginFalse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="hasPermissionSetOnPluginFalse()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionSetOnPluginFalse" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionSetOnPluginFalse -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnPluginFalse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnPluginSuperuser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnPluginSuperuser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="hasPermissionSetOnPluginSuperuser()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionSetOnPluginSuperuser" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionSetOnPluginSuperuser -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnPluginSystemUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnPluginTrue()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="hasPermissionSetOnPluginSystemUser()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionSetOnPluginSystemUser" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionSetOnPluginSystemUser -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnPluginSystemUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="hasPermissionSetOnPluginTrue()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="hasPermissionSetOnPluginTrue" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasPermissionSetOnPluginTrue -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.UserPermissionEvaluatorImplTest.hasPermissionSetOnPluginTrue()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.permission.UserPermissionEvaluatorImplTest@48dc9950]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.permission.UserPermissionEvaluatorImplTest -->
      <class name="org.molgenis.security.token.RunAsUserTokenFactoryTest">
        <test-method status="PASS" signature="setupBeforeMethod()[pri:0, instance:org.molgenis.security.token.RunAsUserTokenFactoryTest@6fc1a1d5]" name="setupBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupBeforeMethod -->
        <test-method status="PASS" signature="testTokenForDisabledUser()[pri:0, instance:org.molgenis.security.token.RunAsUserTokenFactoryTest@6fc1a1d5]" name="testTokenForDisabledUser" duration-ms="9" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <exception class="org.springframework.security.authentication.DisabledException">
            <message>
              <![CDATA[User is disabled.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.security.authentication.DisabledException: User is disabled.
	at org.molgenis.security.token.RunAsUserTokenFactory.create(RunAsUserTokenFactory.java:24)
	at org.molgenis.security.token.RunAsUserTokenFactoryTest.testTokenForDisabledUser(RunAsUserTokenFactoryTest.java:36)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.security.authentication.DisabledException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTokenForDisabledUser -->
        <test-method status="PASS" signature="setupBeforeMethod()[pri:0, instance:org.molgenis.security.token.RunAsUserTokenFactoryTest@6fc1a1d5]" name="setupBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupBeforeMethod -->
        <test-method status="PASS" signature="testTokenForEnabledUser()[pri:0, instance:org.molgenis.security.token.RunAsUserTokenFactoryTest@6fc1a1d5]" name="testTokenForEnabledUser" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTokenForEnabledUser -->
      </class> <!-- org.molgenis.security.token.RunAsUserTokenFactoryTest -->
      <class name="org.molgenis.security.MolgenisChangePasswordFilterTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="25" started-at="2018-06-01T12:51:51Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.MolgenisChangePasswordFilterTest.testDoFilterChangePassword() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.MolgenisChangePasswordFilterTest.testDoFilterChangePassword() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testDoFilterChangePassword()[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="testDoFilterChangePassword" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoFilterChangePassword -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.MolgenisChangePasswordFilterTest.testDoFilterChangePasswordHackyUri() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testDoFilterChangePasswordHackyUri()[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="testDoFilterChangePasswordHackyUri" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoFilterChangePasswordHackyUri -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.MolgenisChangePasswordFilterTest.testDoFilterChangePasswordHackyUri() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testDoFilterIgnoreOwnUri()[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="testDoFilterIgnoreOwnUri" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoFilterIgnoreOwnUri -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.MolgenisChangePasswordFilterTest.testDoFilterIgnoreOwnUri() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.MolgenisChangePasswordFilterTest.testDoFilterIgnoreOwnUri() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.MolgenisChangePasswordFilterTest.testDoFilterNoChangePassword() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testDoFilterNoChangePassword()[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="testDoFilterNoChangePassword" duration-ms="1" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoFilterNoChangePassword -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.MolgenisChangePasswordFilterTest.testDoFilterNoChangePassword() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.MolgenisChangePasswordFilterTest@3b8a8abc]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.MolgenisChangePasswordFilterTest -->
      <class name="org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="87" started-at="2018-06-01T12:51:46Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest.testGetSecurityContextsNoUserThreadNoUserSessions()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="testGetSecurityContextsNoUserThreadNoUserSessions()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="testGetSecurityContextsNoUserThreadNoUserSessions" duration-ms="37" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSecurityContextsNoUserThreadNoUserSessions -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="tearDownAfterMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest.testGetSecurityContextsNoUserThreadNoUserSessions()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest.testGetSecurityContextsUserThreadNoUserSessions()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testGetSecurityContextsUserThreadNoUserSessions()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="testGetSecurityContextsUserThreadNoUserSessions" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSecurityContextsUserThreadNoUserSessions -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="tearDownAfterMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest.testGetSecurityContextsUserThreadNoUserSessions()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest.testGetSecurityContextsUserThreadSessions()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="testGetSecurityContextsUserThreadSessions()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="testGetSecurityContextsUserThreadSessions" duration-ms="19" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSecurityContextsUserThreadSessions -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest.testGetSecurityContextsUserThreadSessions()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest@4cddc3d9]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.permission.PrincipalSecurityContextRegistryImplTest -->
      <class name="org.molgenis.security.acl.SidUtilsTest">
        <test-method status="PASS" signature="testCreateGroupAuthority()[pri:0, instance:org.molgenis.security.acl.SidUtilsTest@21399e53]" name="testCreateGroupAuthority" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateGroupAuthority -->
        <test-method status="PASS" signature="testCreateSidGroup()[pri:0, instance:org.molgenis.security.acl.SidUtilsTest@21399e53]" name="testCreateSidGroup" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateSidGroup -->
        <test-method status="PASS" signature="testCreateSidUser()[pri:0, instance:org.molgenis.security.acl.SidUtilsTest@21399e53]" name="testCreateSidUser" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateSidUser -->
        <test-method status="PASS" signature="testCreateSidUsernameAnonymous()[pri:0, instance:org.molgenis.security.acl.SidUtilsTest@21399e53]" name="testCreateSidUsernameAnonymous" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateSidUsernameAnonymous -->
      </class> <!-- org.molgenis.security.acl.SidUtilsTest -->
      <class name="org.molgenis.security.permission.PermissionSystemServiceImplTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="2" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="576" started-at="2018-06-01T12:51:45Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="11" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.PermissionSystemServiceImplTest.giveUserEntityPermissions()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="initMocks" is-config="true" duration-ms="46" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="giveUserEntityPermissions()[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="giveUserEntityPermissions" duration-ms="229" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- giveUserEntityPermissions -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="tearDownAfterMethod" is-config="true" duration-ms="5" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.PermissionSystemServiceImplTest.giveUserEntityPermissions()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.PermissionSystemServiceImplTest.testPermissionSystemService()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testPermissionSystemService()[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="testPermissionSystemService" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at java.util.Objects.requireNonNull(Objects.java:203)
	at org.molgenis.security.permission.PermissionSystemServiceImpl.<init>(PermissionSystemServiceImpl.java:31)
	at org.molgenis.security.permission.PermissionSystemServiceImplTest.testPermissionSystemService(PermissionSystemServiceImplTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPermissionSystemService -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.permission.PermissionSystemServiceImplTest@25c98637]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.permission.PermissionSystemServiceImplTest.testPermissionSystemService()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- org.molgenis.security.permission.PermissionSystemServiceImplTest -->
      <class name="org.molgenis.security.user.UserDetailsServiceTest">
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="initMocks" is-config="true" duration-ms="8" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="setUp" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testLoadUserByUsernameAnonymous()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="testLoadUserByUsernameAnonymous" duration-ms="79" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadUserByUsernameAnonymous -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="setUp" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="testLoadUserByUsernameNonSuperuser()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="testLoadUserByUsernameNonSuperuser" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadUserByUsernameNonSuperuser -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="setUp" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="testLoadUserByUsernameSuperuser()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="testLoadUserByUsernameSuperuser" duration-ms="2" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadUserByUsernameSuperuser -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="testLoadUserByUsernameUnknownUser()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="testLoadUserByUsernameUnknownUser" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <exception class="org.springframework.security.core.userdetails.UsernameNotFoundException">
            <message>
              <![CDATA[unknown user 'unknownUser']]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.security.core.userdetails.UsernameNotFoundException: unknown user 'unknownUser'
	at org.molgenis.security.user.UserDetailsService.loadUserByUsername(UserDetailsService.java:42)
	at org.molgenis.security.user.UserDetailsServiceTest.testLoadUserByUsernameUnknownUser(UserDetailsServiceTest.java:172)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.security.core.userdetails.UsernameNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadUserByUsernameUnknownUser -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="setUp" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="setUp" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="testUserDetailsService()[pri:0, instance:org.molgenis.security.user.UserDetailsServiceTest@2bd158ea]" name="testUserDetailsService" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at java.util.Objects.requireNonNull(Objects.java:203)
	at org.molgenis.security.user.UserDetailsService.<init>(UserDetailsService.java:31)
	at org.molgenis.security.user.UserDetailsServiceTest.testUserDetailsService(UserDetailsServiceTest.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserDetailsService -->
      </class> <!-- org.molgenis.security.user.UserDetailsServiceTest -->
      <class name="org.molgenis.security.captcha.CaptchaControllerTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="43" started-at="2018-06-01T12:51:50Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaControllerTest.getCaptcha() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="setUp" is-config="true" duration-ms="31" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getCaptcha()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="getCaptcha" duration-ms="20" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCaptcha -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaControllerTest.getCaptcha() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="setUp" is-config="true" duration-ms="16" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaControllerTest.validateCaptchaFromForm_invalid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateCaptchaFromForm_invalid()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="validateCaptchaFromForm_invalid" duration-ms="5" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateCaptchaFromForm_invalid -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaControllerTest.validateCaptchaFromForm_invalid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaControllerTest.validateCaptchaFromForm_valid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="setUp" is-config="true" duration-ms="21" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateCaptchaFromForm_valid()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="validateCaptchaFromForm_valid" duration-ms="7" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateCaptchaFromForm_valid -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaControllerTest.validateCaptcha_invalid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaControllerTest.validateCaptchaFromForm_valid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="setUp" is-config="true" duration-ms="21" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateCaptcha_invalid()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="validateCaptcha_invalid" duration-ms="12" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateCaptcha_invalid -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaControllerTest.validateCaptcha_invalid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="setUp" is-config="true" duration-ms="16" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaControllerTest.validateCaptcha_valid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateCaptcha_valid()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="validateCaptcha_valid" duration-ms="4" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateCaptcha_valid -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaControllerTest@4e312811]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaControllerTest.validateCaptcha_valid() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- org.molgenis.security.captcha.CaptchaControllerTest -->
      <class name="org.molgenis.security.captcha.CaptchaServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="28" started-at="2018-06-01T12:51:51Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaServiceTest.createCaptcha()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="createCaptcha()[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="createCaptcha" duration-ms="137" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCaptcha -->
        <test-method status="PASS" signature="validateCaptcha()[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="validateCaptcha" duration-ms="2" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateCaptcha -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaServiceTest.createCaptcha()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaServiceTest.validateCaptcha() throws org.molgenis.security.captcha.CaptchaException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaServiceTest.validateCaptcha() throws org.molgenis.security.captcha.CaptchaException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaServiceTest.validateCaptcha_noCaptcha() throws org.molgenis.security.captcha.CaptchaException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateCaptcha_noCaptcha()[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="validateCaptcha_noCaptcha" duration-ms="1" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <exception class="org.molgenis.security.captcha.CaptchaException">
            <message>
              <![CDATA[no captcha to validate]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.molgenis.security.captcha.CaptchaException: no captcha to validate
	at org.molgenis.security.captcha.CaptchaService.validateCaptcha(CaptchaService.java:50)
	at org.molgenis.security.captcha.CaptchaServiceTest.validateCaptcha_noCaptcha(CaptchaServiceTest.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.molgenis.security.captcha.CaptchaException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateCaptcha_noCaptcha -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.captcha.CaptchaServiceTest.validateCaptcha_noCaptcha() throws org.molgenis.security.captcha.CaptchaException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.captcha.CaptchaServiceTest@1e7797db]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.captcha.CaptchaServiceTest -->
      <class name="org.molgenis.security.AjaxAwareInvalidSessionStrategyTest">
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.AjaxAwareInvalidSessionStrategyTest@1181526e]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testOnInvalidSessionDetected()[pri:0, instance:org.molgenis.security.AjaxAwareInvalidSessionStrategyTest@1181526e]" name="testOnInvalidSessionDetected" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOnInvalidSessionDetected -->
        <test-method status="PASS" signature="testOnInvalidSessionDetectedXmlHttpRequest()[pri:0, instance:org.molgenis.security.AjaxAwareInvalidSessionStrategyTest@1181526e]" name="testOnInvalidSessionDetectedXmlHttpRequest" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOnInvalidSessionDetectedXmlHttpRequest -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.AjaxAwareInvalidSessionStrategyTest@1181526e]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
      </class> <!-- org.molgenis.security.AjaxAwareInvalidSessionStrategyTest -->
      <class name="org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="95" started-at="2018-06-01T12:51:47Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.generateSecretKeyTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="generateSecretKeyTest()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="generateSecretKeyTest" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateSecretKeyTest -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.generateSecretKeyTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.generateWrongSecretKeyTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.generateWrongSecretKeyTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="generateWrongSecretKeyTest()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="generateWrongSecretKeyTest" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateWrongSecretKeyTest -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.isConfiguredForUserTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="isConfiguredForUserTest()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="isConfiguredForUserTest" duration-ms="2" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isConfiguredForUserTest -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.isConfiguredForUserTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.setSecretKeyTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setSecretKeyTest()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="setSecretKeyTest" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setSecretKeyTest -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.setSecretKeyTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.testDisableForUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testDisableForUser()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="testDisableForUser" duration-ms="2" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDisableForUser -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.testUserIsBlocked()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.testDisableForUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testUserIsBlocked()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="testUserIsBlocked" duration-ms="5" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <exception class="org.molgenis.security.twofactor.exceptions.TooManyLoginAttemptsException">
            <message>
              <![CDATA[You entered the wrong verification code 3 times, please wait for 30 seconds before you try again]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.molgenis.security.twofactor.exceptions.TooManyLoginAttemptsException: You entered the wrong verification code 3 times, please wait for 30 seconds before you try again
	at org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImpl.userIsBlocked(TwoFactorAuthenticationServiceImpl.java:97)
	at org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.testUserIsBlocked(TwoFactorAuthenticationServiceImplTest.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.molgenis.security.twofactor.exceptions.TooManyLoginAttemptsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserIsBlocked -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest.testUserIsBlocked()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest@4fe3199d]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.twofactor.service.TwoFactorAuthenticationServiceImplTest -->
      <class name="org.molgenis.security.token.TokenAuthenticationProviderTest">
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.molgenis.security.token.TokenAuthenticationProviderTest@5978ba12]" name="beforeMethod" is-config="true" duration-ms="24" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="authenticate()[pri:0, instance:org.molgenis.security.token.TokenAuthenticationProviderTest@5978ba12]" name="authenticate" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- authenticate -->
        <test-method status="PASS" signature="authenticateInvalidToken()[pri:0, instance:org.molgenis.security.token.TokenAuthenticationProviderTest@5978ba12]" name="authenticateInvalidToken" duration-ms="2" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <exception class="org.molgenis.security.core.token.UnknownTokenException">
            <message>
              <![CDATA[Invalid token]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.molgenis.security.core.token.UnknownTokenException: Invalid token
	at org.molgenis.security.token.TokenAuthenticationProvider.authenticate(TokenAuthenticationProvider.java:37)
	at org.molgenis.security.token.TokenAuthenticationProviderTest.authenticateInvalidToken(TokenAuthenticationProviderTest.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.molgenis.security.core.token.UnknownTokenException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- authenticateInvalidToken -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.molgenis.security.token.TokenAuthenticationProviderTest@5978ba12]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- org.molgenis.security.token.TokenAuthenticationProviderTest -->
      <class name="org.molgenis.security.acl.AclCacheTransactionListenerTest">
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.acl.AclCacheTransactionListenerTest@3c5cb013]" name="initMocks" is-config="true" duration-ms="13" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.acl.AclCacheTransactionListenerTest@3c5cb013]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testAclCacheTransactionListener()[pri:0, instance:org.molgenis.security.acl.AclCacheTransactionListenerTest@3c5cb013]" name="testAclCacheTransactionListener" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at java.util.Objects.requireNonNull(Objects.java:203)
	at org.molgenis.security.acl.AclCacheTransactionListener.<init>(AclCacheTransactionListener.java:15)
	at org.molgenis.security.acl.AclCacheTransactionListenerTest.testAclCacheTransactionListener(AclCacheTransactionListenerTest.java:28)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAclCacheTransactionListener -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.acl.AclCacheTransactionListenerTest@3c5cb013]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.acl.AclCacheTransactionListenerTest@3c5cb013]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.acl.AclCacheTransactionListenerTest@3c5cb013]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testRollbackTransaction()[pri:0, instance:org.molgenis.security.acl.AclCacheTransactionListenerTest@3c5cb013]" name="testRollbackTransaction" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRollbackTransaction -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.acl.AclCacheTransactionListenerTest@3c5cb013]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
      </class> <!-- org.molgenis.security.acl.AclCacheTransactionListenerTest -->
      <class name="org.molgenis.security.acl.MutableAclClassServiceImplTest">
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="initMocks" is-config="true" duration-ms="204" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="setUpBeforeMethod" is-config="true" duration-ms="65" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testCreateAclClass()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="testCreateAclClass" duration-ms="2" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateAclClass -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="tearDownAfterMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testDeleteAclClass()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="testDeleteAclClass" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteAclClass -->
        <test-method status="PASS" signature="testGetAclClassTypes()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="testGetAclClassTypes" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAclClassTypes -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testHasAclClassFalseCached()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="testHasAclClassFalseCached" duration-ms="6" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasAclClassFalseCached -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="testHasAclClassTrueWithAclClassCacheInvalidation()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="testHasAclClassTrueWithAclClassCacheInvalidation" duration-ms="6" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasAclClassTrueWithAclClassCacheInvalidation -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.acl.MutableAclClassServiceImplTest@1d722bff]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
      </class> <!-- org.molgenis.security.acl.MutableAclClassServiceImplTest -->
      <class name="org.molgenis.security.acl.BitMaskPermissionGrantingStrategyTest">
        <test-method status="PASS" signature="testPermissionsDontMatch(org.springframework.security.acls.model.Permission, org.springframework.security.acls.model.Permission)[pri:0, instance:org.molgenis.security.acl.BitMaskPermissionGrantingStrategyTest@488c6c98]" name="testPermissionsDontMatch" duration-ms="2" started-at="2018-06-01T12:51:49Z" data-provider="permissionsDontMatchProvider" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[PermissionSet[..............................R.=2]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[PermissionSet[.............................W..=4]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPermissionsDontMatch -->
        <test-method status="PASS" signature="testPermissionsDontMatch(org.springframework.security.acls.model.Permission, org.springframework.security.acls.model.Permission)[pri:0, instance:org.molgenis.security.acl.BitMaskPermissionGrantingStrategyTest@488c6c98]" name="testPermissionsDontMatch" duration-ms="0" started-at="2018-06-01T12:51:49Z" data-provider="permissionsDontMatchProvider" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[PermissionSet[...............................C=1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[CumulativePermission[............................MWR.=14]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPermissionsDontMatch -->
        <test-method status="PASS" signature="testPermissionsDontMatch(org.springframework.security.acls.model.Permission, org.springframework.security.acls.model.Permission)[pri:0, instance:org.molgenis.security.acl.BitMaskPermissionGrantingStrategyTest@488c6c98]" name="testPermissionsDontMatch" duration-ms="0" started-at="2018-06-01T12:51:49Z" data-provider="permissionsDontMatchProvider" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[PermissionSet[.............................W..=4]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[CumulativePermission[............................M.R.=10]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPermissionsDontMatch -->
        <test-method status="PASS" signature="testPermissionsMatch(org.springframework.security.acls.model.Permission, org.springframework.security.acls.model.Permission)[pri:0, instance:org.molgenis.security.acl.BitMaskPermissionGrantingStrategyTest@488c6c98]" name="testPermissionsMatch" duration-ms="0" started-at="2018-06-01T12:51:49Z" data-provider="permissionsMatchProvider" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[PermissionSet[..............................R.=2]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[PermissionSet[..............................R.=2]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPermissionsMatch -->
        <test-method status="PASS" signature="testPermissionsMatch(org.springframework.security.acls.model.Permission, org.springframework.security.acls.model.Permission)[pri:0, instance:org.molgenis.security.acl.BitMaskPermissionGrantingStrategyTest@488c6c98]" name="testPermissionsMatch" duration-ms="0" started-at="2018-06-01T12:51:49Z" data-provider="permissionsMatchProvider" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[PermissionSet[..............................R.=2]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[CumulativePermission[.............................WR.=6]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPermissionsMatch -->
      </class> <!-- org.molgenis.security.acl.BitMaskPermissionGrantingStrategyTest -->
      <class name="org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest@2a6871ad]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="29" started-at="2018-06-01T12:51:47Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest@2a6871ad]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest@2a6871ad]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest.testAuthenticateInvalidToken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testAuthenticateInvalidToken()[pri:0, instance:org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest@2a6871ad]" name="testAuthenticateInvalidToken" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Only RecoveryAuthenticationToken is supported]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Only RecoveryAuthenticationToken is supported
	at org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderImpl.authenticate(RecoveryAuthenticationProviderImpl.java:30)
	at org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest.testAuthenticateInvalidToken(RecoveryAuthenticationProviderTest.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAuthenticateInvalidToken -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest@2a6871ad]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest.testAuthenticateInvalidToken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest@2a6871ad]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest.testAuthentication()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testAuthentication()[pri:0, instance:org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest@2a6871ad]" name="testAuthentication" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAuthentication -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest@2a6871ad]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest.testAuthentication()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest@2a6871ad]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.twofactor.auth.RecoveryAuthenticationProviderTest -->
      <class name="org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest">
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="setUpBeforeMethod" is-config="true" duration-ms="30" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testUpdateAuthenticationAnonymousAuthenticationToken()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="testUpdateAuthenticationAnonymousAuthenticationToken" duration-ms="30" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateAuthenticationAnonymousAuthenticationToken -->
        <test-method status="PASS" signature="testUpdateAuthenticationRecoveryAuthenticationToken()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="testUpdateAuthenticationRecoveryAuthenticationToken" duration-ms="1" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateAuthenticationRecoveryAuthenticationToken -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testUpdateAuthenticationRestAuthenticationToken()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="testUpdateAuthenticationRestAuthenticationToken" duration-ms="0" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateAuthenticationRestAuthenticationToken -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testUpdateAuthenticationRunAsUserToken()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="testUpdateAuthenticationRunAsUserToken" duration-ms="1" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateAuthenticationRunAsUserToken -->
        <test-method status="PASS" signature="testUpdateAuthenticationSystemSecurityToken()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="testUpdateAuthenticationSystemSecurityToken" duration-ms="32" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateAuthenticationSystemSecurityToken -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testUpdateAuthenticationTwoFactorAuthenticationToken()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="testUpdateAuthenticationTwoFactorAuthenticationToken" duration-ms="0" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateAuthenticationTwoFactorAuthenticationToken -->
        <test-method status="PASS" signature="testUpdateAuthenticationUnknownToken()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="testUpdateAuthenticationUnknownToken" duration-ms="21" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <exception class="org.springframework.security.web.authentication.session.SessionAuthenticationException">
            <message>
              <![CDATA[Unknown authentication type 'Authentication$MockitoMock$686011172']]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.security.web.authentication.session.SessionAuthenticationException: Unknown authentication type 'Authentication$MockitoMock$686011172'
	at org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImpl.updateAuthentication(AuthenticationAuthoritiesUpdaterImpl.java:68)
	at org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest.testUpdateAuthenticationUnknownToken(AuthenticationAuthoritiesUpdaterImplTest.java:139)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.security.web.authentication.session.SessionAuthenticationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateAuthenticationUnknownToken -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testUpdateAuthenticationUsernamePasswordAuthenticationToken()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="testUpdateAuthenticationUsernamePasswordAuthenticationToken" duration-ms="0" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateAuthenticationUsernamePasswordAuthenticationToken -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest@6b7e4db6]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:45Z" finished-at="2018-06-01T12:51:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
      </class> <!-- org.molgenis.security.permission.AuthenticationAuthoritiesUpdaterImplTest -->
      <class name="org.molgenis.security.login.MolgenisLoginControllerTest">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="70" started-at="2018-06-01T12:51:47Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="setUp" is-config="true" duration-ms="1219" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.login.MolgenisLoginControllerTest.getLoginErrorPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getLoginErrorPage()[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="getLoginErrorPage" duration-ms="89" started-at="2018-06-01T12:51:48Z" finished-at="2018-06-01T12:51:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLoginErrorPage -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:48Z" finished-at="2018-06-01T12:51:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.login.MolgenisLoginControllerTest.getLoginErrorPageSessionExpired() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:48Z" finished-at="2018-06-01T12:51:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.login.MolgenisLoginControllerTest.getLoginErrorPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="setUp" is-config="true" duration-ms="24" started-at="2018-06-01T12:51:48Z" finished-at="2018-06-01T12:51:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getLoginErrorPageSessionExpired()[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="getLoginErrorPageSessionExpired" duration-ms="2" started-at="2018-06-01T12:51:48Z" finished-at="2018-06-01T12:51:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLoginErrorPageSessionExpired -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:48Z" finished-at="2018-06-01T12:51:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.login.MolgenisLoginControllerTest.getLoginErrorPageSessionExpired() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:48Z" finished-at="2018-06-01T12:51:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.login.MolgenisLoginControllerTest.getLoginPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="setUp" is-config="true" duration-ms="24" started-at="2018-06-01T12:51:48Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getLoginPage()[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="getLoginPage" duration-ms="2" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLoginPage -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.login.MolgenisLoginControllerTest.getLoginPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.login.MolgenisLoginControllerTest@79e28671]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.login.MolgenisLoginControllerTest -->
      <class name="org.molgenis.security.google.GoogleAuthenticationProcessingFilterTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.google.GoogleAuthenticationProcessingFilterTest@377cc0f8]" name="setUp" is-config="true" duration-ms="36" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.google.GoogleAuthenticationProcessingFilterTest@377cc0f8]" name="setUp" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="GoogleAuthenticationProcessingFilter()[pri:0, instance:org.molgenis.security.google.GoogleAuthenticationProcessingFilterTest@377cc0f8]" name="GoogleAuthenticationProcessingFilter" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at java.util.Objects.requireNonNull(Objects.java:203)
	at org.molgenis.security.google.GoogleAuthenticationProcessingFilter.<init>(GoogleAuthenticationProcessingFilter.java:67)
	at org.molgenis.security.google.GoogleAuthenticationProcessingFilterTest.GoogleAuthenticationProcessingFilter(GoogleAuthenticationProcessingFilterTest.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GoogleAuthenticationProcessingFilter -->
        <test-method status="PASS" signature="attemptAuthenticationGoogleSignInDisabled()[pri:0, instance:org.molgenis.security.google.GoogleAuthenticationProcessingFilterTest@377cc0f8]" name="attemptAuthenticationGoogleSignInDisabled" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <exception class="org.springframework.security.authentication.AuthenticationServiceException">
            <message>
              <![CDATA[Google authentication not available]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.security.authentication.AuthenticationServiceException: Google authentication not available
	at org.molgenis.security.google.GoogleAuthenticationProcessingFilter.attemptAuthentication(GoogleAuthenticationProcessingFilter.java:84)
	at org.molgenis.security.google.GoogleAuthenticationProcessingFilterTest.attemptAuthenticationGoogleSignInDisabled(GoogleAuthenticationProcessingFilterTest.java:56)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.security.authentication.AuthenticationServiceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- attemptAuthenticationGoogleSignInDisabled -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.google.GoogleAuthenticationProcessingFilterTest@377cc0f8]" name="setUp" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="attemptAuthenticationMissingToken()[pri:0, instance:org.molgenis.security.google.GoogleAuthenticationProcessingFilterTest@377cc0f8]" name="attemptAuthenticationMissingToken" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <exception class="org.molgenis.security.core.token.UnknownTokenException">
            <full-stacktrace>
              <![CDATA[org.molgenis.security.core.token.UnknownTokenException
	at org.molgenis.security.google.GoogleAuthenticationProcessingFilter.attemptAuthentication(GoogleAuthenticationProcessingFilter.java:112)
	at org.molgenis.security.google.GoogleAuthenticationProcessingFilterTest.attemptAuthenticationMissingToken(GoogleAuthenticationProcessingFilterTest.java:64)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.molgenis.security.core.token.UnknownTokenException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- attemptAuthenticationMissingToken -->
      </class> <!-- org.molgenis.security.google.GoogleAuthenticationProcessingFilterTest -->
      <class name="org.molgenis.security.user.UserAccountServiceImplTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="45" started-at="2018-06-01T12:51:49Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUpBeforeClass()[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="setUpBeforeClass" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.user.UserAccountServiceImplTest.getCurrentUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.user.UserAccountServiceImplTest.getCurrentUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getCurrentUser()[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="getCurrentUser" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCurrentUser -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.user.UserAccountServiceImplTest.updateCurrentUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="updateCurrentUser()[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="updateCurrentUser" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateCurrentUser -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.user.UserAccountServiceImplTest.updateCurrentUser_changePassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.user.UserAccountServiceImplTest.updateCurrentUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="updateCurrentUser_changePassword()[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="updateCurrentUser_changePassword" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateCurrentUser_changePassword -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.user.UserAccountServiceImplTest.updateCurrentUser_changePassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="updateCurrentUser_wrongUser()[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="updateCurrentUser_wrongUser" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[Updated user differs from the current user]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: Updated user differs from the current user
	at org.molgenis.security.user.UserAccountServiceImpl.updateCurrentUser(UserAccountServiceImpl.java:44)
	at org.molgenis.security.user.UserAccountServiceImplTest.updateCurrentUser_wrongUser(UserAccountServiceImplTest.java:92)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateCurrentUser_wrongUser -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.user.UserAccountServiceImplTest.updateCurrentUser_wrongUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.user.UserAccountServiceImplTest.validateCurrentUserPassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.user.UserAccountServiceImplTest.updateCurrentUser_wrongUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.user.UserAccountServiceImplTest.validateCurrentUserPassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDownAfterClass()[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="tearDownAfterClass" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterClass -->
        <test-method status="PASS" signature="validateCurrentUserPassword()[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="validateCurrentUserPassword" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateCurrentUserPassword -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.user.UserAccountServiceImplTest@192aeae2]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.user.UserAccountServiceImplTest -->
      <class name="org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="58" started-at="2018-06-01T12:51:47Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="activationExceptionTest()[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="activationExceptionTest" duration-ms="3" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- activationExceptionTest -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest.activationExceptionTest() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest.authenticateExceptionTest() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest.activationExceptionTest() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="authenticateExceptionTest()[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="authenticateExceptionTest" duration-ms="34" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- authenticateExceptionTest -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest.authenticateExceptionTest() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="configuredExceptionTest()[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="configuredExceptionTest" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configuredExceptionTest -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest.configuredExceptionTest() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest.testRecoverAccount()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testRecoverAccount()[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="testRecoverAccount" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRecoverAccount -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest.configuredExceptionTest() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest.testRecoverAccount()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest.validateVerificationCodeAndAuthenticateExceptionTest() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest.validateVerificationCodeAndAuthenticateExceptionTest() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateVerificationCodeAndAuthenticateExceptionTest()[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="validateVerificationCodeAndAuthenticateExceptionTest" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateVerificationCodeAndAuthenticateExceptionTest -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest@4fae4c3b]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.twofactor.TwoFactorAuthenticationControllerTest -->
      <class name="org.molgenis.security.freemarker.HasPermissionDirectiveTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.freemarker.HasPermissionDirectiveTest@247415be]" name="setUp" is-config="true" duration-ms="216" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="executeWithPermission()[pri:0, instance:org.molgenis.security.freemarker.HasPermissionDirectiveTest@247415be]" name="executeWithPermission" duration-ms="39" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeWithPermission -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.freemarker.HasPermissionDirectiveTest@247415be]" name="setUp" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="executeWithoutPermission()[pri:0, instance:org.molgenis.security.freemarker.HasPermissionDirectiveTest@247415be]" name="executeWithoutPermission" duration-ms="0" started-at="2018-06-01T12:51:51Z" finished-at="2018-06-01T12:51:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeWithoutPermission -->
      </class> <!-- org.molgenis.security.freemarker.HasPermissionDirectiveTest -->
      <class name="org.molgenis.security.AjaxAwareLoginUrlAuthenticationEntryPointTest">
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.AjaxAwareLoginUrlAuthenticationEntryPointTest@5cfa9e8a]" name="setUpBeforeMethod" is-config="true" duration-ms="5" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testCommenceOther()[pri:0, instance:org.molgenis.security.AjaxAwareLoginUrlAuthenticationEntryPointTest@5cfa9e8a]" name="testCommenceOther" duration-ms="37" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCommenceOther -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.AjaxAwareLoginUrlAuthenticationEntryPointTest@5cfa9e8a]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testCommencePreflight()[pri:0, instance:org.molgenis.security.AjaxAwareLoginUrlAuthenticationEntryPointTest@5cfa9e8a]" name="testCommencePreflight" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCommencePreflight -->
        <test-method status="PASS" signature="testCommenceRest()[pri:0, instance:org.molgenis.security.AjaxAwareLoginUrlAuthenticationEntryPointTest@5cfa9e8a]" name="testCommenceRest" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCommenceRest -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.AjaxAwareLoginUrlAuthenticationEntryPointTest@5cfa9e8a]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
      </class> <!-- org.molgenis.security.AjaxAwareLoginUrlAuthenticationEntryPointTest -->
      <class name="org.molgenis.security.MolgenisRoleHierarchyTest">
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.MolgenisRoleHierarchyTest@4960b819]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.MolgenisRoleHierarchyTest@4960b819]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testGetReachableGrantedAuthoritiesSu()[pri:0, instance:org.molgenis.security.MolgenisRoleHierarchyTest@4960b819]" name="testGetReachableGrantedAuthoritiesSu" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetReachableGrantedAuthoritiesSu -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.MolgenisRoleHierarchyTest@4960b819]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
      </class> <!-- org.molgenis.security.MolgenisRoleHierarchyTest -->
      <class name="org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="78" started-at="2018-06-01T12:51:47Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="testAuthenticateInvalidToken()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="testAuthenticateInvalidToken" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Only TwoFactorAuthenticationToken is supported]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Only TwoFactorAuthenticationToken is supported
	at org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderImpl.authenticate(TwoFactorAuthenticationProviderImpl.java:39)
	at org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest.testAuthenticateInvalidToken(TwoFactorAuthenticationProviderTest.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAuthenticateInvalidToken -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest.testAuthenticateInvalidToken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest.testAuthenticateInvalidToken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest.testAuthentication2fIsNotConfigured()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testAuthentication2fIsNotConfigured()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="testAuthentication2fIsNotConfigured" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAuthentication2fIsNotConfigured -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest.testAuthentication2fIsNotConfigured()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest.testAuthentication2faIsConfigured()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testAuthentication2faIsConfigured()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="testAuthentication2faIsConfigured" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAuthentication2faIsConfigured -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest.testAuthentication2faIsConfigured()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest@35d145fb]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.twofactor.auth.TwoFactorAuthenticationProviderTest -->
      <class name="org.molgenis.security.twofactor.service.OtpServiceImplTest">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.twofactor.service.OtpServiceImplTest@2c485b3a]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="28" started-at="2018-06-01T12:51:47Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.twofactor.service.OtpServiceImplTest@2c485b3a]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.OtpServiceImplTest@2c485b3a]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.OtpServiceImplTest.testGetAuthenticatorURI()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testGetAuthenticatorURI()[pri:0, instance:org.molgenis.security.twofactor.service.OtpServiceImplTest@2c485b3a]" name="testGetAuthenticatorURI" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAuthenticatorURI -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.OtpServiceImplTest@2c485b3a]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.OtpServiceImplTest.testGetAuthenticatorURI()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testTryVerificationKeyFailed()[pri:0, instance:org.molgenis.security.twofactor.service.OtpServiceImplTest@2c485b3a]" name="testTryVerificationKeyFailed" duration-ms="4" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <exception class="org.molgenis.security.twofactor.exceptions.InvalidVerificationCodeException">
            <message>
              <![CDATA[Invalid verification code entered]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.molgenis.security.twofactor.exceptions.InvalidVerificationCodeException: Invalid verification code entered
	at org.molgenis.security.twofactor.service.OtpServiceImpl.tryVerificationCode(OtpServiceImpl.java:47)
	at org.molgenis.security.twofactor.service.OtpServiceImplTest.testTryVerificationKeyFailed(OtpServiceImplTest.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.molgenis.security.twofactor.exceptions.InvalidVerificationCodeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTryVerificationKeyFailed -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.OtpServiceImplTest@2c485b3a]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.OtpServiceImplTest.testTryVerificationKeyFailed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.twofactor.service.OtpServiceImplTest@2c485b3a]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.service.OtpServiceImplTest@2c485b3a]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.service.OtpServiceImplTest.testTryVerificationKeyFailed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- org.molgenis.security.twofactor.service.OtpServiceImplTest -->
      <class name="org.molgenis.security.permission.SecurityContextRegistryImplTest">
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="setUpBeforeMethod" is-config="true" duration-ms="20" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testGetSecurityContextFromSessionUnexpectedValue()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="testGetSecurityContextFromSessionUnexpectedValue" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Session attribute 'SPRING_SECURITY_CONTEXT' is of type 'String' instead of 'SecurityContext']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Session attribute 'SPRING_SECURITY_CONTEXT' is of type 'String' instead of 'SecurityContext'
	at org.molgenis.security.permission.SecurityContextRegistryImpl.getSecurityContext(SecurityContextRegistryImpl.java:63)
	at org.molgenis.security.permission.SecurityContextRegistryImpl.getSecurityContext(SecurityContextRegistryImpl.java:35)
	at org.molgenis.security.permission.SecurityContextRegistryImplTest.testGetSecurityContextFromSessionUnexpectedValue(SecurityContextRegistryImplTest.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSecurityContextFromSessionUnexpectedValue -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testGetSecurityContextFromSessionWithSecurityContext()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="testGetSecurityContextFromSessionWithSecurityContext" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSecurityContextFromSessionWithSecurityContext -->
        <test-method status="PASS" signature="testGetSecurityContextFromSessionWithoutSecurityContext()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="testGetSecurityContextFromSessionWithoutSecurityContext" duration-ms="3" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSecurityContextFromSessionWithoutSecurityContext -->
        <test-method status="PASS" signature="testGetSecurityContextInvalidatedSession()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="testGetSecurityContextInvalidatedSession" duration-ms="5" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSecurityContextInvalidatedSession -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testGetSecurityContextUnknownSessionId()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="testGetSecurityContextUnknownSessionId" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSecurityContextUnknownSessionId -->
        <test-method status="PASS" signature="testGetSecurityContexts()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="testGetSecurityContexts" duration-ms="2" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSecurityContexts -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testHandleHttpSessionDestroyedEvent()[pri:0, instance:org.molgenis.security.permission.SecurityContextRegistryImplTest@5134a7d6]" name="testHandleHttpSessionDestroyedEvent" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHandleHttpSessionDestroyedEvent -->
      </class> <!-- org.molgenis.security.permission.SecurityContextRegistryImplTest -->
      <class name="org.molgenis.security.permission.MolgenisPermissionControllerTest">
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.MolgenisPermissionControllerTest@5c59dfc7]" name="setUpBeforeMethod" is-config="true" duration-ms="14" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="MolgenisPermissionController()[pri:0, instance:org.molgenis.security.permission.MolgenisPermissionControllerTest@5c59dfc7]" name="MolgenisPermissionController" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at java.util.Objects.requireNonNull(Objects.java:203)
	at org.molgenis.security.permission.MolgenisPermissionController.<init>(MolgenisPermissionController.java:22)
	at org.molgenis.security.permission.MolgenisPermissionControllerTest.MolgenisPermissionController(MolgenisPermissionControllerTest.java:30)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MolgenisPermissionController -->
        <test-method status="PASS" signature="hasReadPermissionFalse()[pri:0, instance:org.molgenis.security.permission.MolgenisPermissionControllerTest@5c59dfc7]" name="hasReadPermissionFalse" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasReadPermissionFalse -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.MolgenisPermissionControllerTest@5c59dfc7]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.MolgenisPermissionControllerTest@5c59dfc7]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="hasReadPermissionTrue()[pri:0, instance:org.molgenis.security.permission.MolgenisPermissionControllerTest@5c59dfc7]" name="hasReadPermissionTrue" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasReadPermissionTrue -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.MolgenisPermissionControllerTest@5c59dfc7]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.permission.MolgenisPermissionControllerTest@5c59dfc7]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="hasWritePermissionFalse()[pri:0, instance:org.molgenis.security.permission.MolgenisPermissionControllerTest@5c59dfc7]" name="hasWritePermissionFalse" duration-ms="0" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasWritePermissionFalse -->
        <test-method status="PASS" signature="hasWritePermissionTrue()[pri:0, instance:org.molgenis.security.permission.MolgenisPermissionControllerTest@5c59dfc7]" name="hasWritePermissionTrue" duration-ms="1" started-at="2018-06-01T12:51:46Z" finished-at="2018-06-01T12:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasWritePermissionTrue -->
      </class> <!-- org.molgenis.security.permission.MolgenisPermissionControllerTest -->
      <class name="org.molgenis.security.account.AccountServiceImplTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="79" started-at="2018-06-01T12:51:50Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.activateUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="setUp" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="activateUser()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="activateUser" duration-ms="2" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- activateUser -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="tearDownAfterMethod" is-config="true" duration-ms="3" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.activateUser_alreadyActivated()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="setUp" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.activateUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="activateUser_alreadyActivated()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="activateUser_alreadyActivated" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <exception class="org.molgenis.security.user.MolgenisUserException">
            <message>
              <![CDATA[Invalid activation code or account already activated.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.molgenis.security.user.MolgenisUserException: Invalid activation code or account already activated.
	at org.molgenis.security.account.AccountServiceImpl.activateUser(AccountServiceImpl.java:170)
	at org.molgenis.security.account.AccountServiceImplTest.activateUser_alreadyActivated(AccountServiceImplTest.java:137)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.molgenis.security.user.MolgenisUserException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- activateUser_alreadyActivated -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.activateUser_alreadyActivated()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="setUp" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.activateUser_invalidActivationCode()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="tearDownAfterMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="activateUser_invalidActivationCode()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="activateUser_invalidActivationCode" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <exception class="org.molgenis.security.user.MolgenisUserException">
            <message>
              <![CDATA[Invalid activation code or account already activated.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.molgenis.security.user.MolgenisUserException: Invalid activation code or account already activated.
	at org.molgenis.security.account.AccountServiceImpl.activateUser(AccountServiceImpl.java:170)
	at org.molgenis.security.account.AccountServiceImplTest.activateUser_invalidActivationCode(AccountServiceImplTest.java:123)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.molgenis.security.user.MolgenisUserException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- activateUser_invalidActivationCode -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.changePassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.activateUser_invalidActivationCode()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="initMocks" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="changePassword()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="changePassword" duration-ms="10" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- changePassword -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="setUp" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="tearDownAfterMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.changePassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.createUser() throws java.net.URISyntaxException,org.molgenis.security.account.UsernameAlreadyExistsException,org.molgenis.security.account.EmailAlreadyExistsException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="setUp" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="createUser()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="createUser" duration-ms="2" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUser -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="tearDownAfterMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.createUser() throws java.net.URISyntaxException,org.molgenis.security.account.UsernameAlreadyExistsException,org.molgenis.security.account.EmailAlreadyExistsException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.resetPassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="setUp" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="resetPassword()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="resetPassword" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- resetPassword -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.resetPassword_invalidEmailAddress()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.resetPassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="setUp" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="tearDownAfterMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="resetPassword_invalidEmailAddress()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="resetPassword_invalidEmailAddress" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <exception class="org.molgenis.security.user.MolgenisUserException">
            <message>
              <![CDATA[Invalid email address.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.molgenis.security.user.MolgenisUserException: Invalid email address.
	at org.molgenis.security.account.AccountServiceImpl.resetPassword(AccountServiceImpl.java:213)
	at org.molgenis.security.account.AccountServiceImplTest.resetPassword_invalidEmailAddress(AccountServiceImplTest.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.molgenis.security.user.MolgenisUserException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- resetPassword_invalidEmailAddress -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.account.AccountServiceImplTest@4d1f168]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:50Z" finished-at="2018-06-01T12:51:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.account.AccountServiceImplTest.resetPassword_invalidEmailAddress()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- org.molgenis.security.account.AccountServiceImplTest -->
      <class name="org.molgenis.security.token.TokenExtractorTest">
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="initMocks" is-config="true" duration-ms="134" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="testGetTokenFromHeader()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="testGetTokenFromHeader" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetTokenFromHeader -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="testGetTokenFromParam()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="testGetTokenFromParam" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetTokenFromParam -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="tearDownAfterMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="testResolveArgumentNoToken()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="testResolveArgumentNoToken" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResolveArgumentNoToken -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="testResolveArgumentNoTokenRequired()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="testResolveArgumentNoTokenRequired" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <exception class="org.springframework.web.bind.ServletRequestBindingException">
            <message>
              <![CDATA[Missing molgenis token. Token should either be present in the x-molgenis-token request header or the molgenis-token parameter.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.web.bind.ServletRequestBindingException: Missing molgenis token. Token should either be present in the x-molgenis-token request header or the molgenis-token parameter.
	at org.molgenis.security.token.TokenExtractor.getTokenInternal(TokenExtractor.java:50)
	at org.molgenis.security.token.TokenExtractor.resolveArgument(TokenExtractor.java:34)
	at org.molgenis.security.token.TokenExtractorTest.testResolveArgumentNoTokenRequired(TokenExtractorTest.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.web.bind.ServletRequestBindingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResolveArgumentNoTokenRequired -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="tearDownAfterMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="testResolveArgumentTokenInHeader()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="testResolveArgumentTokenInHeader" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResolveArgumentTokenInHeader -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="testResolveArgumentTokenInParam()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="testResolveArgumentTokenInParam" duration-ms="1" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResolveArgumentTokenInParam -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
        <test-method status="PASS" signature="initMocks()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="initMocks" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMocks -->
        <test-method status="PASS" signature="tearDownAfterMethod()[pri:0, instance:org.molgenis.security.token.TokenExtractorTest@22e253c7]" name="tearDownAfterMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:49Z" finished-at="2018-06-01T12:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownAfterMethod -->
      </class> <!-- org.molgenis.security.token.TokenExtractorTest -->
      <class name="org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="101" started-at="2018-06-01T12:51:47Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest.testDoFilterInternalIsConfigured() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="setUpBeforeMethod" is-config="true" duration-ms="26" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testDoFilterInternalIsConfigured()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="testDoFilterInternalIsConfigured" duration-ms="3" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoFilterInternalIsConfigured -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest.testDoFilterInternalIsConfigured() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="setUpBeforeMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest.testDoFilterInternalIsConfiguredChangePassword() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testDoFilterInternalIsConfiguredChangePassword()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="testDoFilterInternalIsConfiguredChangePassword" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoFilterInternalIsConfiguredChangePassword -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest.testDoFilterInternalIsNotConfigured() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest.testDoFilterInternalIsConfiguredChangePassword() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testDoFilterInternalIsNotConfigured()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="testDoFilterInternalIsNotConfigured" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoFilterInternalIsNotConfigured -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest.testDoFilterInternalIsNotConfigured() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest.testDoFilterInternalNotAuthenticated() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testDoFilterInternalNotAuthenticated()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="testDoFilterInternalNotAuthenticated" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoFilterInternalNotAuthenticated -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest.testDoFilterInternalRecoveryAuthenticated() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest.testDoFilterInternalNotAuthenticated() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest.testDoFilterInternalRecoveryAuthenticated() throws java.io.IOException,javax.servlet.ServletException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUpBeforeMethod()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="setUpBeforeMethod" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpBeforeMethod -->
        <test-method status="PASS" signature="testDoFilterInternalRecoveryAuthenticated()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="testDoFilterInternalRecoveryAuthenticated" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoFilterInternalRecoveryAuthenticated -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest@32182bf8]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-01T12:51:47Z" finished-at="2018-06-01T12:51:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- org.molgenis.security.twofactor.auth.TwoFactorAuthenticationFilterTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
