#!/bin/sh
#
# /etc/init.d/smartapplianceenabler -- startup script for the Smart Appliance Enabler
# Adapted by Axel MÃ¼ller <axel.mueller@avanux.de>
#
# Based on tomcat8 script written by
# Written by Miquel van Smoorenburg <miquels@cistron.nl>.
# Modified for Debian GNU/Linux	by Ian Murdock <imurdock@gnu.ai.mit.edu>.
# Modified for Tomcat by Stefan Gybas <sgybas@debian.org>.
# Modified for Tomcat6 by Thierry Carrez <thierry.carrez@ubuntu.com>.
# Modified for Tomcat7 by Ernesto Hernandez-Novich <emhn@itverx.com.ve>.
# Additional improvements by Jason Brittain <jason.brittain@mulesoft.com>.
#
### BEGIN INIT INFO
# Provides:          smartapplianceenabler
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Smart Appliance Enabler.
# Description:       Start the Smart Appliance Enabler.
### END INIT INFO
set -e

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=smartapplianceenabler
DESC="smartapplianceenabler"
DEFAULT=/etc/default/$NAME

if [ `id -u` -ne 0 ]; then
	echo "You need root privileges to run this script"
	exit 1
fi
 
# Make sure we are started with system locale
if [ -r /etc/default/locale ]; then
	. /etc/default/locale
	export LANG
fi

. /lib/lsb/init-functions

if [ -r /etc/default/rcS ]; then
	. /etc/default/rcS
fi


# The following variables can be overwritten in $DEFAULT

# this is a work-around until there is a suitable runtime replacement
# for dpkg-architecture for arch:all packages
# this function sets the variable JDK_DIRS
find_jdks()
{
    for java_version in 9 8 7
    do
        for jvmdir in /usr/lib/jvm/java-${java_version}-openjdk-* \
                      /usr/lib/jvm/jdk-${java_version}-oracle-* \
                      /usr/lib/jvm/jre-${java_version}-oracle-*
        do
            if [ -d "${jvmdir}" ]
            then
                JDK_DIRS="${JDK_DIRS} ${jvmdir}"
            fi
        done
    done

    # Add older non multi arch installations
    JDK_DIRS="${JDK_DIRS} /usr/lib/jvm/java-7-oracle"
}

# The first existing directory is used for JAVA_HOME (if JAVA_HOME is not
# defined in $DEFAULT)
JDK_DIRS="/usr/lib/jvm/default-java"
find_jdks

# Look for the right JVM to use
for jdir in $JDK_DIRS; do
    if [ -r "$jdir/bin/java" -a -z "${JAVA_HOME}" ]; then
	JAVA_HOME="$jdir"
    fi
done
export JAVA_HOME

# Directory where the Smart Appliance Enabler configuration files are placed
SAE_HOME=/usr/share/$NAME

# Default Java options
# Set java.awt.headless=true if JAVA_OPTS is not set so the
# Xalan XSL transformer can work without X11 display on JDK 1.4+
# It also looks like the default heap size of 64M is not enough for most cases
# so the maximum heap size is set to 128M
if [ -z "$JAVA_OPTS" ]; then
	JAVA_OPTS="-Djava.awt.headless=true -Xmx128M"
fi

# End of variables that can be overwritten in $DEFAULT

# overwrite settings from default file
if [ -f "$DEFAULT" ]; then
	. "$DEFAULT"
fi

SAE_JAR=`/usr/bin/find $SAE_HOME -name SmartApplianceEnabler-*ar`
if [ -z "$SAE_JAR" ]; then
	log_failure_msg "$SAE_HOME/SmartApplianceEnabler-*ar was not found"
	exit 1
fi

# Define other required variables
SAE_PID="/var/run/$NAME.pid"
RUN_SH="$SAE_HOME/run.sh"

run_sh() {
	# Escape any double quotes in the value of JAVA_OPTS
	JAVA_OPTS="$(echo $JAVA_OPTS | sed 's/\"/\\\"/g')"

	# Define the command to run as a daemon
        SAE_SH="$JAVA_HOME/bin/java $JAVA_OPTS \
		-Dsae.pidfile=$SAE_PID \
		-Dsae.home=$SAE_HOME \
		-jar $SAE_JAR"

	# Run the command as a daemon
	set +e
	start-stop-daemon --start -b -p $SAE_PID -x /bin/bash -- -c "$SAE_SH"
	status="$?"
	set +a -e
	return $status
}

case "$1" in
  start)
	if [ -z "$JAVA_HOME" ]; then
		log_failure_msg "no JDK or JRE found - please set JAVA_HOME"
		exit 1
	fi

	log_daemon_msg "Starting $DESC" "$NAME"
	if start-stop-daemon --test --start --pidfile "$SAE_PID" --exec "$JAVA_HOME/bin/java" >/dev/null; then

		run_sh
	        for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
		do
        		if start-stop-daemon --test --start --pidfile "$SAE_PID" --exec "$JAVA_HOME/bin/java" >/dev/null; then
				:
			else
	                    break
	                fi
                	sleep 1
	        done
        	if start-stop-daemon --test --start --pidfile "$SAE_PID" --exec "$JAVA_HOME/bin/java" >/dev/null; then
			if [ -f "$SAE_PID" ]; then
				rm -f "$SAE_PID"
			fi
			log_end_msg 1
		else
			log_end_msg 0
		fi
	else
	        log_progress_msg "(already running)"
		log_end_msg 0
	fi
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"

	set +e
	if [ -f "$SAE_PID" ]; then 
		start-stop-daemon --stop --pidfile "$SAE_PID" --retry=TERM/20/KILL/5 >/dev/null
		if [ $? -eq 1 ]; then
			log_progress_msg "$DESC is not running but pid file exists, cleaning up"
		elif [ $? -eq 3 ]; then
			PID="`cat $SAE_PID`"
			log_failure_msg "Failed to stop $NAME (pid $PID)"
			exit 1
		fi
		rm -f "$SAE_PID"
	else
		log_progress_msg "(not running)"
	fi
	log_end_msg 0
	set -e
	;;
   status)
	set +e
	start-stop-daemon --test --start --pidfile "$SAE_PID" --exec "$JAVA_HOME/bin/java" >/dev/null 2>&1
	if [ "$?" = "0" ]; then
		if [ -f "$SAE_PID" ]; then
		    log_success_msg "$DESC is not running, but pid file exists."
			exit 1
		else
		    log_success_msg "$DESC is not running."
			exit 3
		fi
	else
		log_success_msg "$DESC is running with pid `cat $CATALINA_PID`"
	fi
	set -e
        ;;
  restart|force-reload)
	if [ -f "$SAE_PID" ]; then
		$0 stop
		sleep 1
	fi
	$0 start
	;;
  try-restart)
        if start-stop-daemon --test --start --pidfile "$SAE_PID" --exec "$JAVA_HOME/bin/java" >/dev/null; then
		$0 start
	fi
        ;;
  *)
	log_success_msg "Usage: $0 {start|stop|restart|try-restart|force-reload|status}"
	exit 1
	;;
esac

exit 0
