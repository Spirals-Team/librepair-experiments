package dk.alexandra.fresco.lib.compare.gt;

import dk.alexandra.fresco.framework.Application;
import dk.alexandra.fresco.framework.DRes;
import dk.alexandra.fresco.framework.TestThreadRunner.TestThread;
import dk.alexandra.fresco.framework.TestThreadRunner.TestThreadFactory;
import dk.alexandra.fresco.framework.builder.numeric.ProtocolBuilderNumeric;
import dk.alexandra.fresco.framework.sce.resources.ResourcePool;
import dk.alexandra.fresco.framework.util.MathUtils;
import dk.alexandra.fresco.framework.value.SInt;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import org.junit.Assert;

public class BitLessThanOpenTests {

  public static class TestBitLessThanOpenBaseCases<ResourcePoolT extends ResourcePool>
      extends TestThreadFactory<ResourcePoolT, ProtocolBuilderNumeric> {

    private final int numBits;
    private final List<BigInteger> left;
    private final List<BigInteger> right;

    public TestBitLessThanOpenBaseCases(int numBits) {
      this.numBits = numBits;
      left = Arrays.asList(
          BigInteger.ZERO,
          BigInteger.ONE,
          BigInteger.ZERO,
          BigInteger.valueOf(5),
          BigInteger.valueOf(111),
          BigInteger.valueOf(111)
      );
      right = Arrays.asList(
          BigInteger.ONE,
          BigInteger.ZERO,
          BigInteger.ZERO,
          BigInteger.valueOf(4),
          BigInteger.valueOf(111),
          BigInteger.valueOf(112)
      );
    }

    @Override
    public TestThread<ResourcePoolT, ProtocolBuilderNumeric> next() {

      return new TestThread<ResourcePoolT, ProtocolBuilderNumeric>() {

        @Override
        public void test() {
          Application<List<BigInteger>, ProtocolBuilderNumeric> app =
              root -> {
                int myId = root.getBasicNumericContext().getMyId();
                List<DRes<BigInteger>> results = new ArrayList<>(left.size());
                for (int i = 0; i < left.size(); i++) {
                  int finalI = i;
                  DRes<BigInteger> leftValue = () -> left.get(finalI);
                  DRes<List<DRes<SInt>>> rightValue = toSecretBits(root, right.get(finalI), myId);
                  results.add(
                      root.numeric().open(root.seq(new BitLessThanOpen(leftValue, rightValue)))
                  );
                }
                return () -> results.stream().map(DRes::out).collect(Collectors.toList());
              };
          List<BigInteger> actual = runApplication(app);
          List<BigInteger> expected = new ArrayList<>(left.size());
          for (int i = 0; i < left.size(); i++) {
            boolean leq = left.get(i).compareTo(right.get(i)) < 0;
            expected.add(leq ? BigInteger.ONE : BigInteger.ZERO);
          }
          Assert.assertEquals(expected, actual);
        }
      };
    }

    private DRes<List<DRes<SInt>>> toSecretBits(ProtocolBuilderNumeric root, BigInteger value,
        int myId) {
      List<BigInteger> openList = MathUtils.toBits(value, numBits);
      Collections.reverse(openList);
      return (myId == 1) ?
          root.collections().closeList(openList, 1)
          : root.collections().closeList(numBits, 1);
    }

  }
}
