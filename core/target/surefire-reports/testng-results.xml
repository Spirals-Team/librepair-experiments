<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="529" passed="529">
  <reporter-output>
  </reporter-output>
  <suite name="ModelMapper suite" duration-ms="3314" started-at="2018-05-26T07:30:52Z" finished-at="2018-05-26T07:30:55Z">
    <groups>
      <group name="functional">
        <method signature="CircularDependencies1.shouldMap1LevelCircularReference()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" name="shouldMap1LevelCircularReference" class="org.modelmapper.functional.circular.CircularDependencies1"/>
        <method signature="CircularDependencies1.shouldMap2LevelCircularReference()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" name="shouldMap2LevelCircularReference" class="org.modelmapper.functional.circular.CircularDependencies1"/>
        <method signature="CircularDependencies1.shouldMapHierarchyOfHomoReferences()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" name="shouldMapHierarchyOfHomoReferences" class="org.modelmapper.functional.circular.CircularDependencies1"/>
        <method signature="CircularDependencies1.shouldMapLengthyCircularReferenceWithHeteroTypes()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" name="shouldMapLengthyCircularReferenceWithHeteroTypes" class="org.modelmapper.functional.circular.CircularDependencies1"/>
        <method signature="CircularDependencies1.shouldMapLengthyCircularReferenceWithHomoTypes()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" name="shouldMapLengthyCircularReferenceWithHomoTypes" class="org.modelmapper.functional.circular.CircularDependencies1"/>
        <method signature="CircularDependencies2.shouldAllowSkippedCircularReference()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" name="shouldAllowSkippedCircularReference" class="org.modelmapper.functional.circular.CircularDependencies2"/>
        <method signature="CircularDependencies2.shouldAllowSkippedCircularReferenceForInnerProperty()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" name="shouldAllowSkippedCircularReferenceForInnerProperty" class="org.modelmapper.functional.circular.CircularDependencies2"/>
        <method signature="CircularDependencies2.shouldMapCircularReferences()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" name="shouldMapCircularReferences" class="org.modelmapper.functional.circular.CircularDependencies2"/>
        <method signature="CircularDependencies2.shouldMapGraphEdges()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" name="shouldMapGraphEdges" class="org.modelmapper.functional.circular.CircularDependencies2"/>
        <method signature="CircularDependencies3.shouldMapCircularlReferences()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies3@23f72d88]" name="shouldMapCircularlReferences" class="org.modelmapper.functional.circular.CircularDependencies3"/>
        <method signature="CircularDependencies4.shouldNotThrowOnMatchingCircularReference()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies4@7308ffff]" name="shouldNotThrowOnMatchingCircularReference" class="org.modelmapper.functional.circular.CircularDependencies4"/>
        <method signature="CircularDependencies5.shouldMapHouses()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies5@6601cc93]" name="shouldMapHouses" class="org.modelmapper.functional.circular.CircularDependencies5"/>
        <method signature="CircularDependencies5.shouldMapStreet()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies5@6601cc93]" name="shouldMapStreet" class="org.modelmapper.functional.circular.CircularDependencies5"/>
        <method signature="CircularDependencies5.shouldMapTowns()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies5@6601cc93]" name="shouldMapTowns" class="org.modelmapper.functional.circular.CircularDependencies5"/>
        <method signature="CircularDependencies6.shouldMapAuthor()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies6@3fbfbf84]" name="shouldMapAuthor" class="org.modelmapper.functional.circular.CircularDependencies6"/>
        <method signature="CircularDependencies6.shouldMapBooks()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies6@3fbfbf84]" name="shouldMapBooks" class="org.modelmapper.functional.circular.CircularDependencies6"/>
        <method signature="CircularDependencies6.shouldMapLibrary()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies6@3fbfbf84]" name="shouldMapLibrary" class="org.modelmapper.functional.circular.CircularDependencies6"/>
        <method signature="CircularDependencies7.shouldMap()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies7@573284a5]" name="shouldMap" class="org.modelmapper.functional.circular.CircularDependencies7"/>
        <method signature="CollectionMapping1.shouldMapToArray()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" name="shouldMapToArray" class="org.modelmapper.functional.iterable.CollectionMapping1"/>
        <method signature="CollectionMapping1.shouldMapToTypeTokenizedArray()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" name="shouldMapToTypeTokenizedArray" class="org.modelmapper.functional.iterable.CollectionMapping1"/>
        <method signature="CollectionMapping1.shouldMapTypeTokenizedCollection()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" name="shouldMapTypeTokenizedCollection" class="org.modelmapper.functional.iterable.CollectionMapping1"/>
        <method signature="CollectionMapping2.shouldMapArrayToList()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" name="shouldMapArrayToList" class="org.modelmapper.functional.iterable.CollectionMapping2"/>
        <method signature="CollectionMapping2.shouldMapListToArray()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" name="shouldMapListToArray" class="org.modelmapper.functional.iterable.CollectionMapping2"/>
        <method signature="CollectionMapping2.shouldMapListToList()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" name="shouldMapListToList" class="org.modelmapper.functional.iterable.CollectionMapping2"/>
        <method signature="CollectionMapping2.shouldMapListToListOfDifferentTypes()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" name="shouldMapListToListOfDifferentTypes" class="org.modelmapper.functional.iterable.CollectionMapping2"/>
        <method signature="CollectionMapping3.shouldMap()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping3@3c4262d1]" name="shouldMap" class="org.modelmapper.functional.iterable.CollectionMapping3"/>
        <method signature="CollectionMapping3.shouldMapWithPropertyMap()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping3@3c4262d1]" name="shouldMapWithPropertyMap" class="org.modelmapper.functional.iterable.CollectionMapping3"/>
        <method signature="ConditionalMapping1.shouldSkipConditionalPropertyMappingViaPropertyMap()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalMapping1@537c8c7e]" name="shouldSkipConditionalPropertyMappingViaPropertyMap" class="org.modelmapper.functional.conditional.ConditionalMapping1"/>
        <method signature="ConditionalMapping1.shouldSkipConditionalTypeMapping()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalMapping1@537c8c7e]" name="shouldSkipConditionalTypeMapping" class="org.modelmapper.functional.conditional.ConditionalMapping1"/>
        <method signature="ConditionalMapping2.shouldMapConditionally()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalMapping2@3b95d13c]" name="shouldMapConditionally" class="org.modelmapper.functional.conditional.ConditionalMapping2"/>
        <method signature="ConditionalShading.shouldConditionallyMap()[pri:0, instance:org.modelmapper.functional.shading.ConditionalShading@bdd2027]" name="shouldConditionallyMap" class="org.modelmapper.functional.shading.ConditionalShading"/>
        <method signature="ConditionalShading.shouldShadeAllProperties()[pri:0, instance:org.modelmapper.functional.shading.ConditionalShading@bdd2027]" name="shouldShadeAllProperties" class="org.modelmapper.functional.shading.ConditionalShading"/>
        <method signature="ConditionalShading.shouldShadeSomeProperties()[pri:0, instance:org.modelmapper.functional.shading.ConditionalShading@bdd2027]" name="shouldShadeSomeProperties" class="org.modelmapper.functional.shading.ConditionalShading"/>
        <method signature="ConditionalTest.propertyMapConditionShouldOverrideTypeMapPropertyCondition()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalTest@3730ab42]" name="propertyMapConditionShouldOverrideTypeMapPropertyCondition" class="org.modelmapper.functional.conditional.ConditionalTest"/>
        <method signature="ConditionalTest.shouldUseTypeMapCondition()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalTest@3730ab42]" name="shouldUseTypeMapCondition" class="org.modelmapper.functional.conditional.ConditionalTest"/>
        <method signature="ConditionalTest.shouldUseTypeMapPropertyCondition()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalTest@3730ab42]" name="shouldUseTypeMapPropertyCondition" class="org.modelmapper.functional.conditional.ConditionalTest"/>
        <method signature="ConvertNestedObjectTest.convertNested()[pri:0, instance:org.modelmapper.functional.converter.ConvertNestedObjectTest@6ff415ad]" name="convertNested" class="org.modelmapper.functional.converter.ConvertNestedObjectTest"/>
        <method signature="ConverterShading.shouldShadeAllProperties()[pri:0, instance:org.modelmapper.functional.shading.ConverterShading@32f0c7f8]" name="shouldShadeAllProperties" class="org.modelmapper.functional.shading.ConverterShading"/>
        <method signature="ConverterShading.shouldShadeSomeProperties()[pri:0, instance:org.modelmapper.functional.shading.ConverterShading@32f0c7f8]" name="shouldShadeSomeProperties" class="org.modelmapper.functional.shading.ConverterShading"/>
        <method signature="ConverterTest1.propertyMapConverterShouldOverrideTypeMapPropertyConverter()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" name="propertyMapConverterShouldOverrideTypeMapPropertyConverter" class="org.modelmapper.functional.converter.ConverterTest1"/>
        <method signature="ConverterTest1.shouldUseConverterWhenMappingDestinationFieldWithoutSource()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" name="shouldUseConverterWhenMappingDestinationFieldWithoutSource" class="org.modelmapper.functional.converter.ConverterTest1"/>
        <method signature="ConverterTest1.shouldUseConverterWhenMappingFields()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" name="shouldUseConverterWhenMappingFields" class="org.modelmapper.functional.converter.ConverterTest1"/>
        <method signature="ConverterTest1.shouldUseTypeMapConverter()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" name="shouldUseTypeMapConverter" class="org.modelmapper.functional.converter.ConverterTest1"/>
        <method signature="ConverterTest1.shouldUseTypeMapPropertyConverter()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" name="shouldUseTypeMapPropertyConverter" class="org.modelmapper.functional.converter.ConverterTest1"/>
        <method signature="CustomConversion$When_using_converter.shouldSkipUnusedSourceMembers()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter@108d55c4]" name="shouldSkipUnusedSourceMembers" class="org.modelmapper.functional.converter.CustomConversion$When_using_converter"/>
        <method signature="CustomConversion$When_using_converter.shouldSkipUnusedSourceMembers()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" name="shouldSkipUnusedSourceMembers" class="org.modelmapper.functional.converter.CustomConversion$When_using_converter"/>
        <method signature="CustomConversion$When_using_converter.shouldUseConverter()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter@108d55c4]" name="shouldUseConverter" class="org.modelmapper.functional.converter.CustomConversion$When_using_converter"/>
        <method signature="CustomConversion$When_using_converter.shouldUseConverter()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" name="shouldUseConverter" class="org.modelmapper.functional.converter.CustomConversion$When_using_converter"/>
        <method signature="CustomConversion$When_using_converter_for_deep_mapping.shouldMapConvertUsingLastProperty()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_deep_mapping@6bf13698]" name="shouldMapConvertUsingLastProperty" class="org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_deep_mapping"/>
        <method signature="CustomConversion$When_using_converter_for_destination_object.shouldMapUsingConverter()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" name="shouldMapUsingConverter" class="org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object"/>
        <method signature="CustomConversion$When_using_converter_for_destination_object.shouldMapUsingMemberConverter()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" name="shouldMapUsingMemberConverter" class="org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object"/>
        <method signature="CustomConversion$When_using_converter_for_mismatched_properties.shouldMap()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mismatched_properties@15e0fe05]" name="shouldMap" class="org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mismatched_properties"/>
        <method signature="CustomConversion$When_using_converter_for_mismatched_properties.shouldValidate()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mismatched_properties@15e0fe05]" name="shouldValidate" class="org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mismatched_properties"/>
        <method signature="CustomConversion$When_using_member_converter.shouldMapWithExplicitMappings()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter@280d9edc]" name="shouldMapWithExplicitMappings" class="org.modelmapper.functional.converter.CustomConversion$When_using_member_converter"/>
        <method signature="CustomConversion$When_using_member_converter.shouldMapWithImplicitMappings()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter@280d9edc]" name="shouldMapWithImplicitMappings" class="org.modelmapper.functional.converter.CustomConversion$When_using_member_converter"/>
        <method signature="CustomConversion$When_using_member_converter_for_deep_model.shouldMap()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_deep_model@28fd3dc1]" name="shouldMap" class="org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_deep_model"/>
        <method signature="CustomConversion$When_using_member_converter_for_different_member.shouldMapFromSourceMember()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_different_member@5f9b6ae7]" name="shouldMapFromSourceMember" class="org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_different_member"/>
        <method signature="CustomConversion$When_using_member_converter_for_different_member.shouldMapFromSourceObject()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_different_member@5f9b6ae7]" name="shouldMapFromSourceObject" class="org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_different_member"/>
        <method signature="DeepMappingTest1.shouldThrowOnMissingMutatorForAccessor()[pri:0, instance:org.modelmapper.functional.deepmapping.DeepMappingTest1@23b3aa8c]" name="shouldThrowOnMissingMutatorForAccessor" class="org.modelmapper.functional.deepmapping.DeepMappingTest1"/>
        <method signature="DeepMappingTest1.testMapping()[pri:0, instance:org.modelmapper.functional.deepmapping.DeepMappingTest1@23b3aa8c]" name="testMapping" class="org.modelmapper.functional.deepmapping.DeepMappingTest1"/>
        <method signature="DeepMappingTest2.shouldMap()[pri:0, instance:org.modelmapper.functional.deepmapping.DeepMappingTest2@288cdaab]" name="shouldMap" class="org.modelmapper.functional.deepmapping.DeepMappingTest2"/>
        <method signature="DifferentTypedElements.shouldPerformCollectionConversion()[pri:0, instance:org.modelmapper.functional.iterable.DifferentTypedElements@47ad69f7]" name="shouldPerformCollectionConversion" class="org.modelmapper.functional.iterable.DifferentTypedElements"/>
        <method signature="DisambiguationTest1.shouldDisambiguate()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest1@49a26d19]" name="shouldDisambiguate" class="org.modelmapper.functional.disambiguation.DisambiguationTest1"/>
        <method signature="DisambiguationTest2.shouldDisambiguate()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest2@19058533]" name="shouldDisambiguate" class="org.modelmapper.functional.disambiguation.DisambiguationTest2"/>
        <method signature="DisambiguationTest2.shouldDisambiguateWithLooseMatchingStrategy()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest2@19058533]" name="shouldDisambiguateWithLooseMatchingStrategy" class="org.modelmapper.functional.disambiguation.DisambiguationTest2"/>
        <method signature="DisambiguationTest3.shouldMapDTOToEntity()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest3@730e5763]" name="shouldMapDTOToEntity" class="org.modelmapper.functional.disambiguation.DisambiguationTest3"/>
        <method signature="DisambiguationTest3.shouldMapEntityToDTO()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest3@730e5763]" name="shouldMapEntityToDTO" class="org.modelmapper.functional.disambiguation.DisambiguationTest3"/>
        <method signature="DisambiguationTest4.shouldOverrideAmbiguityWithExplicitMapping()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest4@69e05f61]" name="shouldOverrideAmbiguityWithExplicitMapping" class="org.modelmapper.functional.disambiguation.DisambiguationTest4"/>
        <method signature="DisambiguationTest4.shouldThrowOnMap()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest4@69e05f61]" name="shouldThrowOnMap" class="org.modelmapper.functional.disambiguation.DisambiguationTest4"/>
        <method signature="EnumConverter.test()[pri:0, instance:org.modelmapper.functional.enums.EnumConverter@65eabaab]" name="test" class="org.modelmapper.functional.enums.EnumConverter"/>
        <method signature="EqualHierarchies.shouldMapInnerClasses()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" name="shouldMapInnerClasses" class="org.modelmapper.functional.EqualHierarchies"/>
        <method signature="EqualHierarchies.shouldMapInverseInnerClasses()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" name="shouldMapInverseInnerClasses" class="org.modelmapper.functional.EqualHierarchies"/>
        <method signature="EqualHierarchies.shouldMapInverseOuterClasses()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" name="shouldMapInverseOuterClasses" class="org.modelmapper.functional.EqualHierarchies"/>
        <method signature="EqualHierarchies.shouldMapOuterClasses()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" name="shouldMapOuterClasses" class="org.modelmapper.functional.EqualHierarchies"/>
        <method signature="ExistingDestinationTest.shouldConvertWithExistingDestination()[pri:0, instance:org.modelmapper.functional.converter.ExistingDestinationTest@10c2064a]" name="shouldConvertWithExistingDestination" class="org.modelmapper.functional.converter.ExistingDestinationTest"/>
        <method signature="GH176.shouldAllowConverterToMultipleDestinationSources()[pri:0, instance:org.modelmapper.bugs.GH176@e48bf9a]" name="shouldAllowConverterToMultipleDestinationSources" class="org.modelmapper.bugs.GH176"/>
        <method signature="GH176.shouldAllowToReuseMultipleConverters()[pri:0, instance:org.modelmapper.bugs.GH176@e48bf9a]" name="shouldAllowToReuseMultipleConverters" class="org.modelmapper.bugs.GH176"/>
        <method signature="GH176.shouldReuseConverter()[pri:0, instance:org.modelmapper.bugs.GH176@e48bf9a]" name="shouldReuseConverter" class="org.modelmapper.bugs.GH176"/>
        <method signature="Immutable.shouldMapToImmutableViaProvider()[pri:0, instance:org.modelmapper.functional.Immutable@2b98b3bb]" name="shouldMapToImmutableViaProvider" class="org.modelmapper.functional.Immutable"/>
        <method signature="Immutable.shouldMapToImmutableViaSecurityOverride()[pri:0, instance:org.modelmapper.functional.Immutable@2b98b3bb]" name="shouldMapToImmutableViaSecurityOverride" class="org.modelmapper.functional.Immutable"/>
        <method signature="ImplicitUnknownTypeConversionTest.standardMapperShouldAllowImplicitMappingObjectsToBooleans()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" name="standardMapperShouldAllowImplicitMappingObjectsToBooleans" class="org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest"/>
        <method signature="ImplicitUnknownTypeConversionTest.standardMapperShouldAllowImplicitMappingObjectsToCharacters()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" name="standardMapperShouldAllowImplicitMappingObjectsToCharacters" class="org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest"/>
        <method signature="ImplicitUnknownTypeConversionTest.standardMapperShouldAllowImplicitMappingObjectsToIntegers()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" name="standardMapperShouldAllowImplicitMappingObjectsToIntegers" class="org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest"/>
        <method signature="ImplicitUnknownTypeConversionTest.standardMapperShouldAllowImplicitMappingObjectsToStrings()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" name="standardMapperShouldAllowImplicitMappingObjectsToStrings" class="org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest"/>
        <method signature="ImplicitUnknownTypeConversionTest.strictMapperShouldNotAllowImplicitMappingObjectsToBooleans()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" name="strictMapperShouldNotAllowImplicitMappingObjectsToBooleans" class="org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest"/>
        <method signature="ImplicitUnknownTypeConversionTest.strictMapperShouldNotAllowImplicitMappingObjectsToCharacters()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" name="strictMapperShouldNotAllowImplicitMappingObjectsToCharacters" class="org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest"/>
        <method signature="ImplicitUnknownTypeConversionTest.strictMapperShouldNotAllowImplicitMappingObjectsToIntegers()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" name="strictMapperShouldNotAllowImplicitMappingObjectsToIntegers" class="org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest"/>
        <method signature="ImplicitUnknownTypeConversionTest.strictMapperShouldNotAllowImplicitMappingObjectsToStrings()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" name="strictMapperShouldNotAllowImplicitMappingObjectsToStrings" class="org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest"/>
        <method signature="JitTypeMap.shouldMap()[pri:0, instance:org.modelmapper.functional.JitTypeMap@50a691d3]" name="shouldMap" class="org.modelmapper.functional.JitTypeMap"/>
        <method signature="LooseMappingTest1.assertMatches()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest1@299270eb]" name="assertMatches" class="org.modelmapper.functional.loosematching.LooseMappingTest1"/>
        <method signature="LooseMappingTest1.shouldValidate()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest1@299270eb]" name="shouldValidate" class="org.modelmapper.functional.loosematching.LooseMappingTest1"/>
        <method signature="LooseMappingTest2.assertMatches()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest2@3b90a30a]" name="assertMatches" class="org.modelmapper.functional.loosematching.LooseMappingTest2"/>
        <method signature="LooseMappingTest2.shouldValidate()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest2@3b90a30a]" name="shouldValidate" class="org.modelmapper.functional.loosematching.LooseMappingTest2"/>
        <method signature="MapValueReaderTest.shouldMapAnotherMapToBean()[pri:0, instance:org.modelmapper.internal.valueaccess.MapValueReaderTest@118102ee]" name="shouldMapAnotherMapToBean" class="org.modelmapper.internal.valueaccess.MapValueReaderTest"/>
        <method signature="MapValueReaderTest.shouldMapMapToBean()[pri:0, instance:org.modelmapper.internal.valueaccess.MapValueReaderTest@118102ee]" name="shouldMapMapToBean" class="org.modelmapper.internal.valueaccess.MapValueReaderTest"/>
        <method signature="MapValueReaderTest.shouldMapNullValue()[pri:0, instance:org.modelmapper.internal.valueaccess.MapValueReaderTest@118102ee]" name="shouldMapNullValue" class="org.modelmapper.internal.valueaccess.MapValueReaderTest"/>
        <method signature="MergeTypeMaps.shouldMergeTypeMaps()[pri:0, instance:org.modelmapper.functional.merging.MergeTypeMaps@2babf189]" name="shouldMergeTypeMaps" class="org.modelmapper.functional.merging.MergeTypeMaps"/>
        <method signature="MergingTest1.shouldMergeMappings()[pri:0, instance:org.modelmapper.functional.merging.MergingTest1@1eb2d371]" name="shouldMergeMappings" class="org.modelmapper.functional.merging.MergingTest1"/>
        <method signature="NestedMappingTest1.shouldMapArtistToArtistDTO()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" name="shouldMapArtistToArtistDTO" class="org.modelmapper.functional.deepmapping.NestedMappingTest1"/>
        <method signature="NestedMappingTest1.shouldMapArtistToSongDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" name="shouldMapArtistToSongDTO2" class="org.modelmapper.functional.deepmapping.NestedMappingTest1"/>
        <method signature="NestedMappingTest1.shouldMapSongDTO2ToSong()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" name="shouldMapSongDTO2ToSong" class="org.modelmapper.functional.deepmapping.NestedMappingTest1"/>
        <method signature="NestedMappingTest1.shouldMapSongDTOToArtist()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" name="shouldMapSongDTOToArtist" class="org.modelmapper.functional.deepmapping.NestedMappingTest1"/>
        <method signature="NestedMappingTest1.shouldMapSongToSongDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" name="shouldMapSongToSongDTO1" class="org.modelmapper.functional.deepmapping.NestedMappingTest1"/>
        <method signature="NestedMappingTest1.shouldMapSongToSongDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" name="shouldMapSongToSongDTO2" class="org.modelmapper.functional.deepmapping.NestedMappingTest1"/>
        <method signature="NestedMappingTest2.shouldMapEvent1ToEventDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" name="shouldMapEvent1ToEventDTO1" class="org.modelmapper.functional.deepmapping.NestedMappingTest2"/>
        <method signature="NestedMappingTest2.shouldMapEvent1ToEventDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" name="shouldMapEvent1ToEventDTO2" class="org.modelmapper.functional.deepmapping.NestedMappingTest2"/>
        <method signature="NestedMappingTest2.shouldMapEvent1ToEventDTO3()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" name="shouldMapEvent1ToEventDTO3" class="org.modelmapper.functional.deepmapping.NestedMappingTest2"/>
        <method signature="NestedMappingTest2.shouldMapEvent2ToEventDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" name="shouldMapEvent2ToEventDTO1" class="org.modelmapper.functional.deepmapping.NestedMappingTest2"/>
        <method signature="NestedMappingTest2.shouldMapEvent2ToEventDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" name="shouldMapEvent2ToEventDTO2" class="org.modelmapper.functional.deepmapping.NestedMappingTest2"/>
        <method signature="NestedMappingTest2.shouldMapEventDTO1ToEvent1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" name="shouldMapEventDTO1ToEvent1" class="org.modelmapper.functional.deepmapping.NestedMappingTest2"/>
        <method signature="NestedMappingTest2.shouldMapEventDTO2ToEvent1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" name="shouldMapEventDTO2ToEvent1" class="org.modelmapper.functional.deepmapping.NestedMappingTest2"/>
        <method signature="NestedMappingTest2.shouldMapEventDTO3ToEvent1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" name="shouldMapEventDTO3ToEvent1" class="org.modelmapper.functional.deepmapping.NestedMappingTest2"/>
        <method signature="NestedMappingTest2.shouldMapEventDTO3ToEventDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" name="shouldMapEventDTO3ToEventDTO2" class="org.modelmapper.functional.deepmapping.NestedMappingTest2"/>
        <method signature="NestedMappingTest2.shouldMapEventDTO4ToEvent3()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" name="shouldMapEventDTO4ToEvent3" class="org.modelmapper.functional.deepmapping.NestedMappingTest2"/>
        <method signature="NestedMappingTest2.shouldThrowOnAmbiguousEventDTO4ToEvent1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" name="shouldThrowOnAmbiguousEventDTO4ToEvent1" class="org.modelmapper.functional.deepmapping.NestedMappingTest2"/>
        <method signature="NestedMappingTest3.shouldMapName2ToPersonDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" name="shouldMapName2ToPersonDTO1" class="org.modelmapper.functional.deepmapping.NestedMappingTest3"/>
        <method signature="NestedMappingTest3.shouldMapOrderDTO1ToOrder()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" name="shouldMapOrderDTO1ToOrder" class="org.modelmapper.functional.deepmapping.NestedMappingTest3"/>
        <method signature="NestedMappingTest3.shouldMapOrderDTO2ToOrder()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" name="shouldMapOrderDTO2ToOrder" class="org.modelmapper.functional.deepmapping.NestedMappingTest3"/>
        <method signature="NestedMappingTest3.shouldMapOrderDTO3ToOrder()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" name="shouldMapOrderDTO3ToOrder" class="org.modelmapper.functional.deepmapping.NestedMappingTest3"/>
        <method signature="NestedMappingTest3.shouldMapOrderToOrderDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" name="shouldMapOrderToOrderDTO1" class="org.modelmapper.functional.deepmapping.NestedMappingTest3"/>
        <method signature="NestedMappingTest3.shouldMapOrderToOrderDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" name="shouldMapOrderToOrderDTO2" class="org.modelmapper.functional.deepmapping.NestedMappingTest3"/>
        <method signature="NestedMappingTest3.shouldMapOrderToOrderDTO3()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" name="shouldMapOrderToOrderDTO3" class="org.modelmapper.functional.deepmapping.NestedMappingTest3"/>
        <method signature="NestedMappingTest3.shouldMapPersonToPersonDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" name="shouldMapPersonToPersonDTO1" class="org.modelmapper.functional.deepmapping.NestedMappingTest3"/>
        <method signature="NestedMappingTest3.shouldMapPersonToPersonDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" name="shouldMapPersonToPersonDTO2" class="org.modelmapper.functional.deepmapping.NestedMappingTest3"/>
        <method signature="NestedMappingTest4.shouldMapUser1ToUserDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" name="shouldMapUser1ToUserDTO1" class="org.modelmapper.functional.deepmapping.NestedMappingTest4"/>
        <method signature="NestedMappingTest4.shouldMapUser2ToUserDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" name="shouldMapUser2ToUserDTO2" class="org.modelmapper.functional.deepmapping.NestedMappingTest4"/>
        <method signature="NestedMappingTest4.shouldMapUserDTO1ToUser1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" name="shouldMapUserDTO1ToUser1" class="org.modelmapper.functional.deepmapping.NestedMappingTest4"/>
        <method signature="NestedMappingTest4.shouldMapUserDTO2ToUser2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" name="shouldMapUserDTO2ToUser2" class="org.modelmapper.functional.deepmapping.NestedMappingTest4"/>
        <method signature="NestedMappingTest4.shouldNotMapUser2ToUserDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" name="shouldNotMapUser2ToUserDTO1" class="org.modelmapper.functional.deepmapping.NestedMappingTest4"/>
        <method signature="NestedMappingTest4.shouldNotMapUserDTO1ToUser2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" name="shouldNotMapUserDTO1ToUser2" class="org.modelmapper.functional.deepmapping.NestedMappingTest4"/>
        <method signature="NestedMappingTest5.shouldMapOrderToOrderDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest5@6c796cc1]" name="shouldMapOrderToOrderDTO1" class="org.modelmapper.functional.deepmapping.NestedMappingTest5"/>
        <method signature="NestedMappingTest6.shouldMapOrderDTPOoOrder()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest6@99407c2]" name="shouldMapOrderDTPOoOrder" class="org.modelmapper.functional.deepmapping.NestedMappingTest6"/>
        <method signature="NestedMappingTest6.shouldMapOrderToOrderDTO()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest6@99407c2]" name="shouldMapOrderToOrderDTO" class="org.modelmapper.functional.deepmapping.NestedMappingTest6"/>
        <method signature="NestedMappingTest7.shouldMapModelWithNullItems()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest7@64a9d48c]" name="shouldMapModelWithNullItems" class="org.modelmapper.functional.deepmapping.NestedMappingTest7"/>
        <method signature="NestedMappingTest7.shouldValidateTypeMap()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest7@64a9d48c]" name="shouldValidateTypeMap" class="org.modelmapper.functional.deepmapping.NestedMappingTest7"/>
        <method signature="NestedMappingTest8.shouldMapToConstantSource()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest8@365a6a43]" name="shouldMapToConstantSource" class="org.modelmapper.functional.deepmapping.NestedMappingTest8"/>
        <method signature="NullBehavior.shouldMapModelWithNullItems()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" name="shouldMapModelWithNullItems" class="org.modelmapper.functional.NullBehavior"/>
        <method signature="NullBehavior.shouldSkipNullsGlobally()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" name="shouldSkipNullsGlobally" class="org.modelmapper.functional.NullBehavior"/>
        <method signature="NullBehavior.shouldSkipNullsPerTypeMap()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" name="shouldSkipNullsPerTypeMap" class="org.modelmapper.functional.NullBehavior"/>
        <method signature="NullBehavior.shouldValidateTypeMap()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" name="shouldValidateTypeMap" class="org.modelmapper.functional.NullBehavior"/>
        <method signature="NullMapping1.shouldMap()[pri:0, instance:org.modelmapper.functional.shading.NullMapping1@504e1599]" name="shouldMap" class="org.modelmapper.functional.shading.NullMapping1"/>
        <method signature="NullMapping1.shouldShadeWhenNullEncountered()[pri:0, instance:org.modelmapper.functional.shading.NullMapping1@504e1599]" name="shouldShadeWhenNullEncountered" class="org.modelmapper.functional.shading.NullMapping1"/>
        <method signature="NullMapping2.shouldShadeWhenNullEncountered()[pri:0, instance:org.modelmapper.functional.shading.NullMapping2@31f20c9f]" name="shouldShadeWhenNullEncountered" class="org.modelmapper.functional.shading.NullMapping2"/>
        <method signature="PassNullSourcesToGlobalConditionalConvertersTest.empowerConditionalConvertersToHandleNullPropertiesInSourceObject()[pri:0, instance:org.modelmapper.functional.converter.PassNullSourcesToGlobalConditionalConvertersTest@70e13fa]" name="empowerConditionalConvertersToHandleNullPropertiesInSourceObject" class="org.modelmapper.functional.converter.PassNullSourcesToGlobalConditionalConvertersTest"/>
        <method signature="PreAndPostConverterTest.shouldPostConvertert()[pri:0, instance:org.modelmapper.functional.converter.PreAndPostConverterTest@743c6ce4]" name="shouldPostConvertert" class="org.modelmapper.functional.converter.PreAndPostConverterTest"/>
        <method signature="PreAndPostConverterTest.shouldPreConvertert()[pri:0, instance:org.modelmapper.functional.converter.PreAndPostConverterTest@743c6ce4]" name="shouldPreConvertert" class="org.modelmapper.functional.converter.PreAndPostConverterTest"/>
        <method signature="PrimitiveMapping.shouldMapPrimitivesToPrimitives()[pri:0, instance:org.modelmapper.functional.PrimitiveMapping@7c853486]" name="shouldMapPrimitivesToPrimitives" class="org.modelmapper.functional.PrimitiveMapping"/>
        <method signature="PrimitiveMapping.shouldMapPrimitivesToWrapper()[pri:0, instance:org.modelmapper.functional.PrimitiveMapping@7c853486]" name="shouldMapPrimitivesToWrapper" class="org.modelmapper.functional.PrimitiveMapping"/>
        <method signature="PrimitiveMapping.shouldMapWrappersToPrimitives()[pri:0, instance:org.modelmapper.functional.PrimitiveMapping@7c853486]" name="shouldMapWrappersToPrimitives" class="org.modelmapper.functional.PrimitiveMapping"/>
        <method signature="ProviderTest1.shouldUseTypeMapConverter()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest1@4315e9af]" name="shouldUseTypeMapConverter" class="org.modelmapper.functional.provider.ProviderTest1"/>
        <method signature="ProviderTest1.shouldUseTypeMapPropertyProvider()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest1@4315e9af]" name="shouldUseTypeMapPropertyProvider" class="org.modelmapper.functional.provider.ProviderTest1"/>
        <method signature="ProviderTest2.shouldMapPropertyWithProviderWhenPropertyTypesDiffer()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" name="shouldMapPropertyWithProviderWhenPropertyTypesDiffer" class="org.modelmapper.functional.provider.ProviderTest2"/>
        <method signature="ProviderTest2.shouldMapTypesWithProvider()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" name="shouldMapTypesWithProvider" class="org.modelmapper.functional.provider.ProviderTest2"/>
        <method signature="ProviderTest2.shouldMapWithGlobalProvider()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" name="shouldMapWithGlobalProvider" class="org.modelmapper.functional.provider.ProviderTest2"/>
        <method signature="ProviderTest2.shouldMapWithPropertyProviderViaPropertyMap()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" name="shouldMapWithPropertyProviderViaPropertyMap" class="org.modelmapper.functional.provider.ProviderTest2"/>
        <method signature="ProviderTest2.shouldMapWithPropertyProviderViaTypeMap()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" name="shouldMapWithPropertyProviderViaTypeMap" class="org.modelmapper.functional.provider.ProviderTest2"/>
        <method signature="ProxyTest.shouldMapBytebuddyProxies()[pri:0, instance:org.modelmapper.functional.ProxyTest@76f856a8]" name="shouldMapBytebuddyProxies" class="org.modelmapper.functional.ProxyTest"/>
        <method signature="ProxyTest.shouldMapCglibProxies()[pri:0, instance:org.modelmapper.functional.ProxyTest@76f856a8]" name="shouldMapCglibProxies" class="org.modelmapper.functional.ProxyTest"/>
        <method signature="ShadedNestedMapping.shouldShadeNullValue()[pri:0, instance:org.modelmapper.functional.shading.ShadedNestedMapping@f446158]" name="shouldShadeNullValue" class="org.modelmapper.functional.shading.ShadedNestedMapping"/>
        <method signature="TypeResolutionTest1.providersAreAbleToResolveDestinationTypesBasedOnActualSourceType()[pri:0, instance:org.modelmapper.functional.typeresolution.TypeResolutionTest1@7159a5cd]" name="providersAreAbleToResolveDestinationTypesBasedOnActualSourceType" class="org.modelmapper.functional.typeresolution.TypeResolutionTest1"/>
        <method signature="TypeResolutionTest2.providersAreAbleToResolveDestinationTypesBasedOnActualSourceType()[pri:0, instance:org.modelmapper.functional.typeresolution.TypeResolutionTest2@58a2b4c]" name="providersAreAbleToResolveDestinationTypesBasedOnActualSourceType" class="org.modelmapper.functional.typeresolution.TypeResolutionTest2"/>
        <method signature="TypeResolutionTest3.shouldAllowMappingOfNestedPropertiesInComplexGenericTypes()[pri:0, instance:org.modelmapper.functional.typeresolution.TypeResolutionTest3@dab48d3]" name="shouldAllowMappingOfNestedPropertiesInComplexGenericTypes" class="org.modelmapper.functional.typeresolution.TypeResolutionTest3"/>
        <method signature="TypedMapMapping.test()[pri:0, instance:org.modelmapper.functional.iterable.TypedMapMapping@30c0d731]" name="test" class="org.modelmapper.functional.iterable.TypedMapMapping"/>
        <method signature="UnequalHierarchies.shouldMap()[pri:0, instance:org.modelmapper.functional.UnequalHierarchies@37864b77]" name="shouldMap" class="org.modelmapper.functional.UnequalHierarchies"/>
        <method signature="UnequalHierarchies.shouldMapInverse()[pri:0, instance:org.modelmapper.functional.UnequalHierarchies@37864b77]" name="shouldMapInverse" class="org.modelmapper.functional.UnequalHierarchies"/>
      </group> <!-- functional -->
      <group name="functionl">
        <method signature="CustomConversion$When_using_converter_for_mapping_to_one_destination_from_many_sources.shouldMapSubDestValueWithConverter()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mapping_to_one_destination_from_many_sources@1128620c]" name="shouldMapSubDestValueWithConverter" class="org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mapping_to_one_destination_from_many_sources"/>
      </group> <!-- functionl -->
    </groups>
    <test name="All" duration-ms="3314" started-at="2018-05-26T07:30:52Z" finished-at="2018-05-26T07:30:55Z">
      <class name="org.modelmapper.functional.iterable.GenericElementMapping">
        <test-method status="PASS" signature="initMemberContext()[pri:0, instance:org.modelmapper.functional.iterable.GenericElementMapping@2b917fb0]" test-instance-name="" name="initMemberContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMemberContext -->
        <test-method status="PASS" signature="shouldMapDeeplyMappedExplicitGenericElements()[pri:0, instance:org.modelmapper.functional.iterable.GenericElementMapping@2b917fb0]" test-instance-name="" name="shouldMapDeeplyMappedExplicitGenericElements" duration-ms="12" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapDeeplyMappedExplicitGenericElements -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.GenericElementMapping@2b917fb0]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.GenericElementMapping@2b917fb0]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initMemberContext()[pri:0, instance:org.modelmapper.functional.iterable.GenericElementMapping@2b917fb0]" test-instance-name="" name="initMemberContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMemberContext -->
        <test-method status="PASS" signature="shouldMapExplicitGenericElements()[pri:0, instance:org.modelmapper.functional.iterable.GenericElementMapping@2b917fb0]" test-instance-name="" name="shouldMapExplicitGenericElements" duration-ms="11" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapExplicitGenericElements -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.GenericElementMapping@2b917fb0]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initMemberContext()[pri:0, instance:org.modelmapper.functional.iterable.GenericElementMapping@2b917fb0]" test-instance-name="" name="initMemberContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initMemberContext -->
        <test-method status="PASS" signature="shouldMapImplicitGenericElements()[pri:0, instance:org.modelmapper.functional.iterable.GenericElementMapping@2b917fb0]" test-instance-name="" name="shouldMapImplicitGenericElements" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapImplicitGenericElements -->
      </class> <!-- org.modelmapper.functional.iterable.GenericElementMapping -->
      <class name="org.modelmapper.internal.converter.AssignableConverterTest">
        <test-method status="PASS" signature="testConvert()[pri:0, instance:org.modelmapper.internal.converter.AssignableConverterTest@71cb3139]" test-instance-name="" name="testConvert" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvert -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.AssignableConverterTest@71cb3139]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testMatches()[pri:0, instance:org.modelmapper.internal.converter.AssignableConverterTest@71cb3139]" test-instance-name="" name="testMatches" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMatches -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.AssignableConverterTest@71cb3139]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
      </class> <!-- org.modelmapper.internal.converter.AssignableConverterTest -->
      <class name="org.modelmapper.internal.ProxyFactoryTest">
        <test-method status="PASS" signature="shouldProxyTypesWithNonDefaultConstructor()[pri:0, instance:org.modelmapper.internal.ProxyFactoryTest@56681eaf]" test-instance-name="" name="shouldProxyTypesWithNonDefaultConstructor" duration-ms="10" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldProxyTypesWithNonDefaultConstructor -->
      </class> <!-- org.modelmapper.internal.ProxyFactoryTest -->
      <class name="org.modelmapper.bugs.GH153">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH153@5176d279]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="testMappingClassWithoutDi()[pri:0, instance:org.modelmapper.bugs.GH153@5176d279]" test-instance-name="" name="testMappingClassWithoutDi" duration-ms="5" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMappingClassWithoutDi -->
      </class> <!-- org.modelmapper.bugs.GH153 -->
      <class name="org.modelmapper.bugs.GH11">
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH11@499683c4]" test-instance-name="" name="test" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH11@499683c4]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH11 -->
      <class name="org.modelmapper.functional.inherit.MultipleInterfacesTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.inherit.MultipleInterfacesTest@30669dac]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldIncludeBaseTypeMaps()[pri:0, instance:org.modelmapper.functional.inherit.MultipleInterfacesTest@30669dac]" test-instance-name="" name="shouldIncludeBaseTypeMaps" duration-ms="11" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldIncludeBaseTypeMaps -->
      </class> <!-- org.modelmapper.functional.inherit.MultipleInterfacesTest -->
      <class name="org.modelmapper.internal.converter.EnumConverterTest">
        <test-method status="PASS" signature="shouldConvertFromStringToEnum()[pri:0, instance:org.modelmapper.internal.converter.EnumConverterTest@409986fe]" test-instance-name="" name="shouldConvertFromStringToEnum" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertFromStringToEnum -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.EnumConverterTest@409986fe]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.EnumConverterTest@409986fe]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.EnumConverterTest@409986fe]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testConvert()[pri:0, instance:org.modelmapper.internal.converter.EnumConverterTest@409986fe]" test-instance-name="" name="testConvert" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvert -->
        <test-method status="PASS" signature="testMatches()[pri:0, instance:org.modelmapper.internal.converter.EnumConverterTest@409986fe]" test-instance-name="" name="testMatches" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMatches -->
      </class> <!-- org.modelmapper.internal.converter.EnumConverterTest -->
      <class name="org.modelmapper.convention.InexactMatchingStrategyTest">
        <test-method status="PASS" signature="shouldMatchClass()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchClass" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchClass -->
        <test-method status="PASS" signature="shouldMatchCombinedTokens()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchCombinedTokens" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchCombinedTokens -->
        <test-method status="PASS" signature="shouldMatchEqualHierarchies()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchEqualHierarchies" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchEqualHierarchies -->
        <test-method status="PASS" signature="shouldMatchDeclaringClass()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchDeclaringClass" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchDeclaringClass -->
        <test-method status="PASS" signature="shouldMatchGreaterSourceHierarchy()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchGreaterSourceHierarchy" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchGreaterSourceHierarchy -->
        <test-method status="PASS" signature="shouldMatchGreaterDestinationHierarchy()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchGreaterDestinationHierarchy" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchGreaterDestinationHierarchy -->
        <test-method status="PASS" signature="shouldMatchInverted()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchInverted" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchInverted -->
        <test-method status="PASS" signature="shouldMatchInvertedClass()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchInvertedClass" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchInvertedClass -->
        <test-method status="PASS" signature="shouldMatchInvertedDeclaringClass()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchInvertedDeclaringClass" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchInvertedDeclaringClass -->
        <test-method status="PASS" signature="shouldMatchWithSameNameAndClassName()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchWithSameNameAndClassName" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchWithSameNameAndClassName -->
        <test-method status="PASS" signature="shouldMatchSameTokenTwice()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchSameTokenTwice" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchSameTokenTwice -->
        <test-method status="PASS" signature="shouldMatchSplitTokens()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldMatchSplitTokens" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchSplitTokens -->
        <test-method status="PASS" signature="shouldNotMatchClassAlone()[pri:0, instance:org.modelmapper.convention.InexactMatchingStrategyTest@45d64d27]" test-instance-name="" name="shouldNotMatchClassAlone" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotMatchClassAlone -->
      </class> <!-- org.modelmapper.convention.InexactMatchingStrategyTest -->
      <class name="org.modelmapper.internal.converter.CollectionConverterTest">
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="init" is-config="true" duration-ms="2" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertArrayToCollection()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="shouldConvertArrayToCollection" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertArrayToCollection -->
        <test-method status="PASS" signature="shouldConvertElementsFromArray()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="shouldConvertElementsFromArray" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertElementsFromArray -->
        <test-method status="PASS" signature="shouldConvertArrayToList()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="shouldConvertArrayToList" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertArrayToList -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertElementsFromList()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="shouldConvertElementsFromList" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertElementsFromList -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertElementsFromModel()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="shouldConvertElementsFromModel" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertElementsFromModel -->
        <test-method status="PASS" signature="shouldConvertListToHashSet()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="shouldConvertListToHashSet" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertListToHashSet -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertListToList()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="shouldConvertListToList" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertListToList -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertListToSet()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="shouldConvertListToSet" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertListToSet -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertListToSortedSet()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="shouldConvertListToSortedSet" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertListToSortedSet -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertPrimitiveArrayToCollection()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="shouldConvertPrimitiveArrayToCollection" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertPrimitiveArrayToCollection -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testMatches()[pri:0, instance:org.modelmapper.internal.converter.CollectionConverterTest@5f780a86]" test-instance-name="" name="testMatches" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMatches -->
      </class> <!-- org.modelmapper.internal.converter.CollectionConverterTest -->
      <class name="org.modelmapper.internal.converter.NumberConverterTest">
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertBigDecimals()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldConvertBigDecimals" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertBigDecimals -->
        <test-method status="PASS" signature="shouldConvertBigIntegers()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldConvertBigIntegers" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertBigIntegers -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertBytes()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldConvertBytes" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertBytes -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertCalendarToLong()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldConvertCalendarToLong" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertCalendarToLong -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertDateToLong()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldConvertDateToLong" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDateToLong -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertDoubles()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldConvertDoubles" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDoubles -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertFloats()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldConvertFloats" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertFloats -->
        <test-method status="PASS" signature="shouldConvertLongs()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldConvertLongs" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertLongs -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertIntegers()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldConvertIntegers" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertIntegers -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertShorts()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldConvertShorts" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertShorts -->
        <test-method status="PASS" signature="shouldConvertXmlGregorianCalendarToLong()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldConvertXmlGregorianCalendarToLong" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertXmlGregorianCalendarToLong -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldFailOnInvalidDestinationType(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldFailOnInvalidDestinationType" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[36]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 36 to java.lang.Object

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 36 to java.lang.Object

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:152)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:66)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.shouldFailOnInvalidDestinationType(NumberConverterTest.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailOnInvalidDestinationType -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldFailOnInvalidDestinationType(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldFailOnInvalidDestinationType" duration-ms="1" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 3 to java.lang.Object

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 3 to java.lang.Object

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:152)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:66)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.shouldFailOnInvalidDestinationType(NumberConverterTest.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailOnInvalidDestinationType -->
        <test-method status="PASS" signature="shouldFailOnInvalidDestinationType(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldFailOnInvalidDestinationType" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[55.0]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 55.0 to java.lang.Object

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 55.0 to java.lang.Object

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:152)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:66)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.shouldFailOnInvalidDestinationType(NumberConverterTest.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailOnInvalidDestinationType -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldFailOnInvalidDestinationType(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldFailOnInvalidDestinationType" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[44]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 44 to java.lang.Object

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 44 to java.lang.Object

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:152)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:66)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.shouldFailOnInvalidDestinationType(NumberConverterTest.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailOnInvalidDestinationType -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldFailOnInvalidDestinationType(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldFailOnInvalidDestinationType" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2345]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 2345 to java.lang.Object

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 2345 to java.lang.Object

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:152)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:66)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.shouldFailOnInvalidDestinationType(NumberConverterTest.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailOnInvalidDestinationType -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldFailOnInvalidDestinationType(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldFailOnInvalidDestinationType" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3454]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 3454 to java.lang.Object

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 3454 to java.lang.Object

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:152)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:66)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.shouldFailOnInvalidDestinationType(NumberConverterTest.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailOnInvalidDestinationType -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldFailOnInvalidDestinationType(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldFailOnInvalidDestinationType" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7773]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 7773 to java.lang.Object

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 7773 to java.lang.Object

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:152)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:66)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.shouldFailOnInvalidDestinationType(NumberConverterTest.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailOnInvalidDestinationType -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldFailOnInvalidDestinationType(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldFailOnInvalidDestinationType" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[664.0]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 664.0 to java.lang.Object

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 664.0 to java.lang.Object

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:152)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:66)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.shouldFailOnInvalidDestinationType(NumberConverterTest.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailOnInvalidDestinationType -->
        <test-method status="PASS" signature="shouldThrowOnMapCalendarToInteger()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldThrowOnMapCalendarToInteger" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping java.util.GregorianCalendar[time=1527319855133,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="Europe/Paris",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2018,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=146,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=30,SECOND=55,MILLISECOND=133,ZONE_OFFSET=3600000,DST_OFFSET=3600000] to java.lang.Integer

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping java.util.GregorianCalendar[time=1527319855133,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="Europe/Paris",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2018,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=146,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=30,SECOND=55,MILLISECOND=133,ZONE_OFFSET=3600000,DST_OFFSET=3600000] to java.lang.Integer

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:181)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:75)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.shouldThrowOnMapCalendarToInteger(NumberConverterTest.java:224)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.NumberFormatException: For input string: "java.util.GregorianCalendar[time=1527319855133,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="Europe/Paris",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2018,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=146,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=30,SECOND=55,MILLISECOND=133,ZONE_OFFSET=3600000,DST_OFFSET=3600000]"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.valueOf(Integer.java:766)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:169)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnMapCalendarToInteger -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowOnMapDateToInteger()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldThrowOnMapDateToInteger" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping Sat May 26 09:30:55 CEST 2018 to java.lang.Integer

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping Sat May 26 09:30:55 CEST 2018 to java.lang.Integer

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:181)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:75)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.shouldThrowOnMapDateToInteger(NumberConverterTest.java:232)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.NumberFormatException: For input string: "Sat May 26 09:30:55 CEST 2018"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.valueOf(Integer.java:766)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:169)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnMapDateToInteger -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowOnNotANumber()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="shouldThrowOnNotANumber" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at org.modelmapper.internal.util.Primitives.wrapperFor(Primitives.java:124)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:63)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:46)
	at org.modelmapper.internal.converter.NumberConverterTest.shouldThrowOnNotANumber(NumberConverterTest.java:237)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnNotANumber -->
        <test-method status="PASS" signature="testBooleanToNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testBooleanToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Integer]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBooleanToNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testBooleanToNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testBooleanToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Short]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBooleanToNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testBooleanToNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testBooleanToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Long]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBooleanToNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testBooleanToNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testBooleanToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Byte]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBooleanToNumber -->
        <test-method status="PASS" signature="testBooleanToNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testBooleanToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.math.BigDecimal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBooleanToNumber -->
        <test-method status="PASS" signature="testBooleanToNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testBooleanToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Double]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBooleanToNumber -->
        <test-method status="PASS" signature="testBooleanToNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testBooleanToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Float]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBooleanToNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testBooleanToNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testBooleanToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.math.BigInteger]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBooleanToNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testConvertNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testConvertNumber" duration-ms="1" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Integer]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testConvertNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testConvertNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Short]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertNumber -->
        <test-method status="PASS" signature="testConvertNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testConvertNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Double]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testConvertNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testConvertNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Byte]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testConvertNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testConvertNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Long]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertNumber -->
        <test-method status="PASS" signature="testConvertNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testConvertNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.math.BigDecimal]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testConvertNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testConvertNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Float]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testConvertNumber(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testConvertNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.math.BigInteger]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testInvalidByteAmount()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testInvalidByteAmount" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidByteAmount -->
        <test-method status="PASS" signature="testInvalidFloatAmount()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testInvalidFloatAmount" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidFloatAmount -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testInvalidIntegerAmount()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testInvalidIntegerAmount" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidIntegerAmount -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testMatches()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testMatches" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMatches -->
        <test-method status="PASS" signature="testInvalidShortAmount()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testInvalidShortAmount" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidShortAmount -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testStringToNumber(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testStringToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[36]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 12x to java.lang.Integer

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 12x to java.lang.Integer

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:181)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:75)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.testStringToNumber(NumberConverterTest.java:365)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.NumberFormatException: For input string: "12x"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.valueOf(Integer.java:766)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:169)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testStringToNumber(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testStringToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[55.0]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 55.0 to java.lang.Integer

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 55.0 to java.lang.Integer

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:181)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:75)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.testStringToNumber(NumberConverterTest.java:360)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.NumberFormatException: For input string: "55.0"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.valueOf(Integer.java:766)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:169)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testStringToNumber(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testStringToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[44]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 12x to java.lang.Integer

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 12x to java.lang.Integer

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:181)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:75)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.testStringToNumber(NumberConverterTest.java:365)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.NumberFormatException: For input string: "12x"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.valueOf(Integer.java:766)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:169)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToNumber -->
        <test-method status="PASS" signature="testStringToNumber(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testStringToNumber" duration-ms="1" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 12x to java.lang.Integer

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 12x to java.lang.Integer

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:181)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:75)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.testStringToNumber(NumberConverterTest.java:365)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.NumberFormatException: For input string: "12x"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.valueOf(Integer.java:766)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:169)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testStringToNumber(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testStringToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2345]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 2345 to java.lang.Byte

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 2345 to java.lang.Byte

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:181)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:75)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.testStringToNumber(NumberConverterTest.java:360)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.NumberFormatException: Value out of range. Value:"2345" Radix:10
	at java.lang.Byte.parseByte(Byte.java:151)
	at java.lang.Byte.valueOf(Byte.java:205)
	at java.lang.Byte.valueOf(Byte.java:231)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:165)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testStringToNumber(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testStringToNumber" duration-ms="1" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3454]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 3454 to java.lang.Byte

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 3454 to java.lang.Byte

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:181)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:75)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.testStringToNumber(NumberConverterTest.java:360)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.NumberFormatException: Value out of range. Value:"3454" Radix:10
	at java.lang.Byte.parseByte(Byte.java:151)
	at java.lang.Byte.valueOf(Byte.java:205)
	at java.lang.Byte.valueOf(Byte.java:231)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:165)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToNumber -->
        <test-method status="PASS" signature="testStringToNumber(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testStringToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7773]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 7773 to java.lang.Byte

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 7773 to java.lang.Byte

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:181)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:75)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.testStringToNumber(NumberConverterTest.java:360)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.NumberFormatException: Value out of range. Value:"7773" Radix:10
	at java.lang.Byte.parseByte(Byte.java:151)
	at java.lang.Byte.valueOf(Byte.java:205)
	at java.lang.Byte.valueOf(Byte.java:231)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:165)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToNumber -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testStringToNumber(java.lang.Number)[pri:0, instance:org.modelmapper.internal.converter.NumberConverterTest@1639f93a]" test-instance-name="" name="testStringToNumber" duration-ms="0" started-at="2018-05-26T09:30:55Z" data-provider="numbersProvider" finished-at="2018-05-26T09:30:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[664.0]]>
              </value>
            </param>
          </params>
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 664.0 to java.lang.Integer

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 664.0 to java.lang.Integer

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:181)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:75)
	at org.modelmapper.internal.converter.NumberConverter.convert(NumberConverter.java:57)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.NumberConverterTest.testStringToNumber(NumberConverterTest.java:360)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.NumberFormatException: For input string: "664.0"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.valueOf(Integer.java:766)
	at org.modelmapper.internal.converter.NumberConverter.numberFor(NumberConverter.java:169)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToNumber -->
      </class> <!-- org.modelmapper.internal.converter.NumberConverterTest -->
      <class name="org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mismatched_properties">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mismatched_properties@15e0fe05]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMap()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mismatched_properties@15e0fe05]" test-instance-name="" name="shouldMap" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap -->
        <test-method status="PASS" signature="shouldValidate()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mismatched_properties@15e0fe05]" test-instance-name="" name="shouldValidate" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldValidate -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mismatched_properties@15e0fe05]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mismatched_properties -->
      <class name="org.modelmapper.functional.inherit.TypeMapIncludeTest">
        <test-method status="PASS" signature="shouldFailedDuplicateInclude()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeTest@6d5037a9]" test-instance-name="" name="shouldFailedDuplicateInclude" duration-ms="4" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailedDuplicateInclude -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeTest@6d5037a9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapDependsOnDestType()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeTest@6d5037a9]" test-instance-name="" name="shouldMapDependsOnDestType" duration-ms="4" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapDependsOnDestType -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeTest@6d5037a9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMappingClassSuccess()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeTest@6d5037a9]" test-instance-name="" name="shouldMappingClassSuccess" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMappingClassSuccess -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeTest@6d5037a9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeTest@6d5037a9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMappingInterfaceWithProviderSuccess()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeTest@6d5037a9]" test-instance-name="" name="shouldMappingInterfaceWithProviderSuccess" duration-ms="4" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMappingInterfaceWithProviderSuccess -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeTest@6d5037a9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldNotMappingUndefinedTypeMap()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeTest@6d5037a9]" test-instance-name="" name="shouldNotMappingUndefinedTypeMap" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotMappingUndefinedTypeMap -->
      </class> <!-- org.modelmapper.functional.inherit.TypeMapIncludeTest -->
      <class name="org.modelmapper.convention.NamingConventionsTest">
        <test-method status="PASS" signature="testJavaBeansAccessor()[pri:0, instance:org.modelmapper.convention.NamingConventionsTest@36361ddb]" test-instance-name="" name="testJavaBeansAccessor" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaBeansAccessor -->
        <test-method status="PASS" signature="testJavaBeansMutator()[pri:0, instance:org.modelmapper.convention.NamingConventionsTest@36361ddb]" test-instance-name="" name="testJavaBeansMutator" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaBeansMutator -->
      </class> <!-- org.modelmapper.convention.NamingConventionsTest -->
      <class name="org.modelmapper.functional.config.ImplicitMappingDisabled">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.config.ImplicitMappingDisabled@7063686f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldSkipImplicitMappingWhenDisabled()[pri:0, instance:org.modelmapper.functional.config.ImplicitMappingDisabled@7063686f]" test-instance-name="" name="shouldSkipImplicitMappingWhenDisabled" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipImplicitMappingWhenDisabled -->
      </class> <!-- org.modelmapper.functional.config.ImplicitMappingDisabled -->
      <class name="org.modelmapper.bugs.GC10">
        <test-method status="PASS" signature="shouldSupportMultipleSourceMappings()[pri:0, instance:org.modelmapper.bugs.GC10@396e6d9]" test-instance-name="" name="shouldSupportMultipleSourceMappings" duration-ms="10" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSupportMultipleSourceMappings -->
      </class> <!-- org.modelmapper.bugs.GC10 -->
      <class name="org.modelmapper.bugs.GH267">
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.bugs.GH267@5ff90645]" test-instance-name="" name="setUp" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldPass()[pri:0, instance:org.modelmapper.bugs.GH267@5ff90645]" test-instance-name="" name="shouldPass" duration-ms="3" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPass -->
      </class> <!-- org.modelmapper.bugs.GH267 -->
      <class name="org.modelmapper.bugs.GC12">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GC12@43a51d00]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GC12@43a51d00]" test-instance-name="" name="test" duration-ms="4" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.bugs.GC12 -->
      <class name="org.modelmapper.internal.converter.MapConverterTest">
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.MapConverterTest@53dad875]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertElements()[pri:0, instance:org.modelmapper.internal.converter.MapConverterTest@53dad875]" test-instance-name="" name="shouldConvertElements" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertElements -->
        <test-method status="PASS" signature="shouldConvertElementsFromModel()[pri:0, instance:org.modelmapper.internal.converter.MapConverterTest@53dad875]" test-instance-name="" name="shouldConvertElementsFromModel" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertElementsFromModel -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.MapConverterTest@53dad875]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.MapConverterTest@53dad875]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testMatches()[pri:0, instance:org.modelmapper.internal.converter.MapConverterTest@53dad875]" test-instance-name="" name="testMatches" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMatches -->
      </class> <!-- org.modelmapper.internal.converter.MapConverterTest -->
      <class name="org.modelmapper.bugs.GH30">
        <test-method status="PASS" signature="testMappingWithConstructorCustomPropertyMap()[pri:0, instance:org.modelmapper.bugs.GH30@74aa9c72]" name="testMappingWithConstructorCustomPropertyMap" duration-ms="5" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMappingWithConstructorCustomPropertyMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH30@74aa9c72]" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH30 -->
      <class name="org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="standardMapperShouldAllowImplicitMappingObjectsToCharacters()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="standardMapperShouldAllowImplicitMappingObjectsToCharacters" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- standardMapperShouldAllowImplicitMappingObjectsToCharacters -->
        <test-method status="PASS" signature="standardMapperShouldAllowImplicitMappingObjectsToBooleans()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="standardMapperShouldAllowImplicitMappingObjectsToBooleans" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- standardMapperShouldAllowImplicitMappingObjectsToBooleans -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="standardMapperShouldAllowImplicitMappingObjectsToIntegers()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="standardMapperShouldAllowImplicitMappingObjectsToIntegers" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- standardMapperShouldAllowImplicitMappingObjectsToIntegers -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="strictMapperShouldNotAllowImplicitMappingObjectsToBooleans()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="strictMapperShouldNotAllowImplicitMappingObjectsToBooleans" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- strictMapperShouldNotAllowImplicitMappingObjectsToBooleans -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="standardMapperShouldAllowImplicitMappingObjectsToStrings()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="standardMapperShouldAllowImplicitMappingObjectsToStrings" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- standardMapperShouldAllowImplicitMappingObjectsToStrings -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="strictMapperShouldNotAllowImplicitMappingObjectsToCharacters()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="strictMapperShouldNotAllowImplicitMappingObjectsToCharacters" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- strictMapperShouldNotAllowImplicitMappingObjectsToCharacters -->
        <test-method status="PASS" signature="strictMapperShouldNotAllowImplicitMappingObjectsToIntegers()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="strictMapperShouldNotAllowImplicitMappingObjectsToIntegers" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- strictMapperShouldNotAllowImplicitMappingObjectsToIntegers -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="strictMapperShouldNotAllowImplicitMappingObjectsToStrings()[pri:0, instance:org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest@70331432]" test-instance-name="" name="strictMapperShouldNotAllowImplicitMappingObjectsToStrings" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- strictMapperShouldNotAllowImplicitMappingObjectsToStrings -->
      </class> <!-- org.modelmapper.functional.converter.ImplicitUnknownTypeConversionTest -->
      <class name="org.modelmapper.bugs.GH20">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH20@5d7835a8]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH20@5d7835a8]" test-instance-name="" name="test" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.bugs.GH20 -->
      <class name="org.modelmapper.bugs.GH22">
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH22@736048ed]" test-instance-name="" name="test" duration-ms="2" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH22@736048ed]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH22 -->
      <class name="org.modelmapper.functional.converter.PreAndPostConverterTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.PreAndPostConverterTest@743c6ce4]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldPostConvertert()[pri:0, instance:org.modelmapper.functional.converter.PreAndPostConverterTest@743c6ce4]" test-instance-name="" name="shouldPostConvertert" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPostConvertert -->
        <test-method status="PASS" signature="shouldPreConvertert()[pri:0, instance:org.modelmapper.functional.converter.PreAndPostConverterTest@743c6ce4]" test-instance-name="" name="shouldPreConvertert" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPreConvertert -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.PreAndPostConverterTest@743c6ce4]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.converter.PreAndPostConverterTest -->
      <class name="org.modelmapper.bugs.GH23">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH23@3a5c2626]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="testWithLooseMatchingStrategy()[pri:0, instance:org.modelmapper.bugs.GH23@3a5c2626]" test-instance-name="" name="testWithLooseMatchingStrategy" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithLooseMatchingStrategy -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH23@3a5c2626]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="testWithStandardMatchingStartegy()[pri:0, instance:org.modelmapper.bugs.GH23@3a5c2626]" test-instance-name="" name="testWithStandardMatchingStartegy" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithStandardMatchingStartegy -->
      </class> <!-- org.modelmapper.bugs.GH23 -->
      <class name="org.modelmapper.internal.util.PrimitivesTest">
        <test-method status="PASS" signature="testDefaultValue()[pri:0, instance:org.modelmapper.internal.util.PrimitivesTest@b2f4ece]" test-instance-name="" name="testDefaultValue" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValue -->
        <test-method status="PASS" signature="testIsPrimitive()[pri:0, instance:org.modelmapper.internal.util.PrimitivesTest@b2f4ece]" test-instance-name="" name="testIsPrimitive" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitive -->
      </class> <!-- org.modelmapper.internal.util.PrimitivesTest -->
      <class name="org.modelmapper.bugs.GH143">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH143@7e736350]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="testMapping()[pri:0, instance:org.modelmapper.bugs.GH143@7e736350]" test-instance-name="" name="testMapping" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMapping -->
      </class> <!-- org.modelmapper.bugs.GH143 -->
      <class name="org.modelmapper.convention.NameTransformersTest">
        <test-method status="PASS" signature="testJavaBeansAccessor()[pri:0, instance:org.modelmapper.convention.NameTransformersTest@a33b4e3]" test-instance-name="" name="testJavaBeansAccessor" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaBeansAccessor -->
        <test-method status="PASS" signature="testJavaBeansMutator()[pri:0, instance:org.modelmapper.convention.NameTransformersTest@a33b4e3]" test-instance-name="" name="testJavaBeansMutator" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaBeansMutator -->
      </class> <!-- org.modelmapper.convention.NameTransformersTest -->
      <class name="org.modelmapper.functional.conditional.ConditionalTest">
        <test-method status="PASS" signature="propertyMapConditionShouldOverrideTypeMapPropertyCondition()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalTest@3730ab42]" test-instance-name="" name="propertyMapConditionShouldOverrideTypeMapPropertyCondition" duration-ms="5" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- propertyMapConditionShouldOverrideTypeMapPropertyCondition -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalTest@3730ab42]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalTest@3730ab42]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldUseTypeMapPropertyCondition()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalTest@3730ab42]" test-instance-name="" name="shouldUseTypeMapPropertyCondition" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseTypeMapPropertyCondition -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalTest@3730ab42]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldUseTypeMapCondition()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalTest@3730ab42]" test-instance-name="" name="shouldUseTypeMapCondition" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseTypeMapCondition -->
      </class> <!-- org.modelmapper.functional.conditional.ConditionalTest -->
      <class name="org.modelmapper.functional.iterable.DifferentTypedElements">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.DifferentTypedElements@47ad69f7]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldPerformCollectionConversion()[pri:0, instance:org.modelmapper.functional.iterable.DifferentTypedElements@47ad69f7]" test-instance-name="" name="shouldPerformCollectionConversion" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPerformCollectionConversion -->
      </class> <!-- org.modelmapper.functional.iterable.DifferentTypedElements -->
      <class name="org.modelmapper.bugs.GH26">
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH26@5acc9fdf]" test-instance-name="" name="test" duration-ms="13" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH26@5acc9fdf]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH26 -->
      <class name="org.modelmapper.convention.StrictMatchingStrategyTest">
        <test-method status="PASS" signature="shouldMatchExactTokens()[pri:0, instance:org.modelmapper.convention.StrictMatchingStrategyTest@4d6ee47]" test-instance-name="" name="shouldMatchExactTokens" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchExactTokens -->
        <test-method status="PASS" signature="shouldMatchExactTokensWithDuplicates()[pri:0, instance:org.modelmapper.convention.StrictMatchingStrategyTest@4d6ee47]" test-instance-name="" name="shouldMatchExactTokensWithDuplicates" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchExactTokensWithDuplicates -->
      </class> <!-- org.modelmapper.convention.StrictMatchingStrategyTest -->
      <class name="org.modelmapper.bugs.GH27">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH27@2c768ada]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH27@2c768ada]" test-instance-name="" name="test" duration-ms="8" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.bugs.GH27 -->
      <class name="org.modelmapper.functional.JitTypeMap">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.JitTypeMap@50a691d3]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMap()[pri:0, instance:org.modelmapper.functional.JitTypeMap@50a691d3]" test-instance-name="" name="shouldMap" duration-ms="5" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap -->
      </class> <!-- org.modelmapper.functional.JitTypeMap -->
      <class name="org.modelmapper.functional.inherit.ValueReaderInheritanceTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.inherit.ValueReaderInheritanceTest@6a282fdd]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.inherit.ValueReaderInheritanceTest@6a282fdd]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldInclude()[pri:0, instance:org.modelmapper.functional.inherit.ValueReaderInheritanceTest@6a282fdd]" test-instance-name="" name="shouldInclude" duration-ms="9" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldInclude -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.inherit.ValueReaderInheritanceTest@6a282fdd]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.inherit.ValueReaderInheritanceTest@6a282fdd]" test-instance-name="" name="setUp" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldNotMapIfNotInclude()[pri:0, instance:org.modelmapper.functional.inherit.ValueReaderInheritanceTest@6a282fdd]" test-instance-name="" name="shouldNotMapIfNotInclude" duration-ms="7" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotMapIfNotInclude -->
      </class> <!-- org.modelmapper.functional.inherit.ValueReaderInheritanceTest -->
      <class name="org.modelmapper.functional.disambiguation.SameNames">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.disambiguation.SameNames@7275c74b]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapWithUnverifiedDest()[pri:0, instance:org.modelmapper.functional.disambiguation.SameNames@7275c74b]" test-instance-name="" name="shouldMapWithUnverifiedDest" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapWithUnverifiedDest -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.disambiguation.SameNames@7275c74b]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapWithUnverifiedSource()[pri:0, instance:org.modelmapper.functional.disambiguation.SameNames@7275c74b]" test-instance-name="" name="shouldMapWithUnverifiedSource" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapWithUnverifiedSource -->
      </class> <!-- org.modelmapper.functional.disambiguation.SameNames -->
      <class name="org.modelmapper.functional.converter.ConverterTest1">
        <test-method status="PASS" signature="propertyMapConverterShouldOverrideTypeMapPropertyConverter()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" test-instance-name="" name="propertyMapConverterShouldOverrideTypeMapPropertyConverter" duration-ms="5" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- propertyMapConverterShouldOverrideTypeMapPropertyConverter -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldUseConverterWhenMappingDestinationFieldWithoutSource()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" test-instance-name="" name="shouldUseConverterWhenMappingDestinationFieldWithoutSource" duration-ms="6" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseConverterWhenMappingDestinationFieldWithoutSource -->
        <test-method status="PASS" signature="shouldUseConverterWhenMappingFields()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" test-instance-name="" name="shouldUseConverterWhenMappingFields" duration-ms="7" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseConverterWhenMappingFields -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldUseTypeMapConverter()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" test-instance-name="" name="shouldUseTypeMapConverter" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseTypeMapConverter -->
        <test-method status="PASS" signature="shouldUseTypeMapPropertyConverter()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" test-instance-name="" name="shouldUseTypeMapPropertyConverter" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseTypeMapPropertyConverter -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ConverterTest1@3bbf9027]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.converter.ConverterTest1 -->
      <class name="org.modelmapper.functional.converter.CustomConversion$When_using_converter">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter@108d55c4]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldSkipUnusedSourceMembers()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter@108d55c4]" test-instance-name="" name="shouldSkipUnusedSourceMembers" duration-ms="6" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipUnusedSourceMembers -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter@108d55c4]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldUseConverter()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter@108d55c4]" test-instance-name="" name="shouldUseConverter" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseConverter -->
      </class> <!-- org.modelmapper.functional.converter.CustomConversion$When_using_converter -->
      <class name="org.modelmapper.internal.valueaccess.MultiMapValueReaderTest">
        <test-method status="PASS" signature="shouldMapFromMultiMap()[pri:0, instance:org.modelmapper.internal.valueaccess.MultiMapValueReaderTest@34819867]" test-instance-name="" name="shouldMapFromMultiMap" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapFromMultiMap -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.modelmapper.internal.valueaccess.MultiMapValueReaderTest@34819867]" test-instance-name="" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
      </class> <!-- org.modelmapper.internal.valueaccess.MultiMapValueReaderTest -->
      <class name="org.modelmapper.functional.stringmapping.StringMapping">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.stringmapping.StringMapping@557eb543]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapFromSourceStrings()[pri:0, instance:org.modelmapper.functional.stringmapping.StringMapping@557eb543]" test-instance-name="" name="shouldMapFromSourceStrings" duration-ms="4" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapFromSourceStrings -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.stringmapping.StringMapping@557eb543]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldThrowOnInvalidSourcePath()[pri:0, instance:org.modelmapper.functional.stringmapping.StringMapping@557eb543]" test-instance-name="" name="shouldThrowOnInvalidSourcePath" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <exception class="org.modelmapper.ConfigurationException">
            <message>
              <![CDATA[ModelMapper configuration errors:

1) The source path customer.foo.boo is invalid: org.modelmapper.functional.stringmapping.StringMapping$Customer.foo cannot be resolved.

2) The source path bar.baz is invalid: org.modelmapper.functional.stringmapping.StringMapping$Order.bar cannot be resolved.

2 errors]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.ConfigurationException: ModelMapper configuration errors:

1) The source path customer.foo.boo is invalid: org.modelmapper.functional.stringmapping.StringMapping$Customer.foo cannot be resolved.

2) The source path bar.baz is invalid: org.modelmapper.functional.stringmapping.StringMapping$Order.bar cannot be resolved.

2 errors
	at org.modelmapper.internal.Errors.throwConfigurationExceptionIfErrorsExist(Errors.java:241)
	at org.modelmapper.internal.ExplicitMappingBuilder.build(ExplicitMappingBuilder.java:211)
	at org.modelmapper.internal.TypeMapImpl.addMappings(TypeMapImpl.java:89)
	at org.modelmapper.internal.TypeMapStore.getOrCreate(TypeMapStore.java:112)
	at org.modelmapper.ModelMapper.addMappings(ModelMapper.java:94)
	at org.modelmapper.functional.stringmapping.StringMapping.shouldThrowOnInvalidSourcePath(StringMapping.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.ConfigurationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnInvalidSourcePath -->
      </class> <!-- org.modelmapper.functional.stringmapping.StringMapping -->
      <class name="org.modelmapper.ModelMapperTest">
        <test-method status="PASS" signature="shouldCreateTypeMap()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="shouldCreateTypeMap" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCreateTypeMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldCreateTypeMapForConfig()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="shouldCreateTypeMapForConfig" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCreateTypeMapForConfig -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldGetTypeMap()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="shouldGetTypeMap" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetTypeMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldLoadWhenMemberMapIsValid()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="shouldLoadWhenMemberMapIsValid" duration-ms="4" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldLoadWhenMemberMapIsValid -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldRegisterMapper()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="shouldRegisterMapper" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRegisterMapper -->
        <test-method status="PASS" signature="shouldThrowOnValidateWhenDestinationMembersMissing()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="shouldThrowOnValidateWhenDestinationMembersMissing" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnValidateWhenDestinationMembersMissing -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldTypeMapCreateOrGet()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="shouldTypeMapCreateOrGet" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldTypeMapCreateOrGet -->
        <test-method status="PASS" signature="shouldValidateWhenAllDestinationMembersMapped()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="shouldValidateWhenAllDestinationMembersMapped" duration-ms="5" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldValidateWhenAllDestinationMembersMapped -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.ModelMapperTest@164a62bf]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.ModelMapperTest -->
      <class name="org.modelmapper.functional.FieldMappingTest">
        <test-method status="PASS" signature="shouldMapConstantToDestinationField()[pri:0, instance:org.modelmapper.functional.FieldMappingTest@c3177d5]" test-instance-name="" name="shouldMapConstantToDestinationField" duration-ms="6" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapConstantToDestinationField -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.modelmapper.functional.FieldMappingTest@c3177d5]" test-instance-name="" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.modelmapper.functional.FieldMappingTest@c3177d5]" test-instance-name="" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="shouldMapFieldReferencesFromPropertyMap()[pri:0, instance:org.modelmapper.functional.FieldMappingTest@c3177d5]" test-instance-name="" name="shouldMapFieldReferencesFromPropertyMap" duration-ms="15" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapFieldReferencesFromPropertyMap -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.modelmapper.functional.FieldMappingTest@c3177d5]" test-instance-name="" name="beforeMethod" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="shouldMapFieldsWithSubclass()[pri:0, instance:org.modelmapper.functional.FieldMappingTest@c3177d5]" test-instance-name="" name="shouldMapFieldsWithSubclass" duration-ms="6" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapFieldsWithSubclass -->
      </class> <!-- org.modelmapper.functional.FieldMappingTest -->
      <class name="org.modelmapper.functional.loosematching.LooseMappingTest2">
        <test-method status="PASS" signature="assertMatches()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest2@3b90a30a]" test-instance-name="" name="assertMatches" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- assertMatches -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest2@3b90a30a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldValidate()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest2@3b90a30a]" test-instance-name="" name="shouldValidate" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldValidate -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest2@3b90a30a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.loosematching.LooseMappingTest2 -->
      <class name="org.modelmapper.bugs.GC22">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GC22@47b179d7]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GC22@47b179d7]" test-instance-name="" name="test" duration-ms="7" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.bugs.GC22 -->
      <class name="org.modelmapper.bugs.GH40">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH40@c1fca2a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH40@c1fca2a]" test-instance-name="" name="test" duration-ms="2" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.bugs.GH40 -->
      <class name="org.modelmapper.functional.MismatchedProperties">
        <test-method status="PASS" signature="shouldMapMismatchedProperties()[pri:0, instance:org.modelmapper.functional.MismatchedProperties@4ca8dbfa]" test-instance-name="" name="shouldMapMismatchedProperties" duration-ms="5" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapMismatchedProperties -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.MismatchedProperties@4ca8dbfa]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.MismatchedProperties -->
      <class name="org.modelmapper.functional.circular.CircularDependencies6">
        <test-method status="PASS" signature="shouldMapAuthor()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies6@3fbfbf84]" test-instance-name="" name="shouldMapAuthor" duration-ms="2" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapAuthor -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies6@3fbfbf84]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies6@3fbfbf84]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapBooks()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies6@3fbfbf84]" test-instance-name="" name="shouldMapBooks" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapBooks -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies6@3fbfbf84]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapLibrary()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies6@3fbfbf84]" test-instance-name="" name="shouldMapLibrary" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapLibrary -->
      </class> <!-- org.modelmapper.functional.circular.CircularDependencies6 -->
      <class name="org.modelmapper.bugs.GH31">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH31@3874b815]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH31@3874b815]" test-instance-name="" name="test" duration-ms="26" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.bugs.GH31 -->
      <class name="org.modelmapper.functional.EnumConversion">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.EnumConversion@71f96dfb]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldConvertFromEnumToString()[pri:0, instance:org.modelmapper.functional.EnumConversion@71f96dfb]" test-instance-name="" name="shouldConvertFromEnumToString" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertFromEnumToString -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.EnumConversion@71f96dfb]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldConvertFromStringToEnum()[pri:0, instance:org.modelmapper.functional.EnumConversion@71f96dfb]" test-instance-name="" name="shouldConvertFromStringToEnum" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertFromStringToEnum -->
      </class> <!-- org.modelmapper.functional.EnumConversion -->
      <class name="org.modelmapper.functional.PropertyMappingTest">
        <test-method status="PASS" signature="shouldThrowWhenUsingNullCondition()[pri:0, instance:org.modelmapper.functional.PropertyMappingTest@69fa8e76]" test-instance-name="" name="shouldThrowWhenUsingNullCondition" duration-ms="4" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <exception class="org.modelmapper.ConfigurationException">
            <message>
              <![CDATA[ModelMapper configuration errors:

1) The condition cannot be null

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.ConfigurationException: ModelMapper configuration errors:

1) The condition cannot be null

1 error
	at org.modelmapper.internal.Errors.throwConfigurationExceptionIfErrorsExist(Errors.java:241)
	at org.modelmapper.internal.ExplicitMappingBuilder.build(ExplicitMappingBuilder.java:211)
	at org.modelmapper.internal.TypeMapImpl.addMappings(TypeMapImpl.java:89)
	at org.modelmapper.internal.TypeMapStore.getOrCreate(TypeMapStore.java:112)
	at org.modelmapper.ModelMapper.addMappings(ModelMapper.java:94)
	at org.modelmapper.functional.PropertyMappingTest.shouldThrowWhenUsingNullCondition(PropertyMappingTest.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.ConfigurationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenUsingNullCondition -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.PropertyMappingTest@69fa8e76]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.PropertyMappingTest@69fa8e76]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldThrowWhenUsingNullConverter()[pri:0, instance:org.modelmapper.functional.PropertyMappingTest@69fa8e76]" test-instance-name="" name="shouldThrowWhenUsingNullConverter" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <exception class="org.modelmapper.ConfigurationException">
            <message>
              <![CDATA[ModelMapper configuration errors:

1) The converter cannot be null

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.ConfigurationException: ModelMapper configuration errors:

1) The converter cannot be null

1 error
	at org.modelmapper.internal.Errors.throwConfigurationExceptionIfErrorsExist(Errors.java:241)
	at org.modelmapper.internal.ExplicitMappingBuilder.build(ExplicitMappingBuilder.java:211)
	at org.modelmapper.internal.TypeMapImpl.addMappings(TypeMapImpl.java:89)
	at org.modelmapper.internal.TypeMapStore.getOrCreate(TypeMapStore.java:112)
	at org.modelmapper.ModelMapper.addMappings(ModelMapper.java:94)
	at org.modelmapper.functional.PropertyMappingTest.shouldThrowWhenUsingNullConverter(PropertyMappingTest.java:20)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.ConfigurationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenUsingNullConverter -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.PropertyMappingTest@69fa8e76]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldThrowWhenUsingNullProvider()[pri:0, instance:org.modelmapper.functional.PropertyMappingTest@69fa8e76]" test-instance-name="" name="shouldThrowWhenUsingNullProvider" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <exception class="org.modelmapper.ConfigurationException">
            <message>
              <![CDATA[ModelMapper configuration errors:

1) The provider cannot be null

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.ConfigurationException: ModelMapper configuration errors:

1) The provider cannot be null

1 error
	at org.modelmapper.internal.Errors.throwConfigurationExceptionIfErrorsExist(Errors.java:241)
	at org.modelmapper.internal.ExplicitMappingBuilder.build(ExplicitMappingBuilder.java:211)
	at org.modelmapper.internal.TypeMapImpl.addMappings(TypeMapImpl.java:89)
	at org.modelmapper.internal.TypeMapStore.getOrCreate(TypeMapStore.java:112)
	at org.modelmapper.ModelMapper.addMappings(ModelMapper.java:94)
	at org.modelmapper.functional.PropertyMappingTest.shouldThrowWhenUsingNullProvider(PropertyMappingTest.java:30)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.ConfigurationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenUsingNullProvider -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.PropertyMappingTest@69fa8e76]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldThrowWhenUsingNullSource()[pri:0, instance:org.modelmapper.functional.PropertyMappingTest@69fa8e76]" test-instance-name="" name="shouldThrowWhenUsingNullSource" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <exception class="org.modelmapper.ConfigurationException">
            <message>
              <![CDATA[ModelMapper configuration errors:

1) The sourcePropertyPath cannot be null

2) Failed to configure mappings

2 errors]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.ConfigurationException: ModelMapper configuration errors:

1) The sourcePropertyPath cannot be null

2) Failed to configure mappings

2 errors
	at org.modelmapper.internal.Errors.throwConfigurationExceptionIfErrorsExist(Errors.java:241)
	at org.modelmapper.internal.ExplicitMappingBuilder.build(ExplicitMappingBuilder.java:211)
	at org.modelmapper.internal.TypeMapImpl.addMappings(TypeMapImpl.java:89)
	at org.modelmapper.internal.TypeMapStore.getOrCreate(TypeMapStore.java:112)
	at org.modelmapper.ModelMapper.addMappings(ModelMapper.java:94)
	at org.modelmapper.functional.PropertyMappingTest.shouldThrowWhenUsingNullSource(PropertyMappingTest.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.NullPointerException
	at java.util.regex.Matcher.getTextLength(Matcher.java:1283)
	at java.util.regex.Matcher.reset(Matcher.java:309)
	at java.util.regex.Matcher.<init>(Matcher.java:229)
	at java.util.regex.Pattern.matcher(Pattern.java:1093)
	at java.util.regex.Pattern.split(Pattern.java:1206)
	at java.util.regex.Pattern.split(Pattern.java:1273)
	at org.modelmapper.internal.ExplicitMappingBuilder.source(ExplicitMappingBuilder.java:138)
	at org.modelmapper.PropertyMap.source(PropertyMap.java:328)
	at org.modelmapper.functional.PropertyMappingTest$4.configure(PropertyMappingTest.java:53)
	at org.modelmapper.PropertyMap.configure(PropertyMap.java:385)
	at sun.reflect.GeneratedMethodAccessor19.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.modelmapper.internal.ExplicitMappingBuilder.build(ExplicitMappingBuilder.java:194)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.ConfigurationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenUsingNullSource -->
      </class> <!-- org.modelmapper.functional.PropertyMappingTest -->
      <class name="org.modelmapper.functional.circular.CircularDependencies7">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies7@573284a5]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMap()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies7@573284a5]" test-instance-name="" name="shouldMap" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap -->
      </class> <!-- org.modelmapper.functional.circular.CircularDependencies7 -->
      <class name="org.modelmapper.functional.circular.CircularDependencies2">
        <test-method status="PASS" signature="shouldAllowSkippedCircularReference()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" test-instance-name="" name="shouldAllowSkippedCircularReference" duration-ms="333" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAllowSkippedCircularReference -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldAllowSkippedCircularReferenceForInnerProperty()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" test-instance-name="" name="shouldAllowSkippedCircularReferenceForInnerProperty" duration-ms="15" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAllowSkippedCircularReferenceForInnerProperty -->
        <test-method status="PASS" signature="shouldMapCircularReferences()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" test-instance-name="" name="shouldMapCircularReferences" duration-ms="10" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapCircularReferences -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapGraphEdges()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" test-instance-name="" name="shouldMapGraphEdges" duration-ms="5" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapGraphEdges -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies2@63716833]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.circular.CircularDependencies2 -->
      <class name="org.modelmapper.functional.merging.MergingWithConverter">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.merging.MergingWithConverter@479f2dc2]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.functional.merging.MergingWithConverter@479f2dc2]" test-instance-name="" name="test" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.functional.merging.MergingWithConverter -->
      <class name="org.modelmapper.functional.circular.CircularDependencies3">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies3@23f72d88]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapCircularlReferences()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies3@23f72d88]" test-instance-name="" name="shouldMapCircularlReferences" duration-ms="3" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapCircularlReferences -->
      </class> <!-- org.modelmapper.functional.circular.CircularDependencies3 -->
      <class name="org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldAddMapping()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="shouldAddMapping" duration-ms="8" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMapping -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldAddMappingWithCondition()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="shouldAddMappingWithCondition" duration-ms="7" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMappingWithCondition -->
        <test-method status="PASS" signature="shouldAddMappingWithConverter()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="shouldAddMappingWithConverter" duration-ms="6" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMappingWithConverter -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldAddMappingWithSkip()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="shouldAddMappingWithSkip" duration-ms="4" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMappingWithSkip -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldAddMappings()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest@35342d2f]" test-instance-name="" name="shouldAddMappings" duration-ms="6" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMappings -->
      </class> <!-- org.modelmapper.functional.lambda.TypeMapLambdaMultipleFieldsTest -->
      <class name="org.modelmapper.bugs.GC19">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GC19@36b310aa]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GC19@36b310aa]" test-instance-name="" name="test" duration-ms="4" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.bugs.GC19 -->
      <class name="org.modelmapper.functional.circular.CircularDependencies4">
        <test-method status="PASS" signature="shouldNotThrowOnMatchingCircularReference()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies4@7308ffff]" test-instance-name="" name="shouldNotThrowOnMatchingCircularReference" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotThrowOnMatchingCircularReference -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies4@7308ffff]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.circular.CircularDependencies4 -->
      <class name="org.modelmapper.bugs.GH37">
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH37@d74bac4]" test-instance-name="" name="test" duration-ms="5" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH37@d74bac4]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH37 -->
      <class name="org.modelmapper.functional.circular.CircularDependencies5">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies5@6601cc93]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapHouses()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies5@6601cc93]" test-instance-name="" name="shouldMapHouses" duration-ms="2" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapHouses -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies5@6601cc93]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapStreet()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies5@6601cc93]" test-instance-name="" name="shouldMapStreet" duration-ms="2" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapStreet -->
        <test-method status="PASS" signature="shouldMapTowns()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies5@6601cc93]" test-instance-name="" name="shouldMapTowns" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapTowns -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies5@6601cc93]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.circular.CircularDependencies5 -->
      <class name="org.modelmapper.bugs.GH38">
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH38@95bb2a2]" test-instance-name="" name="test" duration-ms="8" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH38@95bb2a2]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH38 -->
      <class name="org.modelmapper.bugs.GH39">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH39@25da615a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldIgnoreProxyInvocationsWhileInConstructor()[pri:0, instance:org.modelmapper.bugs.GH39@25da615a]" test-instance-name="" name="shouldIgnoreProxyInvocationsWhileInConstructor" duration-ms="4" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldIgnoreProxyInvocationsWhileInConstructor -->
      </class> <!-- org.modelmapper.bugs.GH39 -->
      <class name="org.modelmapper.functional.shading.ConditionalShading">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.shading.ConditionalShading@bdd2027]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldConditionallyMap()[pri:0, instance:org.modelmapper.functional.shading.ConditionalShading@bdd2027]" test-instance-name="" name="shouldConditionallyMap" duration-ms="7" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConditionallyMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.shading.ConditionalShading@bdd2027]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldShadeAllProperties()[pri:0, instance:org.modelmapper.functional.shading.ConditionalShading@bdd2027]" test-instance-name="" name="shouldShadeAllProperties" duration-ms="10" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldShadeAllProperties -->
        <test-method status="PASS" signature="shouldShadeSomeProperties()[pri:0, instance:org.modelmapper.functional.shading.ConditionalShading@bdd2027]" test-instance-name="" name="shouldShadeSomeProperties" duration-ms="15" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldShadeSomeProperties -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.shading.ConditionalShading@bdd2027]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.shading.ConditionalShading -->
      <class name="org.modelmapper.functional.circular.CircularDependencies1">
        <test-method status="PASS" signature="shouldMap1LevelCircularReference()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" test-instance-name="" name="shouldMap1LevelCircularReference" duration-ms="5" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap1LevelCircularReference -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMap2LevelCircularReference()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" test-instance-name="" name="shouldMap2LevelCircularReference" duration-ms="2" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap2LevelCircularReference -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapHierarchyOfHomoReferences()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" test-instance-name="" name="shouldMapHierarchyOfHomoReferences" duration-ms="3" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapHierarchyOfHomoReferences -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapLengthyCircularReferenceWithHeteroTypes()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" test-instance-name="" name="shouldMapLengthyCircularReferenceWithHeteroTypes" duration-ms="4" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapLengthyCircularReferenceWithHeteroTypes -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapLengthyCircularReferenceWithHomoTypes()[pri:0, instance:org.modelmapper.functional.circular.CircularDependencies1@54d901aa]" test-instance-name="" name="shouldMapLengthyCircularReferenceWithHomoTypes" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapLengthyCircularReferenceWithHomoTypes -->
      </class> <!-- org.modelmapper.functional.circular.CircularDependencies1 -->
      <class name="org.modelmapper.functional.disambiguation.DisambiguationTest2">
        <test-method status="PASS" signature="shouldDisambiguate()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest2@19058533]" test-instance-name="" name="shouldDisambiguate" duration-ms="2" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisambiguate -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest2@19058533]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest2@19058533]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldDisambiguateWithLooseMatchingStrategy()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest2@19058533]" test-instance-name="" name="shouldDisambiguateWithLooseMatchingStrategy" duration-ms="2" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisambiguateWithLooseMatchingStrategy -->
      </class> <!-- org.modelmapper.functional.disambiguation.DisambiguationTest2 -->
      <class name="org.modelmapper.functional.disambiguation.DisambiguationTest1">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest1@49a26d19]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldDisambiguate()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest1@49a26d19]" test-instance-name="" name="shouldDisambiguate" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisambiguate -->
      </class> <!-- org.modelmapper.functional.disambiguation.DisambiguationTest1 -->
      <class name="org.modelmapper.functional.enums.EnumSetMappingTest">
        <test-method status="PASS" signature="testEnumSetAsEmpty()[pri:0, instance:org.modelmapper.functional.enums.EnumSetMappingTest@45667d98]" test-instance-name="" name="testEnumSetAsEmpty" duration-ms="47" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumSetAsEmpty -->
        <test-method status="PASS" signature="testEnumSetWithValues()[pri:0, instance:org.modelmapper.functional.enums.EnumSetMappingTest@45667d98]" test-instance-name="" name="testEnumSetWithValues" duration-ms="36" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumSetWithValues -->
      </class> <!-- org.modelmapper.functional.enums.EnumSetMappingTest -->
      <class name="org.modelmapper.functional.shading.ConverterShading">
        <test-method status="PASS" signature="shouldShadeAllProperties()[pri:0, instance:org.modelmapper.functional.shading.ConverterShading@32f0c7f8]" test-instance-name="" name="shouldShadeAllProperties" duration-ms="9" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldShadeAllProperties -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.shading.ConverterShading@32f0c7f8]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.shading.ConverterShading@32f0c7f8]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldShadeSomeProperties()[pri:0, instance:org.modelmapper.functional.shading.ConverterShading@32f0c7f8]" test-instance-name="" name="shouldShadeSomeProperties" duration-ms="11" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldShadeSomeProperties -->
      </class> <!-- org.modelmapper.functional.shading.ConverterShading -->
      <class name="org.modelmapper.bugs.GH249">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH249@783115d9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMap()[pri:0, instance:org.modelmapper.bugs.GH249@783115d9]" test-instance-name="" name="shouldMap" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.bugs.GH249@783115d9]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.bugs.GH249@783115d9]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH249@783115d9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapExistDestination()[pri:0, instance:org.modelmapper.bugs.GH249@783115d9]" test-instance-name="" name="shouldMapExistDestination" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapExistDestination -->
      </class> <!-- org.modelmapper.bugs.GH249 -->
      <class name="org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_deep_model">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_deep_model@28fd3dc1]" test-instance-name="" name="initContext" is-config="true" duration-ms="7" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMap()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_deep_model@28fd3dc1]" test-instance-name="" name="shouldMap" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap -->
      </class> <!-- org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_deep_model -->
      <class name="org.modelmapper.bugs.GH129">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH129@2e23c180]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldConvertEmptyStringToDefaultValue()[pri:0, instance:org.modelmapper.bugs.GH129@2e23c180]" test-instance-name="" name="shouldConvertEmptyStringToDefaultValue" duration-ms="2" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertEmptyStringToDefaultValue -->
      </class> <!-- org.modelmapper.bugs.GH129 -->
      <class name="org.modelmapper.functional.lambda.TypeMapLambdaTypeConvertTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTypeConvertTest@1cb7936c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTypeConvertTest@1cb7936c]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldAddMappingIntegerToString()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTypeConvertTest@1cb7936c]" test-instance-name="" name="shouldAddMappingIntegerToString" duration-ms="4" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMappingIntegerToString -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTypeConvertTest@1cb7936c]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTypeConvertTest@1cb7936c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldAddMappingStringToInteger()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTypeConvertTest@1cb7936c]" test-instance-name="" name="shouldAddMappingStringToInteger" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMappingStringToInteger -->
      </class> <!-- org.modelmapper.functional.lambda.TypeMapLambdaTypeConvertTest -->
      <class name="org.modelmapper.bugs.GH126">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH126@173f73e7]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="mapWithGenericField()[pri:0, instance:org.modelmapper.bugs.GH126@173f73e7]" test-instance-name="" name="mapWithGenericField" duration-ms="6" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mapWithGenericField -->
      </class> <!-- org.modelmapper.bugs.GH126 -->
      <class name="org.modelmapper.bugs.GH46">
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH46@4b7c4456]" test-instance-name="" name="test" duration-ms="34" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.bugs.GH46 -->
      <class name="org.modelmapper.functional.converter.ConvertNestedObjectTest">
        <test-method status="PASS" signature="convertNested()[pri:0, instance:org.modelmapper.functional.converter.ConvertNestedObjectTest@6ff415ad]" test-instance-name="" name="convertNested" duration-ms="16" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- convertNested -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ConvertNestedObjectTest@6ff415ad]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.converter.ConvertNestedObjectTest -->
      <class name="org.modelmapper.functional.loosematching.LooseMappingTest1">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest1@299270eb]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest1@299270eb]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="assertMatches()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest1@299270eb]" test-instance-name="" name="assertMatches" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- assertMatches -->
        <test-method status="PASS" signature="shouldValidate()[pri:0, instance:org.modelmapper.functional.loosematching.LooseMappingTest1@299270eb]" test-instance-name="" name="shouldValidate" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldValidate -->
      </class> <!-- org.modelmapper.functional.loosematching.LooseMappingTest1 -->
      <class name="org.modelmapper.bugs.GH47">
        <test-method status="PASS" signature="shouldMapPropertyMappedTypes()[pri:0, instance:org.modelmapper.bugs.GH47@c6da8bb]" test-instance-name="" name="shouldMapPropertyMappedTypes" duration-ms="10" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapPropertyMappedTypes -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH47@c6da8bb]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH47 -->
      <class name="org.modelmapper.internal.valueaccess.MapValueReaderTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.internal.valueaccess.MapValueReaderTest@118102ee]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapAnotherMapToBean()[pri:0, instance:org.modelmapper.internal.valueaccess.MapValueReaderTest@118102ee]" test-instance-name="" name="shouldMapAnotherMapToBean" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapAnotherMapToBean -->
        <test-method status="PASS" signature="shouldMapMapToBean()[pri:0, instance:org.modelmapper.internal.valueaccess.MapValueReaderTest@118102ee]" test-instance-name="" name="shouldMapMapToBean" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapMapToBean -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.internal.valueaccess.MapValueReaderTest@118102ee]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapNullValue()[pri:0, instance:org.modelmapper.internal.valueaccess.MapValueReaderTest@118102ee]" test-instance-name="" name="shouldMapNullValue" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapNullValue -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.internal.valueaccess.MapValueReaderTest@118102ee]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.internal.valueaccess.MapValueReaderTest -->
      <class name="org.modelmapper.internal.TypeMapImplTest">
        <test-method status="PASS" signature="shouldSortMappings()[pri:0, instance:org.modelmapper.internal.TypeMapImplTest@4f67e3df]" test-instance-name="" name="shouldSortMappings" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSortMappings -->
        <test-method status="PASS" signature="shouldThrowWhenDestinationTypeIsEnum()[pri:0, instance:org.modelmapper.internal.TypeMapImplTest@4f67e3df]" test-instance-name="" name="shouldThrowWhenDestinationTypeIsEnum" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenDestinationTypeIsEnum -->
        <test-method status="PASS" signature="shouldThrowWhenSourceTypeIsEnum()[pri:0, instance:org.modelmapper.internal.TypeMapImplTest@4f67e3df]" test-instance-name="" name="shouldThrowWhenSourceTypeIsEnum" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenSourceTypeIsEnum -->
      </class> <!-- org.modelmapper.internal.TypeMapImplTest -->
      <class name="org.modelmapper.functional.inherit.TypeMapInheritanceDeepTypeTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapInheritanceDeepTypeTest@629adce]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapInheritanceDeepTypeTest@629adce]" test-instance-name="" name="setUp" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldMapIfInclude()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapInheritanceDeepTypeTest@629adce]" test-instance-name="" name="shouldMapIfInclude" duration-ms="7" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapIfInclude -->
      </class> <!-- org.modelmapper.functional.inherit.TypeMapInheritanceDeepTypeTest -->
      <class name="org.modelmapper.functional.disambiguation.DisambiguationTest4">
        <test-method status="PASS" signature="shouldOverrideAmbiguityWithExplicitMapping()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest4@69e05f61]" test-instance-name="" name="shouldOverrideAmbiguityWithExplicitMapping" duration-ms="6" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldOverrideAmbiguityWithExplicitMapping -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest4@69e05f61]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldThrowOnMap()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest4@69e05f61]" test-instance-name="" name="shouldThrowOnMap" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest4@69e05f61]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.disambiguation.DisambiguationTest4 -->
      <class name="org.modelmapper.internal.PropertyInfoRegistryTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.internal.PropertyInfoRegistryTest@771d1ffb]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldResolveSamePropertyInfo()[pri:0, instance:org.modelmapper.internal.PropertyInfoRegistryTest@771d1ffb]" test-instance-name="" name="shouldResolveSamePropertyInfo" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldResolveSamePropertyInfo -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.internal.PropertyInfoRegistryTest@771d1ffb]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldResolveSeparatePropertyInfoForDifferentInitialTypes()[pri:0, instance:org.modelmapper.internal.PropertyInfoRegistryTest@771d1ffb]" test-instance-name="" name="shouldResolveSeparatePropertyInfoForDifferentInitialTypes" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldResolveSeparatePropertyInfoForDifferentInitialTypes -->
      </class> <!-- org.modelmapper.internal.PropertyInfoRegistryTest -->
      <class name="org.modelmapper.functional.disambiguation.DisambiguationTest3">
        <test-method status="PASS" signature="shouldMapDTOToEntity()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest3@730e5763]" test-instance-name="" name="shouldMapDTOToEntity" duration-ms="2" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapDTOToEntity -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest3@730e5763]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapEntityToDTO()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest3@730e5763]" test-instance-name="" name="shouldMapEntityToDTO" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapEntityToDTO -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.disambiguation.DisambiguationTest3@730e5763]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.disambiguation.DisambiguationTest3 -->
      <class name="org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mapping_to_one_destination_from_many_sources">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mapping_to_one_destination_from_many_sources@1128620c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapSubDestValueWithConverter()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mapping_to_one_destination_from_many_sources@1128620c]" test-instance-name="" name="shouldMapSubDestValueWithConverter" duration-ms="26" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapSubDestValueWithConverter -->
      </class> <!-- org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_mapping_to_one_destination_from_many_sources -->
      <class name="org.modelmapper.functional.deepmapping.DeepMappingTest1">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.DeepMappingTest1@23b3aa8c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldThrowOnMissingMutatorForAccessor()[pri:0, instance:org.modelmapper.functional.deepmapping.DeepMappingTest1@23b3aa8c]" test-instance-name="" name="shouldThrowOnMissingMutatorForAccessor" duration-ms="3" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnMissingMutatorForAccessor -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.DeepMappingTest1@23b3aa8c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="testMapping()[pri:0, instance:org.modelmapper.functional.deepmapping.DeepMappingTest1@23b3aa8c]" test-instance-name="" name="testMapping" duration-ms="17" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMapping -->
      </class> <!-- org.modelmapper.functional.deepmapping.DeepMappingTest1 -->
      <class name="org.modelmapper.convention.LooseMatchingStrategyTest">
        <test-method status="PASS" signature="shouldMatchClass()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchClass" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchClass -->
        <test-method status="PASS" signature="shouldMatchDeclaringClass()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchDeclaringClass" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchDeclaringClass -->
        <test-method status="PASS" signature="shouldMatchCombinedTokens()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchCombinedTokens" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchCombinedTokens -->
        <test-method status="PASS" signature="shouldMatchEqualHierarchies()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchEqualHierarchies" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchEqualHierarchies -->
        <test-method status="PASS" signature="shouldMatchGreaterDestinationHierarchy()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchGreaterDestinationHierarchy" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchGreaterDestinationHierarchy -->
        <test-method status="PASS" signature="shouldMatchGreaterSourceHierarchy()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchGreaterSourceHierarchy" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchGreaterSourceHierarchy -->
        <test-method status="PASS" signature="shouldMatchInverted()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchInverted" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchInverted -->
        <test-method status="PASS" signature="shouldMatchInvertedDeclaringClass()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchInvertedDeclaringClass" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchInvertedDeclaringClass -->
        <test-method status="PASS" signature="shouldMatchInvertedClass()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchInvertedClass" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchInvertedClass -->
        <test-method status="PASS" signature="shouldMatchSplitTokens()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchSplitTokens" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchSplitTokens -->
        <test-method status="PASS" signature="shouldMatchSameTokenTwice()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchSameTokenTwice" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchSameTokenTwice -->
        <test-method status="PASS" signature="shouldMatchLastSourceMemberName()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchLastSourceMemberName" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchLastSourceMemberName -->
        <test-method status="PASS" signature="shouldNotMatchClassAlone()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldNotMatchClassAlone" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotMatchClassAlone -->
        <test-method status="PASS" signature="shouldMatchWithSameNameAndClassName()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchWithSameNameAndClassName" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchWithSameNameAndClassName -->
        <test-method status="PASS" signature="shouldMatchLastTokens()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchLastTokens" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchLastTokens -->
        <test-method status="PASS" signature="shouldNotMatchWithMismatchedLastToken()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldNotMatchWithMismatchedLastToken" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotMatchWithMismatchedLastToken -->
        <test-method status="PASS" signature="shouldMatchSameTokenAgainstMultipleSourceMembers()[pri:0, instance:org.modelmapper.convention.LooseMatchingStrategyTest@30a7c98f]" test-instance-name="" name="shouldMatchSameTokenAgainstMultipleSourceMembers" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchSameTokenAgainstMultipleSourceMembers -->
      </class> <!-- org.modelmapper.convention.LooseMatchingStrategyTest -->
      <class name="org.modelmapper.functional.deepmapping.DeepMappingTest2">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.DeepMappingTest2@288cdaab]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMap()[pri:0, instance:org.modelmapper.functional.deepmapping.DeepMappingTest2@288cdaab]" test-instance-name="" name="shouldMap" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap -->
      </class> <!-- org.modelmapper.functional.deepmapping.DeepMappingTest2 -->
      <class name="org.modelmapper.functional.typeresolution.GenericMapping">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.typeresolution.GenericMapping@4f966719]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapFromGenericType()[pri:0, instance:org.modelmapper.functional.typeresolution.GenericMapping@4f966719]" test-instance-name="" name="shouldMapFromGenericType" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapFromGenericType -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.typeresolution.GenericMapping@4f966719]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapFromGenericTypeToGenericType()[pri:0, instance:org.modelmapper.functional.typeresolution.GenericMapping@4f966719]" test-instance-name="" name="shouldMapFromGenericTypeToGenericType" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapFromGenericTypeToGenericType -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.typeresolution.GenericMapping@4f966719]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapToGenericType()[pri:0, instance:org.modelmapper.functional.typeresolution.GenericMapping@4f966719]" test-instance-name="" name="shouldMapToGenericType" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapToGenericType -->
        <test-method status="PASS" signature="shouldMapToSameType()[pri:0, instance:org.modelmapper.functional.typeresolution.GenericMapping@4f966719]" test-instance-name="" name="shouldMapToSameType" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapToSameType -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.typeresolution.GenericMapping@4f966719]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.typeresolution.GenericMapping -->
      <class name="org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_deep_mapping">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_deep_mapping@6bf13698]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapConvertUsingLastProperty()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_deep_mapping@6bf13698]" test-instance-name="" name="shouldMapConvertUsingLastProperty" duration-ms="8" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapConvertUsingLastProperty -->
      </class> <!-- org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_deep_mapping -->
      <class name="org.modelmapper.functional.UnequalHierarchies">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.UnequalHierarchies@37864b77]" test-instance-name="" name="initContext" is-config="true" duration-ms="7" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMap()[pri:0, instance:org.modelmapper.functional.UnequalHierarchies@37864b77]" test-instance-name="" name="shouldMap" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap -->
        <test-method status="PASS" signature="shouldMapInverse()[pri:0, instance:org.modelmapper.functional.UnequalHierarchies@37864b77]" test-instance-name="" name="shouldMapInverse" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapInverse -->
      </class> <!-- org.modelmapper.functional.UnequalHierarchies -->
      <class name="org.modelmapper.bugs.GH119">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH119@1976f537]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapCircularReferencesWithProvider()[pri:0, instance:org.modelmapper.bugs.GH119@1976f537]" test-instance-name="" name="shouldMapCircularReferencesWithProvider" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapCircularReferencesWithProvider -->
      </class> <!-- org.modelmapper.bugs.GH119 -->
      <class name="org.modelmapper.bugs.GH113">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH113@6940f685]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapWithHashCode()[pri:0, instance:org.modelmapper.bugs.GH113@6940f685]" test-instance-name="" name="shouldMapWithHashCode" duration-ms="5" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapWithHashCode -->
      </class> <!-- org.modelmapper.bugs.GH113 -->
      <class name="org.modelmapper.bugs.GH60">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH60@39008c9f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapCollectionsWithNullValues()[pri:0, instance:org.modelmapper.bugs.GH60@39008c9f]" test-instance-name="" name="shouldMapCollectionsWithNullValues" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapCollectionsWithNullValues -->
        <test-method status="PASS" signature="shouldMapMapsWithNullKeys()[pri:0, instance:org.modelmapper.bugs.GH60@39008c9f]" test-instance-name="" name="shouldMapMapsWithNullKeys" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapMapsWithNullKeys -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH60@39008c9f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapMapsWithNullValues()[pri:0, instance:org.modelmapper.bugs.GH60@39008c9f]" test-instance-name="" name="shouldMapMapsWithNullValues" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapMapsWithNullValues -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH60@39008c9f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH60 -->
      <class name="org.modelmapper.bugs.GH234">
        <test-method status="PASS" signature="shouldMap()[pri:0, instance:org.modelmapper.bugs.GH234@1a891add]" test-instance-name="" name="shouldMap" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.bugs.GH234@1a891add]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- org.modelmapper.bugs.GH234 -->
      <class name="org.modelmapper.functional.iterable.CollectionMapping3">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping3@3c4262d1]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMap()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping3@3c4262d1]" test-instance-name="" name="shouldMap" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping3@3c4262d1]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapWithPropertyMap()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping3@3c4262d1]" test-instance-name="" name="shouldMapWithPropertyMap" duration-ms="66" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapWithPropertyMap -->
      </class> <!-- org.modelmapper.functional.iterable.CollectionMapping3 -->
      <class name="org.modelmapper.functional.iterable.CollectionMapping2">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapArrayToList()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" test-instance-name="" name="shouldMapArrayToList" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapArrayToList -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapListToArray()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" test-instance-name="" name="shouldMapListToArray" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapListToArray -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapListToList()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" test-instance-name="" name="shouldMapListToList" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapListToList -->
        <test-method status="PASS" signature="shouldMapListToListOfDifferentTypes()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" test-instance-name="" name="shouldMapListToListOfDifferentTypes" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapListToListOfDifferentTypes -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping2@5e5073ab]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.iterable.CollectionMapping2 -->
      <class name="org.modelmapper.functional.Immutable">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.Immutable@2b98b3bb]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapToImmutableViaProvider()[pri:0, instance:org.modelmapper.functional.Immutable@2b98b3bb]" test-instance-name="" name="shouldMapToImmutableViaProvider" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapToImmutableViaProvider -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.Immutable@2b98b3bb]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapToImmutableViaSecurityOverride()[pri:0, instance:org.modelmapper.functional.Immutable@2b98b3bb]" test-instance-name="" name="shouldMapToImmutableViaSecurityOverride" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapToImmutableViaSecurityOverride -->
      </class> <!-- org.modelmapper.functional.Immutable -->
      <class name="org.modelmapper.bugs.GH115">
        <test-method status="PASS" signature="shouldPropertyMapArrays()[pri:0, instance:org.modelmapper.bugs.GH115@5c20aab9]" test-instance-name="" name="shouldPropertyMapArrays" duration-ms="5" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPropertyMapArrays -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH115@5c20aab9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH115 -->
      <class name="org.modelmapper.functional.iterable.CollectionMapping1">
        <test-method status="PASS" signature="shouldMapToArray()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" test-instance-name="" name="shouldMapToArray" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapToArray -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setup()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" test-instance-name="" name="setup" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapToTypeTokenizedArray()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" test-instance-name="" name="shouldMapToTypeTokenizedArray" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapToTypeTokenizedArray -->
        <test-method status="PASS" signature="setup()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" test-instance-name="" name="setup" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="shouldMapTypeTokenizedCollection()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" test-instance-name="" name="shouldMapTypeTokenizedCollection" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapTypeTokenizedCollection -->
        <test-method status="PASS" signature="setup()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" test-instance-name="" name="setup" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.CollectionMapping1@100c567f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.iterable.CollectionMapping1 -->
      <class name="org.modelmapper.bugs.GH197">
        <test-method status="PASS" signature="shouldNotSkipWhenConditionNotMatch()[pri:0, instance:org.modelmapper.bugs.GH197@387bf2d9]" test-instance-name="" name="shouldNotSkipWhenConditionNotMatch" duration-ms="4" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotSkipWhenConditionNotMatch -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH197@387bf2d9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldSkipWhenConditionMatch()[pri:0, instance:org.modelmapper.bugs.GH197@387bf2d9]" test-instance-name="" name="shouldSkipWhenConditionMatch" duration-ms="4" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipWhenConditionMatch -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH197@387bf2d9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH197 -->
      <class name="org.modelmapper.bugs.GH110">
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH110@3bae64d0]" test-instance-name="" name="test" duration-ms="95" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH110@3bae64d0]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH110 -->
      <class name="org.modelmapper.functional.skip.SkipMappingTest1">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.skip.SkipMappingTest1@1de9d54]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldConditionallySkipMapping()[pri:0, instance:org.modelmapper.functional.skip.SkipMappingTest1@1de9d54]" test-instance-name="" name="shouldConditionallySkipMapping" duration-ms="5" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConditionallySkipMapping -->
        <test-method status="PASS" signature="shouldSkipMapping()[pri:0, instance:org.modelmapper.functional.skip.SkipMappingTest1@1de9d54]" test-instance-name="" name="shouldSkipMapping" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipMapping -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.skip.SkipMappingTest1@1de9d54]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.skip.SkipMappingTest1 -->
      <class name="org.modelmapper.functional.converter.CustomConversion$When_using_member_converter">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter@280d9edc]" test-instance-name="" name="initContext" is-config="true" duration-ms="5" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapWithExplicitMappings()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter@280d9edc]" test-instance-name="" name="shouldMapWithExplicitMappings" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapWithExplicitMappings -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter@280d9edc]" test-instance-name="" name="initContext" is-config="true" duration-ms="5" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapWithImplicitMappings()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter@280d9edc]" test-instance-name="" name="shouldMapWithImplicitMappings" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapWithImplicitMappings -->
      </class> <!-- org.modelmapper.functional.converter.CustomConversion$When_using_member_converter -->
      <class name="org.modelmapper.bugs.CircularMappingBug">
        <test-method status="PASS" signature="testMapping()[pri:0, instance:org.modelmapper.bugs.CircularMappingBug@45f421c]" test-instance-name="" name="testMapping" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMapping -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.CircularMappingBug@45f421c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.CircularMappingBug -->
      <class name="org.modelmapper.internal.InheritingConfigurationTest">
        <test-method status="PASS" signature="testEquals()[pri:0, instance:org.modelmapper.internal.InheritingConfigurationTest@6d2dc9d2]" test-instance-name="" name="testEquals" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEquals -->
        <test-method status="PASS" signature="testFullMatchingRequiredDefualtsToFalse()[pri:0, instance:org.modelmapper.internal.InheritingConfigurationTest@6d2dc9d2]" test-instance-name="" name="testFullMatchingRequiredDefualtsToFalse" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullMatchingRequiredDefualtsToFalse -->
        <test-method status="PASS" signature="testHashCode()[pri:0, instance:org.modelmapper.internal.InheritingConfigurationTest@6d2dc9d2]" test-instance-name="" name="testHashCode" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHashCode -->
        <test-method status="PASS" signature="testFullMatchingRequiredIsInherited()[pri:0, instance:org.modelmapper.internal.InheritingConfigurationTest@6d2dc9d2]" test-instance-name="" name="testFullMatchingRequiredIsInherited" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullMatchingRequiredIsInherited -->
      </class> <!-- org.modelmapper.internal.InheritingConfigurationTest -->
      <class name="org.modelmapper.functional.conditional.ConditionalMapping2">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalMapping2@3b95d13c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapConditionally()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalMapping2@3b95d13c]" test-instance-name="" name="shouldMapConditionally" duration-ms="7" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapConditionally -->
      </class> <!-- org.modelmapper.functional.conditional.ConditionalMapping2 -->
      <class name="org.modelmapper.user.CharArray">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.user.CharArray@1640c151]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.user.CharArray@1640c151]" test-instance-name="" name="test" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.user.CharArray -->
      <class name="org.modelmapper.functional.conditional.ConditionalMapping1">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalMapping1@537c8c7e]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldSkipConditionalPropertyMappingViaPropertyMap()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalMapping1@537c8c7e]" test-instance-name="" name="shouldSkipConditionalPropertyMappingViaPropertyMap" duration-ms="7" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipConditionalPropertyMappingViaPropertyMap -->
        <test-method status="PASS" signature="shouldSkipConditionalTypeMapping()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalMapping1@537c8c7e]" test-instance-name="" name="shouldSkipConditionalTypeMapping" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipConditionalTypeMapping -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.conditional.ConditionalMapping1@537c8c7e]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.conditional.ConditionalMapping1 -->
      <class name="org.modelmapper.functional.merging.MergingTest1">
        <test-method status="PASS" signature="shouldMergeMappings()[pri:0, instance:org.modelmapper.functional.merging.MergingTest1@1eb2d371]" test-instance-name="" name="shouldMergeMappings" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMergeMappings -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.merging.MergingTest1@1eb2d371]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.merging.MergingTest1 -->
      <class name="org.modelmapper.PropertyMapTest">
        <test-method status="PASS" signature="shouldThrowWhenMapOutsideOfDefine()[pri:0, instance:org.modelmapper.PropertyMapTest@6107165]" test-instance-name="" name="shouldThrowWhenMapOutsideOfDefine" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[PropertyMap should not be used outside the context of PropertyMap.configure().]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: PropertyMap should not be used outside the context of PropertyMap.configure().
	at org.modelmapper.internal.util.Assert.state(Assert.java:64)
	at org.modelmapper.PropertyMap.assertBuilder(PropertyMap.java:373)
	at org.modelmapper.PropertyMap.map(PropertyMap.java:249)
	at org.modelmapper.PropertyMapTest$BadMemberMap.test(PropertyMapTest.java:17)
	at org.modelmapper.PropertyMapTest.shouldThrowWhenMapOutsideOfDefine(PropertyMapTest.java:43)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenMapOutsideOfDefine -->
        <test-method status="PASS" signature="shouldInstantiate()[pri:0, instance:org.modelmapper.PropertyMapTest@6107165]" test-instance-name="" name="shouldInstantiate" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldInstantiate -->
        <test-method status="PASS" signature="loadShouldRequireTypeParameters()[pri:0, instance:org.modelmapper.PropertyMapTest@6107165]" test-instance-name="" name="loadShouldRequireTypeParameters" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loadShouldRequireTypeParameters -->
      </class> <!-- org.modelmapper.PropertyMapTest -->
      <class name="org.modelmapper.functional.PrimitiveMapping">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.PrimitiveMapping@7c853486]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapPrimitivesToWrapper()[pri:0, instance:org.modelmapper.functional.PrimitiveMapping@7c853486]" test-instance-name="" name="shouldMapPrimitivesToWrapper" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapPrimitivesToWrapper -->
        <test-method status="PASS" signature="shouldMapPrimitivesToPrimitives()[pri:0, instance:org.modelmapper.functional.PrimitiveMapping@7c853486]" test-instance-name="" name="shouldMapPrimitivesToPrimitives" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapPrimitivesToPrimitives -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.PrimitiveMapping@7c853486]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapWrappersToPrimitives()[pri:0, instance:org.modelmapper.functional.PrimitiveMapping@7c853486]" test-instance-name="" name="shouldMapWrappersToPrimitives" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapWrappersToPrimitives -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.PrimitiveMapping@7c853486]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.PrimitiveMapping -->
      <class name="org.modelmapper.functional.shading.NullMapping2">
        <test-method status="PASS" signature="shouldShadeWhenNullEncountered()[pri:0, instance:org.modelmapper.functional.shading.NullMapping2@31f20c9f]" test-instance-name="" name="shouldShadeWhenNullEncountered" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldShadeWhenNullEncountered -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.shading.NullMapping2@31f20c9f]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.shading.NullMapping2 -->
      <class name="org.modelmapper.bugs.GH9">
        <test-method status="PASS" signature="testValuesInDestinationRemainUnchangedUnlessTheyArePresentInSource()[pri:0, instance:org.modelmapper.bugs.GH9@76c387f9]" test-instance-name="" name="testValuesInDestinationRemainUnchangedUnlessTheyArePresentInSource" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValuesInDestinationRemainUnchangedUnlessTheyArePresentInSource -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH9@76c387f9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH9 -->
      <class name="org.modelmapper.bugs.GH6">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH6@7fb33394]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldIgnoreIntermediateDestinationWhenSourceIsNotNull()[pri:0, instance:org.modelmapper.bugs.GH6@7fb33394]" test-instance-name="" name="shouldIgnoreIntermediateDestinationWhenSourceIsNotNull" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldIgnoreIntermediateDestinationWhenSourceIsNotNull -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH6@7fb33394]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldNotInstantiateIntermediateObjectOnProvidedDestination()[pri:0, instance:org.modelmapper.bugs.GH6@7fb33394]" test-instance-name="" name="shouldNotInstantiateIntermediateObjectOnProvidedDestination" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotInstantiateIntermediateObjectOnProvidedDestination -->
        <test-method status="PASS" signature="shouldNotInstantiateIntermediateObjects()[pri:0, instance:org.modelmapper.bugs.GH6@7fb33394]" test-instance-name="" name="shouldNotInstantiateIntermediateObjects" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotInstantiateIntermediateObjects -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH6@7fb33394]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH6 -->
      <class name="org.modelmapper.convention.StandardMatchingStrategyTest">
        <test-method status="PASS" signature="shouldMatchClass()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchClass" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchClass -->
        <test-method status="PASS" signature="shouldMatchEqualHierarchies()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchEqualHierarchies" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchEqualHierarchies -->
        <test-method status="PASS" signature="shouldMatchCombinedTokens()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchCombinedTokens" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchCombinedTokens -->
        <test-method status="PASS" signature="shouldMatchDeclaringClass()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchDeclaringClass" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchDeclaringClass -->
        <test-method status="PASS" signature="shouldMatchGreaterDestinationHierarchy()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchGreaterDestinationHierarchy" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchGreaterDestinationHierarchy -->
        <test-method status="PASS" signature="shouldMatchGreaterSourceHierarchy()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchGreaterSourceHierarchy" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchGreaterSourceHierarchy -->
        <test-method status="PASS" signature="shouldMatchInverted()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchInverted" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchInverted -->
        <test-method status="PASS" signature="shouldMatchInvertedDeclaringClass()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchInvertedDeclaringClass" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchInvertedDeclaringClass -->
        <test-method status="PASS" signature="shouldMatchSplitTokens()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchSplitTokens" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchSplitTokens -->
        <test-method status="PASS" signature="shouldMatchInvertedClass()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchInvertedClass" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchInvertedClass -->
        <test-method status="PASS" signature="shouldMatchSameTokenTwice()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchSameTokenTwice" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchSameTokenTwice -->
        <test-method status="PASS" signature="shouldMatchUnorderedSourceTokens()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchUnorderedSourceTokens" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchUnorderedSourceTokens -->
        <test-method status="PASS" signature="shouldMatchWithSameNameAndClassName()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldMatchWithSameNameAndClassName" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchWithSameNameAndClassName -->
        <test-method status="PASS" signature="shouldNotMatchClassAlone()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldNotMatchClassAlone" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotMatchClassAlone -->
        <test-method status="PASS" signature="shouldNotMatchMissingSourceToken()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldNotMatchMissingSourceToken" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotMatchMissingSourceToken -->
        <test-method status="PASS" signature="shouldNotMatchMissingDestinationToken()[pri:0, instance:org.modelmapper.convention.StandardMatchingStrategyTest@7dff6d05]" test-instance-name="" name="shouldNotMatchMissingDestinationToken" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotMatchMissingDestinationToken -->
      </class> <!-- org.modelmapper.convention.StandardMatchingStrategyTest -->
      <class name="org.modelmapper.bugs.GH109">
        <test-method status="PASS" signature="testModelMapperIntegerToInt()[pri:0, instance:org.modelmapper.bugs.GH109@8b91134]" test-instance-name="" name="testModelMapperIntegerToInt" duration-ms="4" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testModelMapperIntegerToInt -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH109@8b91134]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH109 -->
      <class name="org.modelmapper.functional.shading.NullMapping1">
        <test-method status="PASS" signature="shouldMap()[pri:0, instance:org.modelmapper.functional.shading.NullMapping1@504e1599]" test-instance-name="" name="shouldMap" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.shading.NullMapping1@504e1599]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldShadeWhenNullEncountered()[pri:0, instance:org.modelmapper.functional.shading.NullMapping1@504e1599]" test-instance-name="" name="shouldShadeWhenNullEncountered" duration-ms="4" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldShadeWhenNullEncountered -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.shading.NullMapping1@504e1599]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.shading.NullMapping1 -->
      <class name="org.modelmapper.functional.shading.ShadedNestedMapping">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.shading.ShadedNestedMapping@f446158]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldShadeNullValue()[pri:0, instance:org.modelmapper.functional.shading.ShadedNestedMapping@f446158]" test-instance-name="" name="shouldShadeNullValue" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldShadeNullValue -->
      </class> <!-- org.modelmapper.functional.shading.ShadedNestedMapping -->
      <class name="org.modelmapper.internal.PropertyInfoSetResolverTest">
        <test-method status="PASS" signature="testCanAccessMember()[pri:0, instance:org.modelmapper.internal.PropertyInfoSetResolverTest@72d0f2b4]" test-instance-name="" name="testCanAccessMember" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCanAccessMember -->
      </class> <!-- org.modelmapper.internal.PropertyInfoSetResolverTest -->
      <class name="org.modelmapper.internal.util.MembersTest">
        <test-method status="PASS" signature="shouldGetFieldForClass()[pri:0, instance:org.modelmapper.internal.util.MembersTest@7e1f584d]" test-instance-name="" name="shouldGetFieldForClass" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetFieldForClass -->
        <test-method status="PASS" signature="shouldGetFieldForChildClas()[pri:0, instance:org.modelmapper.internal.util.MembersTest@7e1f584d]" test-instance-name="" name="shouldGetFieldForChildClas" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetFieldForChildClas -->
        <test-method status="PASS" signature="shouldGetMethodForDerivedInterface()[pri:0, instance:org.modelmapper.internal.util.MembersTest@7e1f584d]" test-instance-name="" name="shouldGetMethodForDerivedInterface" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetMethodForDerivedInterface -->
        <test-method status="PASS" signature="shouldGetMethodForInterface()[pri:0, instance:org.modelmapper.internal.util.MembersTest@7e1f584d]" test-instance-name="" name="shouldGetMethodForInterface" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetMethodForInterface -->
        <test-method status="PASS" signature="shouldGetMethodForClass()[pri:0, instance:org.modelmapper.internal.util.MembersTest@7e1f584d]" test-instance-name="" name="shouldGetMethodForClass" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetMethodForClass -->
        <test-method status="PASS" signature="shuoldGetMethodForChildClass()[pri:0, instance:org.modelmapper.internal.util.MembersTest@7e1f584d]" test-instance-name="" name="shuoldGetMethodForChildClass" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shuoldGetMethodForChildClass -->
        <test-method status="PASS" signature="shouldGetMethodForMoreDerivedInterface()[pri:0, instance:org.modelmapper.internal.util.MembersTest@7e1f584d]" test-instance-name="" name="shouldGetMethodForMoreDerivedInterface" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetMethodForMoreDerivedInterface -->
      </class> <!-- org.modelmapper.internal.util.MembersTest -->
      <class name="org.modelmapper.functional.merging.MergeTypeMaps">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.merging.MergeTypeMaps@2babf189]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMergeTypeMaps()[pri:0, instance:org.modelmapper.functional.merging.MergeTypeMaps@2babf189]" test-instance-name="" name="shouldMergeTypeMaps" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMergeTypeMaps -->
      </class> <!-- org.modelmapper.functional.merging.MergeTypeMaps -->
      <class name="org.modelmapper.bugs.GH101">
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH101@162b3d47]" test-instance-name="" name="test" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH101@162b3d47]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH101 -->
      <class name="org.modelmapper.convention.NameTokenizersTest">
        <test-method status="PASS" signature="testCamelCaseTokenizer()[pri:0, instance:org.modelmapper.convention.NameTokenizersTest@34fe326d]" test-instance-name="" name="testCamelCaseTokenizer" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCamelCaseTokenizer -->
        <test-method status="PASS" signature="testUnderscoreTokenizer()[pri:0, instance:org.modelmapper.convention.NameTokenizersTest@34fe326d]" test-instance-name="" name="testUnderscoreTokenizer" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnderscoreTokenizer -->
      </class> <!-- org.modelmapper.convention.NameTokenizersTest -->
      <class name="org.modelmapper.bugs.GH104">
        <test-method status="PASS" signature="shouldMapExistingInstancesOfSameType()[pri:0, instance:org.modelmapper.bugs.GH104@3402b4c9]" test-instance-name="" name="shouldMapExistingInstancesOfSameType" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapExistingInstancesOfSameType -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH104@3402b4c9]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH104 -->
      <class name="org.modelmapper.bugs.GH74">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH74@4efc25fc]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH74@4efc25fc]" test-instance-name="" name="test" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.bugs.GH74 -->
      <class name="org.modelmapper.bugs.GH220">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH220@41bf79da]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapNonPrimitiveArrayWithPropertyMap()[pri:0, instance:org.modelmapper.bugs.GH220@41bf79da]" test-instance-name="" name="shouldMapNonPrimitiveArrayWithPropertyMap" duration-ms="13" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapNonPrimitiveArrayWithPropertyMap -->
      </class> <!-- org.modelmapper.bugs.GH220 -->
      <class name="org.modelmapper.functional.inherit.TypeMapIncludeBaseTest">
        <test-method status="PASS" signature="shouldMappingClassSuccess()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeBaseTest@422b8438]" test-instance-name="" name="shouldMappingClassSuccess" duration-ms="5" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMappingClassSuccess -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeBaseTest@422b8438]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeBaseTest@422b8438]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMappingInterfaceSuccess()[pri:0, instance:org.modelmapper.functional.inherit.TypeMapIncludeBaseTest@422b8438]" test-instance-name="" name="shouldMappingInterfaceSuccess" duration-ms="4" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMappingInterfaceSuccess -->
      </class> <!-- org.modelmapper.functional.inherit.TypeMapIncludeBaseTest -->
      <class name="org.modelmapper.functional.iterable.TypedMapMapping">
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.functional.iterable.TypedMapMapping@30c0d731]" test-instance-name="" name="test" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.TypedMapMapping@30c0d731]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.iterable.TypedMapMapping -->
      <class name="org.modelmapper.convention.InexactMatcherTest">
        <test-method status="PASS" signature="shouldMatchTokens()[pri:0, instance:org.modelmapper.convention.InexactMatcherTest@41fed14f]" test-instance-name="" name="shouldMatchTokens" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchTokens -->
      </class> <!-- org.modelmapper.convention.InexactMatcherTest -->
      <class name="org.modelmapper.functional.enums.EnumConverter">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.enums.EnumConverter@65eabaab]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.functional.enums.EnumConverter@65eabaab]" test-instance-name="" name="test" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- org.modelmapper.functional.enums.EnumConverter -->
      <class name="org.modelmapper.functional.deepmapping.NestedMappingTest5">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest5@6c796cc1]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapOrderToOrderDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest5@6c796cc1]" test-instance-name="" name="shouldMapOrderToOrderDTO1" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapOrderToOrderDTO1 -->
      </class> <!-- org.modelmapper.functional.deepmapping.NestedMappingTest5 -->
      <class name="org.modelmapper.functional.deepmapping.NestedMappingTest4">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapUser1ToUserDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="shouldMapUser1ToUserDTO1" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapUser1ToUserDTO1 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapUser2ToUserDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="shouldMapUser2ToUserDTO2" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapUser2ToUserDTO2 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapUserDTO2ToUser2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="shouldMapUserDTO2ToUser2" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapUserDTO2ToUser2 -->
        <test-method status="PASS" signature="shouldMapUserDTO1ToUser1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="shouldMapUserDTO1ToUser1" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapUserDTO1ToUser1 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldNotMapUser2ToUserDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="shouldNotMapUser2ToUserDTO1" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotMapUser2ToUserDTO1 -->
        <test-method status="PASS" signature="shouldNotMapUserDTO1ToUser2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="shouldNotMapUserDTO1ToUser2" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotMapUserDTO1ToUser2 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest4@507b79f7]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.deepmapping.NestedMappingTest4 -->
      <class name="org.modelmapper.functional.deepmapping.NestedMappingTest7">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest7@64a9d48c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapModelWithNullItems()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest7@64a9d48c]" test-instance-name="" name="shouldMapModelWithNullItems" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapModelWithNullItems -->
        <test-method status="PASS" signature="shouldValidateTypeMap()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest7@64a9d48c]" test-instance-name="" name="shouldValidateTypeMap" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldValidateTypeMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest7@64a9d48c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.deepmapping.NestedMappingTest7 -->
      <class name="org.modelmapper.functional.deepmapping.NestedMappingTest6">
        <test-method status="PASS" signature="shouldMapOrderDTPOoOrder()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest6@99407c2]" test-instance-name="" name="shouldMapOrderDTPOoOrder" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapOrderDTPOoOrder -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest6@99407c2]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapOrderToOrderDTO()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest6@99407c2]" test-instance-name="" name="shouldMapOrderToOrderDTO" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapOrderToOrderDTO -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest6@99407c2]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.deepmapping.NestedMappingTest6 -->
      <class name="org.modelmapper.functional.deepmapping.NestedMappingTest1">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapArtistToArtistDTO()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="shouldMapArtistToArtistDTO" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapArtistToArtistDTO -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapArtistToSongDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="shouldMapArtistToSongDTO2" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapArtistToSongDTO2 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapSongDTO2ToSong()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="shouldMapSongDTO2ToSong" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapSongDTO2ToSong -->
        <test-method status="PASS" signature="shouldMapSongDTOToArtist()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="shouldMapSongDTOToArtist" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapSongDTOToArtist -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapSongToSongDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="shouldMapSongToSongDTO2" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapSongToSongDTO2 -->
        <test-method status="PASS" signature="shouldMapSongToSongDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="shouldMapSongToSongDTO1" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapSongToSongDTO1 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest1@4bafe935]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.deepmapping.NestedMappingTest1 -->
      <class name="org.modelmapper.functional.lambda.TypeMapLambdaDeepMapTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaDeepMapTest@128c502c]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaDeepMapTest@128c502c]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldAddMappingDeeply()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaDeepMapTest@128c502c]" test-instance-name="" name="shouldAddMappingDeeply" duration-ms="6" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMappingDeeply -->
        <test-method status="PASS" signature="shouldAddMappingWithProvider()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaDeepMapTest@128c502c]" test-instance-name="" name="shouldAddMappingWithProvider" duration-ms="5" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMappingWithProvider -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaDeepMapTest@128c502c]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaDeepMapTest@128c502c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.lambda.TypeMapLambdaDeepMapTest -->
      <class name="org.modelmapper.functional.deepmapping.NestedMappingTest3">
        <test-method status="PASS" signature="shouldMapName2ToPersonDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="shouldMapName2ToPersonDTO1" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapName2ToPersonDTO1 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapOrderDTO1ToOrder()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="shouldMapOrderDTO1ToOrder" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapOrderDTO1ToOrder -->
        <test-method status="PASS" signature="shouldMapOrderDTO2ToOrder()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="shouldMapOrderDTO2ToOrder" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapOrderDTO2ToOrder -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapOrderDTO3ToOrder()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="shouldMapOrderDTO3ToOrder" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapOrderDTO3ToOrder -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapOrderToOrderDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="shouldMapOrderToOrderDTO1" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapOrderToOrderDTO1 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapOrderToOrderDTO3()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="shouldMapOrderToOrderDTO3" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapOrderToOrderDTO3 -->
        <test-method status="PASS" signature="shouldMapOrderToOrderDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="shouldMapOrderToOrderDTO2" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapOrderToOrderDTO2 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapPersonToPersonDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="shouldMapPersonToPersonDTO1" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapPersonToPersonDTO1 -->
        <test-method status="PASS" signature="shouldMapPersonToPersonDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="shouldMapPersonToPersonDTO2" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapPersonToPersonDTO2 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest3@4a7a965d]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.deepmapping.NestedMappingTest3 -->
      <class name="org.modelmapper.functional.deepmapping.NestedMappingTest2">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapEvent1ToEventDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="shouldMapEvent1ToEventDTO1" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapEvent1ToEventDTO1 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapEvent1ToEventDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="shouldMapEvent1ToEventDTO2" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapEvent1ToEventDTO2 -->
        <test-method status="PASS" signature="shouldMapEvent1ToEventDTO3()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="shouldMapEvent1ToEventDTO3" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapEvent1ToEventDTO3 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapEvent2ToEventDTO1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="shouldMapEvent2ToEventDTO1" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapEvent2ToEventDTO1 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapEvent2ToEventDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="shouldMapEvent2ToEventDTO2" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapEvent2ToEventDTO2 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapEventDTO1ToEvent1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="shouldMapEventDTO1ToEvent1" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapEventDTO1ToEvent1 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapEventDTO2ToEvent1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="shouldMapEventDTO2ToEvent1" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapEventDTO2ToEvent1 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapEventDTO3ToEventDTO2()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="shouldMapEventDTO3ToEventDTO2" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapEventDTO3ToEventDTO2 -->
        <test-method status="PASS" signature="shouldMapEventDTO3ToEvent1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="shouldMapEventDTO3ToEvent1" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapEventDTO3ToEvent1 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapEventDTO4ToEvent3()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="shouldMapEventDTO4ToEvent3" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapEventDTO4ToEvent3 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldThrowOnAmbiguousEventDTO4ToEvent1()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="shouldThrowOnAmbiguousEventDTO4ToEvent1" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnAmbiguousEventDTO4ToEvent1 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest2@87b5b49]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.deepmapping.NestedMappingTest2 -->
      <class name="org.modelmapper.internal.converter.DateConverterTest">
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertDate1(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldConvertDate1" duration-ms="0" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Date]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate1 -->
        <test-method status="PASS" signature="shouldConvertDate1(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldConvertDate1" duration-ms="0" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.sql.Date]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate1 -->
        <test-method status="PASS" signature="shouldConvertDate1(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldConvertDate1" duration-ms="1" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.sql.Time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate1 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertDate1(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldConvertDate1" duration-ms="1" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.sql.Timestamp]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate1 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertDate2(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldConvertDate2" duration-ms="1" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Date]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate2 -->
        <test-method status="PASS" signature="shouldConvertDate2(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldConvertDate2" duration-ms="1" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.sql.Date]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate2 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertDate2(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldConvertDate2" duration-ms="1" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.sql.Time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate2 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertDate2(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldConvertDate2" duration-ms="0" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.sql.Timestamp]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate2 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowOnInvalidDestinationType()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldThrowOnInvalidDestinationType" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping 1527319852235 to java.lang.Character

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping 1527319852235 to java.lang.Character

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.DateConverter.dateFor(DateConverter.java:89)
	at org.modelmapper.internal.converter.DateConverter.convert(DateConverter.java:60)
	at org.modelmapper.internal.converter.DateConverter.convert(DateConverter.java:51)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.AbstractDateConverterTest.shouldThrowOnInvalidDestinationType(AbstractDateConverterTest.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnInvalidDestinationType -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowOnNullSource()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldThrowOnNullSource" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:47)
	at org.modelmapper.internal.converter.AbstractDateConverterTest.shouldThrowOnNullSource(AbstractDateConverterTest.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnNullSource -->
        <test-method status="PASS" signature="shouldConvertStringToSqlDate()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldConvertStringToSqlDate" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertStringToSqlDate -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertStringToTime()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldConvertStringToTime" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertStringToTime -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertStringToTimestamp()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldConvertStringToTimestamp" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertStringToTimestamp -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowOnInvalidSourceString(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldThrowOnInvalidSourceString" duration-ms="1" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Date]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnInvalidSourceString -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowOnInvalidSourceString(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldThrowOnInvalidSourceString" duration-ms="1" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.sql.Date]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnInvalidSourceString -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowOnInvalidSourceString(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldThrowOnInvalidSourceString" duration-ms="1" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.sql.Time]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnInvalidSourceString -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowOnInvalidSourceString(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="shouldThrowOnInvalidSourceString" duration-ms="1" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.sql.Timestamp]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnInvalidSourceString -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testMatches()[pri:0, instance:org.modelmapper.internal.converter.DateConverterTest@68f32020]" test-instance-name="" name="testMatches" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMatches -->
      </class> <!-- org.modelmapper.internal.converter.DateConverterTest -->
      <class name="org.modelmapper.functional.NullBehavior">
        <test-method status="PASS" signature="shouldMapModelWithNullItems()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" test-instance-name="" name="shouldMapModelWithNullItems" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapModelWithNullItems -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldSkipNullsGlobally()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" test-instance-name="" name="shouldSkipNullsGlobally" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipNullsGlobally -->
        <test-method status="PASS" signature="shouldSkipNullsPerTypeMap()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" test-instance-name="" name="shouldSkipNullsPerTypeMap" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipNullsPerTypeMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldValidateTypeMap()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" test-instance-name="" name="shouldValidateTypeMap" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldValidateTypeMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.NullBehavior@1046498a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.NullBehavior -->
      <class name="org.modelmapper.functional.converter.PassNullSourcesToGlobalConditionalConvertersTest">
        <test-method status="PASS" signature="empowerConditionalConvertersToHandleNullPropertiesInSourceObject()[pri:0, instance:org.modelmapper.functional.converter.PassNullSourcesToGlobalConditionalConvertersTest@70e13fa]" test-instance-name="" name="empowerConditionalConvertersToHandleNullPropertiesInSourceObject" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- empowerConditionalConvertersToHandleNullPropertiesInSourceObject -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.PassNullSourcesToGlobalConditionalConvertersTest@70e13fa]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.converter.PassNullSourcesToGlobalConditionalConvertersTest -->
      <class name="org.modelmapper.bugs.GH81">
        <test-method status="PASS" signature="shouldResolveArgumentsOfMemberType()[pri:0, instance:org.modelmapper.bugs.GH81@5533dc72]" test-instance-name="" name="shouldResolveArgumentsOfMemberType" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldResolveArgumentsOfMemberType -->
      </class> <!-- org.modelmapper.bugs.GH81 -->
      <class name="org.modelmapper.internal.TypeInfoImplTest">
        <test-method status="PASS" signature="shouldProduceAccessors()[pri:0, instance:org.modelmapper.internal.TypeInfoImplTest@2b329bbd]" test-instance-name="" name="shouldProduceAccessors" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldProduceAccessors -->
        <test-method status="PASS" signature="setupClass()[pri:0, instance:org.modelmapper.internal.TypeInfoImplTest@2b329bbd]" test-instance-name="" name="setupClass" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupClass -->
        <test-method status="PASS" signature="shouldProduceMutators()[pri:0, instance:org.modelmapper.internal.TypeInfoImplTest@2b329bbd]" test-instance-name="" name="shouldProduceMutators" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldProduceMutators -->
      </class> <!-- org.modelmapper.internal.TypeInfoImplTest -->
      <class name="org.modelmapper.internal.converter.ConverterStoreTest">
        <test-method status="PASS" signature="shouldSelectFirstFullMatchConverter()[pri:0, instance:org.modelmapper.internal.converter.ConverterStoreTest@3491e86e]" test-instance-name="" name="shouldSelectFirstFullMatchConverter" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSelectFirstFullMatchConverter -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.internal.converter.ConverterStoreTest@3491e86e]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.internal.converter.ConverterStoreTest@3491e86e]" test-instance-name="" name="setUp" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.internal.converter.ConverterStoreTest@3491e86e]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldSelectFirstPartialMatchConverter()[pri:0, instance:org.modelmapper.internal.converter.ConverterStoreTest@3491e86e]" test-instance-name="" name="shouldSelectFirstPartialMatchConverter" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSelectFirstPartialMatchConverter -->
        <test-method status="PASS" signature="shouldSelectNull()[pri:0, instance:org.modelmapper.internal.converter.ConverterStoreTest@3491e86e]" test-instance-name="" name="shouldSelectNull" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSelectNull -->
        <test-method status="PASS" signature="shouldSelectFullMatchConverter()[pri:0, instance:org.modelmapper.internal.converter.ConverterStoreTest@3491e86e]" test-instance-name="" name="shouldSelectFullMatchConverter" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSelectFullMatchConverter -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.internal.converter.ConverterStoreTest@3491e86e]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldSelectPartialMatchConverter()[pri:0, instance:org.modelmapper.internal.converter.ConverterStoreTest@3491e86e]" test-instance-name="" name="shouldSelectPartialMatchConverter" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSelectPartialMatchConverter -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.internal.converter.ConverterStoreTest@3491e86e]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- org.modelmapper.internal.converter.ConverterStoreTest -->
      <class name="org.modelmapper.functional.deepmapping.NestedMappingTest8">
        <test-method status="PASS" signature="shouldMapToConstantSource()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest8@365a6a43]" test-instance-name="" name="shouldMapToConstantSource" duration-ms="6" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapToConstantSource -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.deepmapping.NestedMappingTest8@365a6a43]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.deepmapping.NestedMappingTest8 -->
      <class name="org.modelmapper.functional.typeresolution.TypeResolutionTest3">
        <test-method status="PASS" signature="shouldAllowMappingOfNestedPropertiesInComplexGenericTypes()[pri:0, instance:org.modelmapper.functional.typeresolution.TypeResolutionTest3@dab48d3]" test-instance-name="" name="shouldAllowMappingOfNestedPropertiesInComplexGenericTypes" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAllowMappingOfNestedPropertiesInComplexGenericTypes -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.typeresolution.TypeResolutionTest3@dab48d3]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.typeresolution.TypeResolutionTest3 -->
      <class name="org.modelmapper.functional.merge.MergeSourcePropertiesTest">
        <test-method status="PASS" signature="shouldMergeSourceProperties()[pri:0, instance:org.modelmapper.functional.merge.MergeSourcePropertiesTest@5d1b9c3d]" test-instance-name="" name="shouldMergeSourceProperties" duration-ms="5" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMergeSourceProperties -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.merge.MergeSourcePropertiesTest@5d1b9c3d]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.merge.MergeSourcePropertiesTest -->
      <class name="org.modelmapper.bugs.GH85">
        <test-method status="PASS" signature="shouldMapToDestinationWithFluentSetters()[pri:0, instance:org.modelmapper.bugs.GH85@75308740]" test-instance-name="" name="shouldMapToDestinationWithFluentSetters" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapToDestinationWithFluentSetters -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH85@75308740]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH85 -->
      <class name="org.modelmapper.functional.NamedTypeMaps">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.NamedTypeMaps@174e1b69]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldDistinguishTypeMapsByName()[pri:0, instance:org.modelmapper.functional.NamedTypeMaps@174e1b69]" test-instance-name="" name="shouldDistinguishTypeMapsByName" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDistinguishTypeMapsByName -->
        <test-method status="PASS" signature="shouldGetNamedTypeMap()[pri:0, instance:org.modelmapper.functional.NamedTypeMaps@174e1b69]" test-instance-name="" name="shouldGetNamedTypeMap" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetNamedTypeMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.NamedTypeMaps@174e1b69]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.NamedTypeMaps -->
      <class name="org.modelmapper.functional.typeresolution.TypeResolutionTest2">
        <test-method status="PASS" signature="providersAreAbleToResolveDestinationTypesBasedOnActualSourceType()[pri:0, instance:org.modelmapper.functional.typeresolution.TypeResolutionTest2@58a2b4c]" test-instance-name="" name="providersAreAbleToResolveDestinationTypesBasedOnActualSourceType" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- providersAreAbleToResolveDestinationTypesBasedOnActualSourceType -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.typeresolution.TypeResolutionTest2@58a2b4c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.typeresolution.TypeResolutionTest2 -->
      <class name="org.modelmapper.bugs.GH176">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH176@e48bf9a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldAllowConverterToMultipleDestinationSources()[pri:0, instance:org.modelmapper.bugs.GH176@e48bf9a]" test-instance-name="" name="shouldAllowConverterToMultipleDestinationSources" duration-ms="7" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAllowConverterToMultipleDestinationSources -->
        <test-method status="PASS" signature="shouldAllowToReuseMultipleConverters()[pri:0, instance:org.modelmapper.bugs.GH176@e48bf9a]" test-instance-name="" name="shouldAllowToReuseMultipleConverters" duration-ms="10" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAllowToReuseMultipleConverters -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH176@e48bf9a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldReuseConverter()[pri:0, instance:org.modelmapper.bugs.GH176@e48bf9a]" test-instance-name="" name="shouldReuseConverter" duration-ms="7" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReuseConverter -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH176@e48bf9a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH176 -->
      <class name="org.modelmapper.functional.typeresolution.TypeResolutionTest1">
        <test-method status="PASS" signature="providersAreAbleToResolveDestinationTypesBasedOnActualSourceType()[pri:0, instance:org.modelmapper.functional.typeresolution.TypeResolutionTest1@7159a5cd]" test-instance-name="" name="providersAreAbleToResolveDestinationTypesBasedOnActualSourceType" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- providersAreAbleToResolveDestinationTypesBasedOnActualSourceType -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.typeresolution.TypeResolutionTest1@7159a5cd]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.typeresolution.TypeResolutionTest1 -->
      <class name="org.modelmapper.bugs.GH171">
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.bugs.GH171@1fba386c]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldMap1()[pri:0, instance:org.modelmapper.bugs.GH171@1fba386c]" test-instance-name="" name="shouldMap1" duration-ms="12" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap1 -->
        <test-method status="PASS" signature="shouldMap2()[pri:0, instance:org.modelmapper.bugs.GH171@1fba386c]" test-instance-name="" name="shouldMap2" duration-ms="3" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMap2 -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.bugs.GH171@1fba386c]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- org.modelmapper.bugs.GH171 -->
      <class name="org.modelmapper.bugs.GH291">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH291@1816e24a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldHandlePrimitiveConverter()[pri:0, instance:org.modelmapper.bugs.GH291@1816e24a]" test-instance-name="" name="shouldHandlePrimitiveConverter" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHandlePrimitiveConverter -->
      </class> <!-- org.modelmapper.bugs.GH291 -->
      <class name="org.modelmapper.internal.converter.ArrayConverterTest">
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertElementsFromArray()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="shouldConvertElementsFromArray" duration-ms="2" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertElementsFromArray -->
        <test-method status="PASS" signature="shouldConvertElementsFromModel()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="shouldConvertElementsFromModel" duration-ms="3" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertElementsFromModel -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertFromArray()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="shouldConvertFromArray" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertFromArray -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertFromList()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="shouldConvertFromList" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertFromList -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertFromPrimitiveArray()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="shouldConvertFromPrimitiveArray" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertFromPrimitiveArray -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertFromSet()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="shouldConvertFromSet" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertFromSet -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertNestedElements()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="shouldConvertNestedElements" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertNestedElements -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testMatches()[pri:0, instance:org.modelmapper.internal.converter.ArrayConverterTest@243f003c]" test-instance-name="" name="testMatches" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMatches -->
      </class> <!-- org.modelmapper.internal.converter.ArrayConverterTest -->
      <class name="org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object">
        <test-method status="PASS" signature="shouldSkipUnusedSourceMembers()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" test-instance-name="" name="shouldSkipUnusedSourceMembers" duration-ms="5" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipUnusedSourceMembers -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldUseConverter()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" test-instance-name="" name="shouldUseConverter" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseConverter -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapUsingConverter()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" test-instance-name="" name="shouldMapUsingConverter" duration-ms="8" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapUsingConverter -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapUsingMemberConverter()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object@5432c277]" test-instance-name="" name="shouldMapUsingMemberConverter" duration-ms="7" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapUsingMemberConverter -->
      </class> <!-- org.modelmapper.functional.converter.CustomConversion$When_using_converter_for_destination_object -->
      <class name="org.modelmapper.functional.ProxyTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.ProxyTest@76f856a8]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapBytebuddyProxies()[pri:0, instance:org.modelmapper.functional.ProxyTest@76f856a8]" test-instance-name="" name="shouldMapBytebuddyProxies" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapBytebuddyProxies -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.ProxyTest@76f856a8]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapCglibProxies()[pri:0, instance:org.modelmapper.functional.ProxyTest@76f856a8]" test-instance-name="" name="shouldMapCglibProxies" duration-ms="68" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapCglibProxies -->
      </class> <!-- org.modelmapper.functional.ProxyTest -->
      <class name="org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_different_member">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_different_member@5f9b6ae7]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapFromSourceMember()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_different_member@5f9b6ae7]" test-instance-name="" name="shouldMapFromSourceMember" duration-ms="5" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapFromSourceMember -->
        <test-method status="PASS" signature="shouldMapFromSourceObject()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_different_member@5f9b6ae7]" test-instance-name="" name="shouldMapFromSourceObject" duration-ms="8" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapFromSourceObject -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_different_member@5f9b6ae7]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.converter.CustomConversion$When_using_member_converter_for_different_member -->
      <class name="org.modelmapper.internal.util.TypesTest">
        <test-method status="PASS" signature="shouldDeProxyCGLibProxy()[pri:0, instance:org.modelmapper.internal.util.TypesTest@1da4b6b3]" test-instance-name="" name="shouldDeProxyCGLibProxy" duration-ms="5" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeProxyCGLibProxy -->
        <test-method status="PASS" signature="shouldDeProxyDynamicProxy()[pri:0, instance:org.modelmapper.internal.util.TypesTest@1da4b6b3]" test-instance-name="" name="shouldDeProxyDynamicProxy" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeProxyDynamicProxy -->
        <test-method status="PASS" signature="shouldDeProxyJavassistProxy()[pri:0, instance:org.modelmapper.internal.util.TypesTest@1da4b6b3]" test-instance-name="" name="shouldDeProxyJavassistProxy" duration-ms="2" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeProxyJavassistProxy -->
      </class> <!-- org.modelmapper.internal.util.TypesTest -->
      <class name="org.modelmapper.functional.persistence.LazyFetching">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.persistence.LazyFetching@18ac53e8]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldSkipLazyFetchedProperties()[pri:0, instance:org.modelmapper.functional.persistence.LazyFetching@18ac53e8]" test-instance-name="" name="shouldSkipLazyFetchedProperties" duration-ms="1261" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipLazyFetchedProperties -->
      </class> <!-- org.modelmapper.functional.persistence.LazyFetching -->
      <class name="org.modelmapper.functional.skip.EnableSkipNullTest">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.skip.EnableSkipNullTest@7123be6c]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldSkipNull()[pri:0, instance:org.modelmapper.functional.skip.EnableSkipNullTest@7123be6c]" test-instance-name="" name="shouldSkipNull" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipNull -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.skip.EnableSkipNullTest@7123be6c]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.skip.EnableSkipNullTest@7123be6c]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.skip.EnableSkipNullTest@7123be6c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldSkipNullWithConverter()[pri:0, instance:org.modelmapper.functional.skip.EnableSkipNullTest@7123be6c]" test-instance-name="" name="shouldSkipNullWithConverter" duration-ms="6" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipNullWithConverter -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.skip.EnableSkipNullTest@7123be6c]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.skip.EnableSkipNullTest@7123be6c]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldSkipNullWithPropertyMapSkipFailed()[pri:0, instance:org.modelmapper.functional.skip.EnableSkipNullTest@7123be6c]" test-instance-name="" name="shouldSkipNullWithPropertyMapSkipFailed" duration-ms="8" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSkipNullWithPropertyMapSkipFailed -->
      </class> <!-- org.modelmapper.functional.skip.EnableSkipNullTest -->
      <class name="org.modelmapper.functional.provider.ProviderTest2">
        <test-method status="PASS" signature="shouldMapPropertyWithProviderWhenPropertyTypesDiffer()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" test-instance-name="" name="shouldMapPropertyWithProviderWhenPropertyTypesDiffer" duration-ms="5" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapPropertyWithProviderWhenPropertyTypesDiffer -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapWithGlobalProvider()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" test-instance-name="" name="shouldMapWithGlobalProvider" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapWithGlobalProvider -->
        <test-method status="PASS" signature="shouldMapTypesWithProvider()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" test-instance-name="" name="shouldMapTypesWithProvider" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapTypesWithProvider -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapWithPropertyProviderViaPropertyMap()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" test-instance-name="" name="shouldMapWithPropertyProviderViaPropertyMap" duration-ms="5" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapWithPropertyProviderViaPropertyMap -->
        <test-method status="PASS" signature="shouldMapWithPropertyProviderViaTypeMap()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" test-instance-name="" name="shouldMapWithPropertyProviderViaTypeMap" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapWithPropertyProviderViaTypeMap -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest2@42210be1]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.provider.ProviderTest2 -->
      <class name="org.modelmapper.user.OnlyStrings">
        <test-method status="PASS" signature="shouldOnlyCopyStrings()[pri:0, instance:org.modelmapper.user.OnlyStrings@5d5b5fa7]" test-instance-name="" name="shouldOnlyCopyStrings" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldOnlyCopyStrings -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.user.OnlyStrings@5d5b5fa7]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.user.OnlyStrings -->
      <class name="org.modelmapper.functional.provider.ProviderTest1">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest1@4315e9af]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldUseTypeMapConverter()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest1@4315e9af]" test-instance-name="" name="shouldUseTypeMapConverter" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseTypeMapConverter -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest1@4315e9af]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldUseTypeMapPropertyProvider()[pri:0, instance:org.modelmapper.functional.provider.ProviderTest1@4315e9af]" test-instance-name="" name="shouldUseTypeMapPropertyProvider" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseTypeMapPropertyProvider -->
      </class> <!-- org.modelmapper.functional.provider.ProviderTest1 -->
      <class name="org.modelmapper.functional.EqualHierarchies">
        <test-method status="PASS" signature="shouldMapInnerClasses()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" test-instance-name="" name="shouldMapInnerClasses" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapInnerClasses -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapInverseInnerClasses()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" test-instance-name="" name="shouldMapInverseInnerClasses" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapInverseInnerClasses -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapInverseOuterClasses()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" test-instance-name="" name="shouldMapInverseOuterClasses" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapInverseOuterClasses -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapOuterClasses()[pri:0, instance:org.modelmapper.functional.EqualHierarchies@540b0448]" test-instance-name="" name="shouldMapOuterClasses" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapOuterClasses -->
      </class> <!-- org.modelmapper.functional.EqualHierarchies -->
      <class name="org.modelmapper.bugs.GH204">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH204@7ee3d262]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMappingMethod1()[pri:0, instance:org.modelmapper.bugs.GH204@7ee3d262]" test-instance-name="" name="shouldMappingMethod1" duration-ms="8" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMappingMethod1 -->
        <test-method status="PASS" signature="shouldMappingMethod2()[pri:0, instance:org.modelmapper.bugs.GH204@7ee3d262]" test-instance-name="" name="shouldMappingMethod2" duration-ms="11" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMappingMethod2 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH204@7ee3d262]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH204@7ee3d262]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMappingMethod3()[pri:0, instance:org.modelmapper.bugs.GH204@7ee3d262]" test-instance-name="" name="shouldMappingMethod3" duration-ms="8" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMappingMethod3 -->
      </class> <!-- org.modelmapper.bugs.GH204 -->
      <class name="org.modelmapper.internal.converter.CalendarConverterTest">
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertDate1(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="shouldConvertDate1" duration-ms="16" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Calendar]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate1 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertDate1(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="shouldConvertDate1" duration-ms="2" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class javax.xml.datatype.XMLGregorianCalendar]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate1 -->
        <test-method status="PASS" signature="shouldConvertDate2(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="shouldConvertDate2" duration-ms="6" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Calendar]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate2 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertDate2(java.lang.Class)[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="shouldConvertDate2" duration-ms="1" started-at="2018-05-26T09:30:52Z" data-provider="typesProvider" finished-at="2018-05-26T09:30:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class javax.xml.datatype.XMLGregorianCalendar]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertDate2 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowOnInvalidDestinationType()[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="shouldThrowOnInvalidDestinationType" duration-ms="7" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping Sat May 26 09:30:52 CEST 2018 to java.lang.Character

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping Sat May 26 09:30:52 CEST 2018 to java.lang.Character

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.CalendarConverter.convert(CalendarConverter.java:74)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:56)
	at org.modelmapper.internal.converter.AbstractDateConverterTest.shouldThrowOnInvalidDestinationType(AbstractDateConverterTest.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnInvalidDestinationType -->
        <test-method status="PASS" signature="shouldThrowOnNullSource()[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="shouldThrowOnNullSource" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:47)
	at org.modelmapper.internal.converter.AbstractDateConverterTest.shouldThrowOnNullSource(AbstractDateConverterTest.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnNullSource -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testMatches()[pri:0, instance:org.modelmapper.internal.converter.CalendarConverterTest@446c3920]" test-instance-name="" name="testMatches" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMatches -->
      </class> <!-- org.modelmapper.internal.converter.CalendarConverterTest -->
      <class name="org.modelmapper.TypeMapTest">
        <test-method status="PASS" signature="shouldGetUnmappedMembers()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="shouldGetUnmappedMembers" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetUnmappedMembers -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldLoadWhenMemberMapIsValid()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="shouldLoadWhenMemberMapIsValid" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldLoadWhenMemberMapIsValid -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMergeMappings()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="shouldMergeMappings" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMergeMappings -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldOverrideMappings()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="shouldOverrideMappings" duration-ms="4" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldOverrideMappings -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldThrowOnLoadWhenDuplicateMappingsDetected()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="shouldThrowOnLoadWhenDuplicateMappingsDetected" duration-ms="6" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnLoadWhenDuplicateMappingsDetected -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldThrowOnValidateWhenDestinationMembersMissing()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="shouldThrowOnValidateWhenDestinationMembersMissing" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnValidateWhenDestinationMembersMissing -->
        <test-method status="PASS" signature="shouldValidateWhenAllDestinationMembersMapped()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="shouldValidateWhenAllDestinationMembersMapped" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldValidateWhenAllDestinationMembersMapped -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.TypeMapTest@2a32fb6]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.TypeMapTest -->
      <class name="org.modelmapper.functional.lambda.TypeMapLambdaTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldAddMapping()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="shouldAddMapping" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMapping -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldAddMappingWithCondition()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="shouldAddMappingWithCondition" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMappingWithCondition -->
        <test-method status="PASS" signature="shouldAddMappingWithConverter()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="shouldAddMappingWithConverter" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMappingWithConverter -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldAddMappingWithSkip()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="shouldAddMappingWithSkip" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddMappingWithSkip -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="initContext" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldFailedWithEmptyDestinationSetter()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="shouldFailedWithEmptyDestinationSetter" duration-ms="7" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailedWithEmptyDestinationSetter -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldFailedWithEmptySourceGetter()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="shouldFailedWithEmptySourceGetter" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailedWithEmptySourceGetter -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="setUp" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldFailedWithWrongSourceGetter()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="shouldFailedWithWrongSourceGetter" duration-ms="3" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFailedWithWrongSourceGetter -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.lambda.TypeMapLambdaTest@226eba67]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.lambda.TypeMapLambdaTest -->
      <class name="org.modelmapper.internal.converter.BooleanConverterTest">
        <test-method status="PASS" signature="shouldThrowOnInvalidString()[pri:0, instance:org.modelmapper.internal.converter.BooleanConverterTest@22590e3e]" test-instance-name="" name="shouldThrowOnInvalidString" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <exception class="org.modelmapper.MappingException">
            <message>
              <![CDATA[ModelMapper mapping errors:

1) Error mapping abc to java.lang.Boolean

1 error]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping abc to java.lang.Boolean

1 error
	at org.modelmapper.internal.Errors.toMappingException(Errors.java:258)
	at org.modelmapper.internal.converter.BooleanConverter.convert(BooleanConverter.java:49)
	at org.modelmapper.internal.converter.BooleanConverter.convert(BooleanConverter.java:27)
	at org.modelmapper.internal.converter.AbstractConverterTest.convert(AbstractConverterTest.java:46)
	at org.modelmapper.internal.converter.BooleanConverterTest.shouldThrowOnInvalidString(BooleanConverterTest.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:178)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- org.modelmapper.MappingException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowOnInvalidString -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.BooleanConverterTest@22590e3e]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.BooleanConverterTest@22590e3e]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testStandardValues()[pri:0, instance:org.modelmapper.internal.converter.BooleanConverterTest@22590e3e]" test-instance-name="" name="testStandardValues" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStandardValues -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.BooleanConverterTest@22590e3e]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testCaseInsensitivity()[pri:0, instance:org.modelmapper.internal.converter.BooleanConverterTest@22590e3e]" test-instance-name="" name="testCaseInsensitivity" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCaseInsensitivity -->
        <test-method status="PASS" signature="testSupported()[pri:0, instance:org.modelmapper.internal.converter.BooleanConverterTest@22590e3e]" test-instance-name="" name="testSupported" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSupported -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.BooleanConverterTest@22590e3e]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
      </class> <!-- org.modelmapper.internal.converter.BooleanConverterTest -->
      <class name="org.modelmapper.internal.converter.CharacterConverterTest">
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CharacterConverterTest@19b047fe]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertComplexModel()[pri:0, instance:org.modelmapper.internal.converter.CharacterConverterTest@19b047fe]" test-instance-name="" name="shouldConvertComplexModel" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertComplexModel -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CharacterConverterTest@19b047fe]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldConvertToCharacter()[pri:0, instance:org.modelmapper.internal.converter.CharacterConverterTest@19b047fe]" test-instance-name="" name="shouldConvertToCharacter" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertToCharacter -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.converter.CharacterConverterTest@19b047fe]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testSupported()[pri:0, instance:org.modelmapper.internal.converter.CharacterConverterTest@19b047fe]" test-instance-name="" name="testSupported" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSupported -->
      </class> <!-- org.modelmapper.internal.converter.CharacterConverterTest -->
      <class name="org.modelmapper.functional.iterable.CollectionWithConverter">
        <test-method status="PASS" signature="shouldMapWithCustomConverter()[pri:0, instance:org.modelmapper.functional.iterable.CollectionWithConverter@77a2aa4a]" test-instance-name="" name="shouldMapWithCustomConverter" duration-ms="1" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapWithCustomConverter -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.iterable.CollectionWithConverter@77a2aa4a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:52Z" finished-at="2018-05-26T09:30:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.iterable.CollectionWithConverter -->
      <class name="org.modelmapper.internal.TypeInfoRegistryTest">
        <test-method status="PASS" signature="shouldHashCorrectly1()[pri:0, instance:org.modelmapper.internal.TypeInfoRegistryTest@48cd9a2c]" test-instance-name="" name="shouldHashCorrectly1" duration-ms="0" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHashCorrectly1 -->
        <test-method status="PASS" signature="shouldHashCorrectly2()[pri:0, instance:org.modelmapper.internal.TypeInfoRegistryTest@48cd9a2c]" test-instance-name="" name="shouldHashCorrectly2" duration-ms="1" started-at="2018-05-26T09:30:55Z" finished-at="2018-05-26T09:30:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHashCorrectly2 -->
      </class> <!-- org.modelmapper.internal.TypeInfoRegistryTest -->
      <class name="org.modelmapper.bugs.GH287">
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH287@46d567cb]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapFinalClassWithoutNullPointerException()[pri:0, instance:org.modelmapper.bugs.GH287@46d567cb]" test-instance-name="" name="shouldMapFinalClassWithoutNullPointerException" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapFinalClassWithoutNullPointerException -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH287@46d567cb]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapFinalClassWithoutNullPointerException2()[pri:0, instance:org.modelmapper.bugs.GH287@46d567cb]" test-instance-name="" name="shouldMapFinalClassWithoutNullPointerException2" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapFinalClassWithoutNullPointerException2 -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH287@46d567cb]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
        <test-method status="PASS" signature="shouldMapFinalClassWithoutNullPointerException3()[pri:0, instance:org.modelmapper.bugs.GH287@46d567cb]" test-instance-name="" name="shouldMapFinalClassWithoutNullPointerException3" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMapFinalClassWithoutNullPointerException3 -->
      </class> <!-- org.modelmapper.bugs.GH287 -->
      <class name="org.modelmapper.internal.ExplicitMappingBuilderTest">
        <test-method status="PASS" signature="shouldBuildConditionalMappingsWithConverter()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldBuildConditionalMappingsWithConverter" duration-ms="6" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBuildConditionalMappingsWithConverter -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldBuildConditionalSkippedMappings()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldBuildConditionalSkippedMappings" duration-ms="6" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBuildConditionalSkippedMappings -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldBuildDeepMappings()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldBuildDeepMappings" duration-ms="9" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBuildDeepMappings -->
        <test-method status="PASS" signature="shouldBuildMappings()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldBuildMappings" duration-ms="6" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBuildMappings -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldBuildMappingsWithBrokenHashCode()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldBuildMappingsWithBrokenHashCode" duration-ms="11" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBuildMappingsWithBrokenHashCode -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldBuildMappingsWithConverter()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldBuildMappingsWithConverter" duration-ms="5" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBuildMappingsWithConverter -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldBuildSkippedMappings()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldBuildSkippedMappings" duration-ms="13" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBuildSkippedMappings -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenDestinationMethodIsFinal()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenDestinationMethodIsFinal" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenDestinationMethodIsFinal -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenDestinationTypeIsFinal()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenDestinationTypeIsFinal" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenDestinationTypeIsFinal -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenDuplicateMappingsAreDefined()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenDuplicateMappingsAreDefined" duration-ms="5" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenDuplicateMappingsAreDefined -->
        <test-method status="PASS" signature="shouldThrowWhenInvalidDestinationMethod()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenInvalidDestinationMethod" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenInvalidDestinationMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenInvalidSourceAndDestinationMethods()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenInvalidSourceAndDestinationMethods" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenInvalidSourceAndDestinationMethods -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenInvalidSourceMethod()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenInvalidSourceMethod" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenInvalidSourceMethod -->
        <test-method status="PASS" signature="shouldThrowWhenMapWithMissingDestination1()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenMapWithMissingDestination1" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenMapWithMissingDestination1 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenMapWithMissingDestination2()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenMapWithMissingDestination2" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenMapWithMissingDestination2 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenMapWithMissingSource()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenMapWithMissingSource" duration-ms="6" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenMapWithMissingSource -->
        <test-method status="PASS" signature="shouldThrowWhenMapWithMissingSourceAndDestination()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenMapWithMissingSourceAndDestination" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenMapWithMissingSourceAndDestination -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenMappingDestinationFieldWithoutSourceAndConverter()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenMappingDestinationFieldWithoutSourceAndConverter" duration-ms="6" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenMappingDestinationFieldWithoutSourceAndConverter -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenNullPointerInConfigure()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenNullPointerInConfigure" duration-ms="5" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenNullPointerInConfigure -->
        <test-method status="PASS" signature="shouldThrowWhenSkipWithMissingDestination1()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenSkipWithMissingDestination1" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenSkipWithMissingDestination1 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenSkipWithMissingDestination2()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenSkipWithMissingDestination2" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenSkipWithMissingDestination2 -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenSkipWithMissingSourceAndDestination()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenSkipWithMissingSourceAndDestination" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenSkipWithMissingSourceAndDestination -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenSourceMethodIsFinal()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenSourceMethodIsFinal" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenSourceMethodIsFinal -->
        <test-method status="PASS" signature="shouldThrowWhenSourceTypeIsFinal()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenSourceTypeIsFinal" duration-ms="1" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenSourceTypeIsFinal -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="shouldThrowWhenUsingConditionalSkipWithoutSpecifyingSource()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="shouldThrowWhenUsingConditionalSkipWithoutSpecifyingSource" duration-ms="7" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowWhenUsingConditionalSkipWithoutSpecifyingSource -->
        <test-method status="PASS" signature="init()[pri:0, instance:org.modelmapper.internal.ExplicitMappingBuilderTest@2eaef76d]" test-instance-name="" name="init" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
      </class> <!-- org.modelmapper.internal.ExplicitMappingBuilderTest -->
      <class name="org.modelmapper.bugs.GH283">
        <test-method status="PASS" signature="test()[pri:0, instance:org.modelmapper.bugs.GH283@373f7450]" test-instance-name="" name="test" duration-ms="11" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.bugs.GH283@373f7450]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.bugs.GH283 -->
      <class name="org.modelmapper.functional.converter.ExistingDestinationTest">
        <test-method status="PASS" signature="shouldConvertWithExistingDestination()[pri:0, instance:org.modelmapper.functional.converter.ExistingDestinationTest@10c2064a]" test-instance-name="" name="shouldConvertWithExistingDestination" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertWithExistingDestination -->
        <test-method status="PASS" signature="initContext()[pri:0, instance:org.modelmapper.functional.converter.ExistingDestinationTest@10c2064a]" test-instance-name="" name="initContext" is-config="true" duration-ms="0" started-at="2018-05-26T09:30:53Z" finished-at="2018-05-26T09:30:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initContext -->
      </class> <!-- org.modelmapper.functional.converter.ExistingDestinationTest -->
    </test> <!-- All -->
  </suite> <!-- ModelMapper suite -->
</testng-results>
