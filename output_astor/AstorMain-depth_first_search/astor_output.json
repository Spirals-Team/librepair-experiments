{"general":{"NR_RIGHT_COMPILATIONS":5,"NR_ERRONEOUS_VARIANCES":null,"OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":1,"NR_GENERATIONS":6,"TOTAL_TIME":3.619,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"12","VALIDATION":"|true|0|5|[]|","patchhunks":[{"LOCATION":"java_programs.DEPTH_FIRST_SEARCH","PATH":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/output_astor\\\/AstorMain-depth_first_search\\\/src\\\/default\\\/java_programs\\\/DEPTH_FIRST_SEARCH.java","INGREDIENT_SCOPE":"-","ORIGINAL_CODE":"search(successornodes)","BUGGY_CODE_TYPE":"CtInvocationImpl|CtIfImpl","OPERATOR":"ExpressionReplaceOperator","MODIFIED_FILE_PATH":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/.\\\/output_astor\\\/AstorMain-depth_first_search\\\/\\\/src\\\/\\\/variant-12_f\\\/java_programs\\\/DEPTH_FIRST_SEARCH.java","LINE":"23","SUSPICIOUNESS":"0.577","MP_RANKING":"1","PATCH_HUNK_CODE":"node == node","PATCH_HUNK_TYPE":"CtBinaryOperatorImpl|CtIfImpl"}],"TIME":"3","GENERATION":"6","FOLDER_SOLUTION_CODE":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/.\\\/output_astor\\\/AstorMain-depth_first_search\\\/\\\/bin\\\/\\\/variant-12","PATCH_DIFF_ORIG":"--- java_programs\\\/DEPTH_FIRST_SEARCH.java\\n+++ java_programs\\\/DEPTH_FIRST_SEARCH.java\\n@@ -1,34 +1,32 @@\\n package java_programs;\\n-import java.util.*;\\n-\\\/*\\n- * To change this template, choose Tools | Templates\\n- * and open the template in the editor.\\n- *\\\/\\n-\\n-\\\/**\\n- *\\n- * @author derricklin\\n- *\\\/\\n+\\n+\\n public class DEPTH_FIRST_SEARCH {\\n-    public boolean depth_first_search(Node startnode, Node goalnode) {\\n-        Set<Node> nodesvisited = new HashSet<>();\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\tpublic boolean depth_first_search(java_programs.Node startnode, java_programs.Node goalnode) {\\n+\\t\\tjava.util.Set<java_programs.Node> nodesvisited = new java.util.HashSet<>();\\n         class Search {\\n-            boolean search(Node node) {\\n+\\t\\t\\tboolean search(java_programs.Node node) {\\n                 if (nodesvisited.contains(node)) {\\n                     return false;\\n                 } else if (node == goalnode) {\\n                     return true;\\n                 } else {\\n-                    for (Node successornodes : node.getSuccessors()) {\\n-\\t                    if (search(successornodes)) { return true; }\\n+\\t\\t\\t\\t\\t\\tfor (java_programs.Node successornodes : node.getSuccessors()) {\\n+\\t\\t\\t\\t\\t\\t\\tif (node == node) { \\t\\t\\t\\t\\t\\t\\t\\treturn true;}\\n                     }\\n                 }\\n                 return false;\\n             }\\n-        };\\n+\\t\\t}\\n \\n         Search s = new Search();\\n         return s.search(startnode);\\n-    }\\n-\\n-}\\n+\\t}}\\n\\\\ No newline at end of file\\n\\n"}]}