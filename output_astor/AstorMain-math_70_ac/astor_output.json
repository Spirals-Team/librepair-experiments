{"general":{"NR_RIGHT_COMPILATIONS":1,"NR_ERRONEOUS_VARIANCES":null,"OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":null,"NR_GENERATIONS":1,"TOTAL_TIME":13.477,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"2","VALIDATION":"|true|0|2181|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.analysis.solvers.BisectionSolver","PATH":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/output_astor\\\/AstorMain-math_70_ac\\\/src\\\/default\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/BisectionSolver.java","INGREDIENT_SCOPE":"LOCAL","ORIGINAL_CODE":"return solve(min, max)","BUGGY_CODE_TYPE":"CtReturnImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/.\\\/output_astor\\\/AstorMain-math_70_ac\\\/\\\/src\\\/\\\/variant-2_f\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/BisectionSolver.java","LINE":"72","SUSPICIOUNESS":"1","MP_RANKING":"0","PATCH_HUNK_CODE":"return solve(f, min, max)","PATCH_HUNK_TYPE":"CtReturnImpl|CtBlockImpl"}],"TIME":"13","GENERATION":"1","FOLDER_SOLUTION_CODE":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/.\\\/output_astor\\\/AstorMain-math_70_ac\\\/\\\/bin\\\/\\\/variant-2","PATCH_DIFF_ORIG":"--- org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/BisectionSolver.java\\n+++ org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/BisectionSolver.java\\n@@ -1,81 +1,81 @@\\n-\\\/*\\n- * Licensed to the Apache Software Foundation (ASF) under one or more\\n- * contributor license agreements.  See the NOTICE file distributed with\\n- * this work for additional information regarding copyright ownership.\\n- * The ASF licenses this file to You under the Apache License, Version 2.0\\n- * (the \\\"License\\\"); you may not use this file except in compliance with\\n- * the License.  You may obtain a copy of the License at\\n- *\\n- *      http:\\\/\\\/www.apache.org\\\/licenses\\\/LICENSE-2.0\\n- *\\n- * Unless required by applicable law or agreed to in writing, software\\n- * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n- * See the License for the specific language governing permissions and\\n- * limitations under the License.\\n- *\\\/\\n package org.apache.commons.math.analysis.solvers;\\n \\n-import org.apache.commons.math.FunctionEvaluationException;\\n-import org.apache.commons.math.MaxIterationsExceededException;\\n-import org.apache.commons.math.analysis.UnivariateRealFunction;\\n-\\n-\\\/**\\n- * Implements the <a href=\\\"http:\\\/\\\/mathworld.wolfram.com\\\/Bisection.html\\\">\\n- * bisection algorithm<\\\/a> for finding zeros of univariate real functions.\\n- * <p>\\n- * The function should be continuous but not necessarily smooth.<\\\/p>\\n- *\\n- * @version $Revision$ $Date$\\n- *\\\/\\n-public class BisectionSolver extends UnivariateRealSolverImpl {\\n-\\n-    \\\/**\\n-     * Construct a solver for the given function.\\n-     *\\n-     * @param f function to solve.\\n-     * @deprecated as of 2.0 the function to solve is passed as an argument\\n-     * to the {@link #solve(UnivariateRealFunction, double, double)} or\\n-     * {@link UnivariateRealSolverImpl#solve(UnivariateRealFunction, double, double, double)}\\n-     * method.\\n-     *\\\/\\n-    @Deprecated\\n-    public BisectionSolver(UnivariateRealFunction f) {\\n-        super(f, 100, 1E-6);\\n-    }\\n-\\n-    \\\/**\\n-     * Construct a solver.\\n-     *\\n-     *\\\/\\n+\\n+public class BisectionSolver extends \\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t@java.lang.Deprecated\\n+\\tpublic BisectionSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {\\n+\\t\\tsuper(f, 100, 1.0E-6);\\n+\\t}\\n+\\n+\\n+\\n+\\n+\\n     public BisectionSolver() {\\n-        super(100, 1E-6);\\n+\\t\\tsuper(100, 1.0E-6);\\n     }\\n \\n-    \\\/** {@inheritDoc} *\\\/\\n-    @Deprecated\\n-    public double solve(double min, double max, double initial)\\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\\n+\\n+\\t@java.lang.Deprecated\\n+\\tpublic double solve(double min, double max, double initial) throws \\n+\\torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {\\n         return solve(f, min, max);\\n     }\\n \\n-    \\\/** {@inheritDoc} *\\\/\\n-    @Deprecated\\n-    public double solve(double min, double max)\\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\\n+\\n+\\t@java.lang.Deprecated\\n+\\tpublic double solve(double min, double max) throws \\n+\\torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {\\n         return solve(f, min, max);\\n     }\\n \\n-    \\\/** {@inheritDoc} *\\\/\\n-    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\\n-       return solve(min, max);\\n+\\n+\\tpublic double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double min, double max, double initial) throws \\n+\\torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException { \\t\\treturn solve(f, min, max);\\n+\\n     \\n     }\\n \\n-    \\\/** {@inheritDoc} *\\\/\\n-    public double solve(final UnivariateRealFunction f, double min, double max)\\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\\n+\\n+\\tpublic double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double min, double max) throws \\n+\\torg.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {\\n \\n         clearResult();\\n         verifyInterval(min,max);\\n@@ -84,27 +84,26 @@\\n         double fmin;\\n \\n         int i = 0;\\n-        while (i < maximalIterationCount) {\\n-            m = UnivariateRealSolverUtils.midpoint(min, max);\\n+\\t\\twhile (i < (maximalIterationCount)) {\\n+\\t\\t\\tm = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);\\n            fmin = f.value(min);\\n            fm = f.value(m);\\n \\n-            if (fm * fmin > 0.0) {\\n-                \\\/\\\/ max and m bracket the root.\\n+\\t\\t\\tif ((fm * fmin) > 0.0) {\\n+\\n                 min = m;\\n             } else {\\n-                \\\/\\\/ min and m bracket the root.\\n+\\n                 max = m;\\n             }\\n \\n-            if (Math.abs(max - min) <= absoluteAccuracy) {\\n-                m = UnivariateRealSolverUtils.midpoint(min, max);\\n+\\t\\t\\tif ((java.lang.Math.abs((max - min))) <= (absoluteAccuracy)) {\\n+\\t\\t\\t\\tm = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);\\n                 setResult(m, i);\\n                 return m;\\n             }\\n             ++i;\\n         }\\n \\n-        throw new MaxIterationsExceededException(maximalIterationCount);\\n-    }\\n-}\\n+\\t\\tthrow new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);\\n+\\t}}\\n\\\\ No newline at end of file\\n\\n"}]}