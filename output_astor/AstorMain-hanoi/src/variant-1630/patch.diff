--- java_programs/HANOI.java
+++ java_programs/HANOI.java
@@ -1,31 +1,31 @@
 package java_programs;
-import java.util.*;
 
-/*
- * To change this template, choose Tools | Templates
- * and open the template in the editor.
- */
-
-/**
- *
- * @author derricklin
- */
+
 public class HANOI {
-    // default start=1, end=3
-    public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {
-        ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();
+
+
+
+
+
+
+
+
+
+
+	public static java.util.List<java_programs.HANOI.Pair<java.lang.Integer, java.lang.Integer>> hanoi(int height, int start, int end) {
+		java.util.ArrayList<java_programs.HANOI.Pair<java.lang.Integer, java.lang.Integer>> steps = new java.util.ArrayList<java_programs.HANOI.Pair<java.lang.Integer, java.lang.Integer>>();
 
         if (height > 0) {
-            PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();
+			java.util.PriorityQueue<java.lang.Integer> crap_set = new java.util.PriorityQueue<java.lang.Integer>();
             crap_set.add(1);
             crap_set.add(2);
             crap_set.add(3);
             crap_set.remove(start);
             crap_set.remove(end);
             int helper = crap_set.poll();
-            steps.addAll(hanoi(height-1, start, helper));
-            steps.add(new Pair<Integer,Integer>(start, helper));
-            steps.addAll(hanoi(height-1, helper, end));
+			steps.addAll(java_programs.HANOI.hanoi((height - 1), start, helper));
+			steps.add(new java_programs.HANOI.Pair<java.lang.Integer, java.lang.Integer>(start, end));
+			steps.addAll(java_programs.HANOI.hanoi((height - 1), helper, end));
         }
 
         return steps;
@@ -33,8 +33,8 @@
 
 
     public static class Pair<F, S> {
-        private F first; //first member of pair
-        private S second; //second member of pair
+		private F first;
+		private S second;
 
         public Pair(F first, S second) {
             this.first = first;
@@ -57,9 +57,8 @@
             return second;
         }
 
-        @Override
-        public String toString() {
-            return "(" + String.valueOf(first) + ", " + String.valueOf(second) + ")";
-        }
-    }
+		@java.lang.Override
+		public java.lang.String toString() {
+			return ((("(" + (java.lang.String.valueOf(first))) + ", ") + (java.lang.String.valueOf(second))) + ")";
 }
+	}}
\ No newline at end of file

