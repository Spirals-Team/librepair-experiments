--- java_programs/SHORTEST_PATH_LENGTHS.java
+++ java_programs/SHORTEST_PATH_LENGTHS.java
@@ -1,43 +1,42 @@
 package java_programs;
-import java.util.*;
-import java.lang.Math.*;
-/*
- * To change this template, choose Tools | Templates
- * and open the template in the editor.
- */
-
-/**
- *
- * @author Angela Chen
- */
+
+
 public class SHORTEST_PATH_LENGTHS {
-    // Define Infinite as a large enough value. This value will be used
-    // for vertices not connected to each other
-    final static int INF = 99999;
-    public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {
-        Map<List<Integer>,Integer> length_by_path = new HashMap<>();
+
+
+
+
+
+
+
+
+
+
+
+	static final int INF = 99999;
+	public static java.util.Map<java.util.List<java.lang.Integer>, java.lang.Integer> shortest_path_lengths(int numNodes, java.util.Map<java.util.List<java.lang.Integer>, java.lang.Integer> length_by_edge) {
+		java.util.Map<java.util.List<java.lang.Integer>, java.lang.Integer> length_by_path = new java.util.HashMap<>();
         for (int i = 0; i < numNodes; i++) {
             for (int j =0; j < numNodes; j++) {
-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
+				java.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));
                 if (i == j) {
                     length_by_path.put(edge, 0);
-                }
-                else if (length_by_edge.containsKey(edge) ) {
+				}else 
+				{ 					if (length_by_edge.containsKey(edge)) {
                     length_by_path.put(edge, length_by_edge.get(edge));
                 } else {
-                    length_by_path.put(edge, INF);
-                }
-            }
-        }
-        for (int k = 0; k < numNodes; k++) {
-            for (int i = 0; i < numNodes; i++) {
-                for (int j = 0; j < numNodes; j++) {
-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));
-                    length_by_path.put(Arrays.asList(i,j), update_length);
-                }
-            }
-        }
-        return length_by_path;
-    }
+						length_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);
 }
+
+
+
+
+
+
+
+
+
+
+
+					return length_by_path;}}} 		for (int k = 0; k < numNodes; k++) { 			for (int i = 0; i < numNodes; i++) { 				for (int j = 0; j < numNodes; j++) { 					int update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); 					length_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} 		return length_by_path;
+	}}
\ No newline at end of file

