{"general":{"NR_RIGHT_COMPILATIONS":30,"OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":47,"NR_GENERATIONS":77,"TOTAL_TIME":9.898,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"154","VALIDATION":"|true|0|4|[]|","patchhunks":[{"LOCATION":"java_programs.SHORTEST_PATH_LENGTHS","PATH":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/398358880\\\/output_astor\\\/AstorMain-shortest_path_lengths\\\/src\\\/default\\\/java_programs\\\/SHORTEST_PATH_LENGTHS.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"1","INGREDIENT_PARENT":"return length_by_path","PATCH_HUNK_TYPE":"CtReturnImpl|CtBlockImpl","ORIGINAL_CODE":"for (int j = 0; j < numNodes; j++) {\\n\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n\\tif (i == j) {\\n\\t\\tlength_by_path.put(edge, 0);\\n\\t}else\\n\\t\\tif (length_by_edge.containsKey(edge)) {\\n\\t\\t\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n\\t\\t}else {\\n\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n\\t\\t}\\n}","BUGGY_CODE_TYPE":"CtForImpl|CtBlockImpl","OPERATOR":"InsertAfterOp","MODIFIED_FILE_PATH":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/398358880\\\/.\\\/output_astor\\\/AstorMain-shortest_path_lengths\\\/\\\/src\\\/\\\/variant-154_f\\\/java_programs\\\/SHORTEST_PATH_LENGTHS.java","LINE":"20","MP_RANKING":"2","PATCH_HUNK_CODE":"return length_by_path"}],"TIME":"9","GENERATION":"77","FOLDER_SOLUTION_CODE":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/398358880\\\/.\\\/output_astor\\\/AstorMain-shortest_path_lengths\\\/\\\/bin\\\/\\\/variant-154","PATCH_DIFF_FORMATTED":"--- java_programs\\\/SHORTEST_PATH_LENGTHS.java\\n+++ java_programs\\\/SHORTEST_PATH_LENGTHS.java\\n@@ -19,6 +19,7 @@\\n \\t\\t\\t\\t\\t}\\n \\n \\t\\t\\t}\\n+\\t\\t\\treturn length_by_path;\\n \\t\\t}\\n \\t\\tfor (int k = 0; k < numNodes; k++) {\\n \\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n\\n","PATCH_DIFF_ORIG":"--- java_programs\\\/SHORTEST_PATH_LENGTHS.java\\n+++ java_programs\\\/SHORTEST_PATH_LENGTHS.java\\n@@ -28,15 +28,15 @@\\n \\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tfor (int k = 0; k < numNodes; k++) {\\n-\\t\\t\\tfor (int i = 0; i < numNodes; i++) {\\n-\\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) {\\n-\\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), \\n-\\t\\t\\t\\t\\t((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k)))));\\n-\\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn length_by_path;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\treturn length_by_path;} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n \\t}}\\n\\\\ No newline at end of file\\n\\n"}]}