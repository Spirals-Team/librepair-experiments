{"general":{"NR_RIGHT_COMPILATIONS":217,"NR_ERRONEOUS_VARIANCES":null,"OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":98,"NR_GENERATIONS":315,"TOTAL_TIME":119.541,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"630","VALIDATION":"|true|0|4|[]|","patchhunks":[{"LOCATION":"java_programs.SHORTEST_PATH_LENGTHS","PATH":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/output_astor\\\/AstorMain-shortest_path_lengths\\\/src\\\/default\\\/java_programs\\\/SHORTEST_PATH_LENGTHS.java","INGREDIENT_SCOPE":"LOCAL","ORIGINAL_CODE":"if (length_by_edge.containsKey(edge)) {\\n\\tlength_by_path.put(edge, length_by_edge.get(edge));\\n}else {\\n\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n}","BUGGY_CODE_TYPE":"CtIfImpl|CtBlockImpl","OPERATOR":"InsertAfterOp","MODIFIED_FILE_PATH":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/.\\\/output_astor\\\/AstorMain-shortest_path_lengths\\\/\\\/src\\\/\\\/variant-630_f\\\/java_programs\\\/SHORTEST_PATH_LENGTHS.java","LINE":"25","SUSPICIOUNESS":"1","MP_RANKING":"6","PATCH_HUNK_CODE":"return length_by_path","PATCH_HUNK_TYPE":"CtReturnImpl|CtBlockImpl"}],"TIME":"119","GENERATION":"315","FOLDER_SOLUTION_CODE":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/.\\\/output_astor\\\/AstorMain-shortest_path_lengths\\\/\\\/bin\\\/\\\/variant-630","PATCH_DIFF_ORIG":"--- java_programs\\\/SHORTEST_PATH_LENGTHS.java\\n+++ java_programs\\\/SHORTEST_PATH_LENGTHS.java\\n@@ -1,43 +1,42 @@\\n package java_programs;\\n-import java.util.*;\\n-import java.lang.Math.*;\\n-\\\/*\\n- * To change this template, choose Tools | Templates\\n- * and open the template in the editor.\\n- *\\\/\\n-\\n-\\\/**\\n- *\\n- * @author Angela Chen\\n- *\\\/\\n+\\n+\\n public class SHORTEST_PATH_LENGTHS {\\n-    \\\/\\\/ Define Infinite as a large enough value. This value will be used\\n-    \\\/\\\/ for vertices not connected to each other\\n-    final static int INF = 99999;\\n-    public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\\n-        Map<List<Integer>,Integer> length_by_path = new HashMap<>();\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\tstatic final int INF = 99999;\\n+\\tpublic static java.util.Map<java.util.List<java.lang.Integer>, java.lang.Integer> shortest_path_lengths(int numNodes, java.util.Map<java.util.List<java.lang.Integer>, java.lang.Integer> length_by_edge) {\\n+\\t\\tjava.util.Map<java.util.List<java.lang.Integer>, java.lang.Integer> length_by_path = new java.util.HashMap<>();\\n         for (int i = 0; i < numNodes; i++) {\\n             for (int j =0; j < numNodes; j++) {\\n-                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\\n+\\t\\t\\t\\tjava.util.List<java.lang.Integer> edge = new java.util.ArrayList<>(java.util.Arrays.asList(i, j));\\n                 if (i == j) {\\n                     length_by_path.put(edge, 0);\\n-                }\\n-                else if (length_by_edge.containsKey(edge) ) {\\n+\\t\\t\\t\\t}else \\n+\\t\\t\\t\\t{ \\t\\t\\t\\t\\tif (length_by_edge.containsKey(edge)) {\\n                     length_by_path.put(edge, length_by_edge.get(edge));\\n                 } else {\\n-                    length_by_path.put(edge, INF);\\n-                }\\n-            }\\n-        }\\n-        for (int k = 0; k < numNodes; k++) {\\n-            for (int i = 0; i < numNodes; i++) {\\n-                for (int j = 0; j < numNodes; j++) {\\n-                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\\n-                            length_by_path.get(Arrays.asList(i,k)) + length_by_path.get(Arrays.asList(j,k)));\\n-                    length_by_path.put(Arrays.asList(i,j), update_length);\\n-                }\\n-            }\\n-        }\\n-        return length_by_path;\\n-    }\\n+\\t\\t\\t\\t\\t\\tlength_by_path.put(edge, java_programs.SHORTEST_PATH_LENGTHS.INF);\\n }\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\t\\t\\treturn length_by_path;}}} \\t\\tfor (int k = 0; k < numNodes; k++) { \\t\\t\\tfor (int i = 0; i < numNodes; i++) { \\t\\t\\t\\tfor (int j = 0; j < numNodes; j++) { \\t\\t\\t\\t\\tint update_length = java.lang.Math.min(length_by_path.get(java.util.Arrays.asList(i, j)), ((length_by_path.get(java.util.Arrays.asList(i, k))) + (length_by_path.get(java.util.Arrays.asList(j, k))))); \\t\\t\\t\\t\\tlength_by_path.put(java.util.Arrays.asList(i, j), update_length);}}} \\t\\treturn length_by_path;\\n+\\t}}\\n\\\\ No newline at end of file\\n\\n"}]}