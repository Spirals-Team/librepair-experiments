{"general":{"NR_RIGHT_COMPILATIONS":272,"NR_ERRONEOUS_VARIANCES":null,"OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":117,"NR_GENERATIONS":389,"TOTAL_TIME":175.619,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"778","VALIDATION":"|true|0|4|[]|","patchhunks":[{"LOCATION":"java_programs.LIS","PATH":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/output_astor\\\/AstorMain-lis\\\/src\\\/default\\\/java_programs\\\/LIS.java","INGREDIENT_SCOPE":"-","ORIGINAL_CODE":"if ((length == longest) || (val < (arr[ends.get((length + 1))]))) {\\n\\tends.put((length + 1), i);\\n\\tlongest = length + 1;\\n}","BUGGY_CODE_TYPE":"CtIfImpl|CtBlockImpl","OPERATOR":"InsertBeforeOp","MODIFIED_FILE_PATH":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/.\\\/output_astor\\\/AstorMain-lis\\\/\\\/src\\\/\\\/variant-778_f\\\/java_programs\\\/LIS.java","LINE":"29","SUSPICIOUNESS":"1","MP_RANKING":"9","PATCH_HUNK_CODE":"ends.put((length + 1), i)","PATCH_HUNK_TYPE":"CtInvocationImpl|CtBlockImpl"}],"TIME":"175","GENERATION":"389","FOLDER_SOLUTION_CODE":"\\\/root\\\/workspace\\\/SpoonLabs\\\/astor\\\/421464781\\\/.\\\/output_astor\\\/AstorMain-lis\\\/\\\/bin\\\/\\\/variant-778","PATCH_DIFF_ORIG":"--- java_programs\\\/LIS.java\\n+++ java_programs\\\/LIS.java\\n@@ -1,38 +1,37 @@\\n package java_programs;\\n-import java.util.*;\\n-\\\/*\\n- * To change this template, choose Tools | Templates\\n- * and open the template in the editor.\\n- *\\\/\\n-\\n-\\\/**\\n- *\\n- * @author derricklin\\n- *\\\/\\n+\\n+\\n public class LIS {\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n     public static int lis(int[] arr) {\\n-        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\\n+\\t\\tjava.util.Map<java.lang.Integer, java.lang.Integer> ends = new java.util.HashMap<java.lang.Integer, java.lang.Integer>(100);\\n         int longest = 0;\\n \\n         int i = 0;\\n         for (int val : arr) {\\n \\n-            ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\\n-            for (int j=1; j < longest+1; j++) {\\n-                if (arr[ends.get(j)] < val) {\\n+\\t\\t\\tjava.util.ArrayList<java.lang.Integer> prefix_lengths = new java.util.ArrayList<java.lang.Integer>(100);\\n+\\t\\t\\tfor (int j = 1; j < (longest + 1); j++) {\\n+\\t\\t\\t\\tif ((arr[ends.get(j)]) < val) {\\n                     prefix_lengths.add(j);\\n                 }\\n             }\\n \\n-            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\\n+\\t\\t\\tint length = (!(prefix_lengths.isEmpty())) ? java.util.Collections.max(prefix_lengths) : 0;\\n \\n-            if (length == longest || val < arr[ends.get(length+1)]) {\\n-                ends.put(length+1, i);\\n+\\n+\\t\\t\\tends.put((length + 1), i); \\t\\t\\tif ((length == longest) || (val < (arr[ends.get((length + 1))]))) { \\t\\t\\t\\tends.put((length + 1), i);\\n                 longest = length + 1;\\n             }\\n \\n             i++;\\n         }\\n         return longest;\\n-    }\\n-}\\n+\\t}}\\n\\\\ No newline at end of file\\n\\n"}]}