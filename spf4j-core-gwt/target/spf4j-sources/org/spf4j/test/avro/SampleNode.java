/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.spf4j.test.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SampleNode extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1815164552686597530L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SampleNode\",\"namespace\":\"org.spf4j.test.avro\",\"fields\":[{\"name\":\"count\",\"type\":\"int\",\"default\":0},{\"name\":\"subNodes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SamplePair\",\"fields\":[{\"name\":\"method\",\"type\":{\"type\":\"record\",\"name\":\"Method\",\"fields\":[{\"name\":\"declaringClass\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"methodName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"node\",\"type\":\"SampleNode\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int count;
  @Deprecated public java.util.List<org.spf4j.test.avro.SamplePair> subNodes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SampleNode() {}

  /**
   * All-args constructor.
   * @param count The new value for count
   * @param subNodes The new value for subNodes
   */
  public SampleNode(java.lang.Integer count, java.util.List<org.spf4j.test.avro.SamplePair> subNodes) {
    this.count = count;
    this.subNodes = subNodes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return count;
    case 1: return subNodes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: count = (java.lang.Integer)value$; break;
    case 1: subNodes = (java.util.List<org.spf4j.test.avro.SamplePair>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public java.lang.Integer getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.lang.Integer value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'subNodes' field.
   * @return The value of the 'subNodes' field.
   */
  public java.util.List<org.spf4j.test.avro.SamplePair> getSubNodes() {
    return subNodes;
  }

  /**
   * Sets the value of the 'subNodes' field.
   * @param value the value to set.
   */
  public void setSubNodes(java.util.List<org.spf4j.test.avro.SamplePair> value) {
    this.subNodes = value;
  }

  /**
   * Creates a new SampleNode RecordBuilder.
   * @return A new SampleNode RecordBuilder
   */
  public static org.spf4j.test.avro.SampleNode.Builder newBuilder() {
    return new org.spf4j.test.avro.SampleNode.Builder();
  }

  /**
   * Creates a new SampleNode RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SampleNode RecordBuilder
   */
  public static org.spf4j.test.avro.SampleNode.Builder newBuilder(org.spf4j.test.avro.SampleNode.Builder other) {
    return new org.spf4j.test.avro.SampleNode.Builder(other);
  }

  /**
   * Creates a new SampleNode RecordBuilder by copying an existing SampleNode instance.
   * @param other The existing instance to copy.
   * @return A new SampleNode RecordBuilder
   */
  public static org.spf4j.test.avro.SampleNode.Builder newBuilder(org.spf4j.test.avro.SampleNode other) {
    return new org.spf4j.test.avro.SampleNode.Builder(other);
  }

  /**
   * RecordBuilder for SampleNode instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SampleNode>
    implements org.apache.avro.data.RecordBuilder<SampleNode> {

    private int count;
    private java.util.List<org.spf4j.test.avro.SamplePair> subNodes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.spf4j.test.avro.SampleNode.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.count)) {
        this.count = data().deepCopy(fields()[0].schema(), other.count);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subNodes)) {
        this.subNodes = data().deepCopy(fields()[1].schema(), other.subNodes);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SampleNode instance
     * @param other The existing instance to copy.
     */
    private Builder(org.spf4j.test.avro.SampleNode other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.count)) {
        this.count = data().deepCopy(fields()[0].schema(), other.count);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subNodes)) {
        this.subNodes = data().deepCopy(fields()[1].schema(), other.subNodes);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public java.lang.Integer getCount() {
      return count;
    }

    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public org.spf4j.test.avro.SampleNode.Builder setCount(int value) {
      validate(fields()[0], value);
      this.count = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public org.spf4j.test.avro.SampleNode.Builder clearCount() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subNodes' field.
      * @return The value.
      */
    public java.util.List<org.spf4j.test.avro.SamplePair> getSubNodes() {
      return subNodes;
    }

    /**
      * Sets the value of the 'subNodes' field.
      * @param value The value of 'subNodes'.
      * @return This builder.
      */
    public org.spf4j.test.avro.SampleNode.Builder setSubNodes(java.util.List<org.spf4j.test.avro.SamplePair> value) {
      validate(fields()[1], value);
      this.subNodes = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subNodes' field has been set.
      * @return True if the 'subNodes' field has been set, false otherwise.
      */
    public boolean hasSubNodes() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subNodes' field.
      * @return This builder.
      */
    public org.spf4j.test.avro.SampleNode.Builder clearSubNodes() {
      subNodes = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SampleNode build() {
      try {
        SampleNode record = new SampleNode();
        record.count = fieldSetFlags()[0] ? this.count : (java.lang.Integer) defaultValue(fields()[0]);
        record.subNodes = fieldSetFlags()[1] ? this.subNodes : (java.util.List<org.spf4j.test.avro.SamplePair>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
