/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.spf4j.test.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SamplePair extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4650358724521376049L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SamplePair\",\"namespace\":\"org.spf4j.test.avro\",\"fields\":[{\"name\":\"method\",\"type\":{\"type\":\"record\",\"name\":\"Method\",\"fields\":[{\"name\":\"declaringClass\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"methodName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"node\",\"type\":{\"type\":\"record\",\"name\":\"SampleNode\",\"fields\":[{\"name\":\"count\",\"type\":\"int\",\"default\":0},{\"name\":\"subNodes\",\"type\":{\"type\":\"array\",\"items\":\"SamplePair\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public org.spf4j.test.avro.Method method;
  @Deprecated public org.spf4j.test.avro.SampleNode node;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SamplePair() {}

  /**
   * All-args constructor.
   * @param method The new value for method
   * @param node The new value for node
   */
  public SamplePair(org.spf4j.test.avro.Method method, org.spf4j.test.avro.SampleNode node) {
    this.method = method;
    this.node = node;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return method;
    case 1: return node;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: method = (org.spf4j.test.avro.Method)value$; break;
    case 1: node = (org.spf4j.test.avro.SampleNode)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'method' field.
   * @return The value of the 'method' field.
   */
  public org.spf4j.test.avro.Method getMethod() {
    return method;
  }

  /**
   * Sets the value of the 'method' field.
   * @param value the value to set.
   */
  public void setMethod(org.spf4j.test.avro.Method value) {
    this.method = value;
  }

  /**
   * Gets the value of the 'node' field.
   * @return The value of the 'node' field.
   */
  public org.spf4j.test.avro.SampleNode getNode() {
    return node;
  }

  /**
   * Sets the value of the 'node' field.
   * @param value the value to set.
   */
  public void setNode(org.spf4j.test.avro.SampleNode value) {
    this.node = value;
  }

  /**
   * Creates a new SamplePair RecordBuilder.
   * @return A new SamplePair RecordBuilder
   */
  public static org.spf4j.test.avro.SamplePair.Builder newBuilder() {
    return new org.spf4j.test.avro.SamplePair.Builder();
  }

  /**
   * Creates a new SamplePair RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SamplePair RecordBuilder
   */
  public static org.spf4j.test.avro.SamplePair.Builder newBuilder(org.spf4j.test.avro.SamplePair.Builder other) {
    return new org.spf4j.test.avro.SamplePair.Builder(other);
  }

  /**
   * Creates a new SamplePair RecordBuilder by copying an existing SamplePair instance.
   * @param other The existing instance to copy.
   * @return A new SamplePair RecordBuilder
   */
  public static org.spf4j.test.avro.SamplePair.Builder newBuilder(org.spf4j.test.avro.SamplePair other) {
    return new org.spf4j.test.avro.SamplePair.Builder(other);
  }

  /**
   * RecordBuilder for SamplePair instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SamplePair>
    implements org.apache.avro.data.RecordBuilder<SamplePair> {

    private org.spf4j.test.avro.Method method;
    private org.spf4j.test.avro.Method.Builder methodBuilder;
    private org.spf4j.test.avro.SampleNode node;
    private org.spf4j.test.avro.SampleNode.Builder nodeBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.spf4j.test.avro.SamplePair.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.method)) {
        this.method = data().deepCopy(fields()[0].schema(), other.method);
        fieldSetFlags()[0] = true;
      }
      if (other.hasMethodBuilder()) {
        this.methodBuilder = org.spf4j.test.avro.Method.newBuilder(other.getMethodBuilder());
      }
      if (isValidValue(fields()[1], other.node)) {
        this.node = data().deepCopy(fields()[1].schema(), other.node);
        fieldSetFlags()[1] = true;
      }
      if (other.hasNodeBuilder()) {
        this.nodeBuilder = org.spf4j.test.avro.SampleNode.newBuilder(other.getNodeBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing SamplePair instance
     * @param other The existing instance to copy.
     */
    private Builder(org.spf4j.test.avro.SamplePair other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.method)) {
        this.method = data().deepCopy(fields()[0].schema(), other.method);
        fieldSetFlags()[0] = true;
      }
      this.methodBuilder = null;
      if (isValidValue(fields()[1], other.node)) {
        this.node = data().deepCopy(fields()[1].schema(), other.node);
        fieldSetFlags()[1] = true;
      }
      this.nodeBuilder = null;
    }

    /**
      * Gets the value of the 'method' field.
      * @return The value.
      */
    public org.spf4j.test.avro.Method getMethod() {
      return method;
    }

    /**
      * Sets the value of the 'method' field.
      * @param value The value of 'method'.
      * @return This builder.
      */
    public org.spf4j.test.avro.SamplePair.Builder setMethod(org.spf4j.test.avro.Method value) {
      validate(fields()[0], value);
      this.methodBuilder = null;
      this.method = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'method' field has been set.
      * @return True if the 'method' field has been set, false otherwise.
      */
    public boolean hasMethod() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'method' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.spf4j.test.avro.Method.Builder getMethodBuilder() {
      if (methodBuilder == null) {
        if (hasMethod()) {
          setMethodBuilder(org.spf4j.test.avro.Method.newBuilder(method));
        } else {
          setMethodBuilder(org.spf4j.test.avro.Method.newBuilder());
        }
      }
      return methodBuilder;
    }

    /**
     * Sets the Builder instance for the 'method' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.spf4j.test.avro.SamplePair.Builder setMethodBuilder(org.spf4j.test.avro.Method.Builder value) {
      clearMethod();
      methodBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'method' field has an active Builder instance
     * @return True if the 'method' field has an active Builder instance
     */
    public boolean hasMethodBuilder() {
      return methodBuilder != null;
    }

    /**
      * Clears the value of the 'method' field.
      * @return This builder.
      */
    public org.spf4j.test.avro.SamplePair.Builder clearMethod() {
      method = null;
      methodBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'node' field.
      * @return The value.
      */
    public org.spf4j.test.avro.SampleNode getNode() {
      return node;
    }

    /**
      * Sets the value of the 'node' field.
      * @param value The value of 'node'.
      * @return This builder.
      */
    public org.spf4j.test.avro.SamplePair.Builder setNode(org.spf4j.test.avro.SampleNode value) {
      validate(fields()[1], value);
      this.nodeBuilder = null;
      this.node = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'node' field has been set.
      * @return True if the 'node' field has been set, false otherwise.
      */
    public boolean hasNode() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'node' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.spf4j.test.avro.SampleNode.Builder getNodeBuilder() {
      if (nodeBuilder == null) {
        if (hasNode()) {
          setNodeBuilder(org.spf4j.test.avro.SampleNode.newBuilder(node));
        } else {
          setNodeBuilder(org.spf4j.test.avro.SampleNode.newBuilder());
        }
      }
      return nodeBuilder;
    }

    /**
     * Sets the Builder instance for the 'node' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.spf4j.test.avro.SamplePair.Builder setNodeBuilder(org.spf4j.test.avro.SampleNode.Builder value) {
      clearNode();
      nodeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'node' field has an active Builder instance
     * @return True if the 'node' field has an active Builder instance
     */
    public boolean hasNodeBuilder() {
      return nodeBuilder != null;
    }

    /**
      * Clears the value of the 'node' field.
      * @return This builder.
      */
    public org.spf4j.test.avro.SamplePair.Builder clearNode() {
      node = null;
      nodeBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SamplePair build() {
      try {
        SamplePair record = new SamplePair();
        if (methodBuilder != null) {
          record.method = this.methodBuilder.build();
        } else {
          record.method = fieldSetFlags()[0] ? this.method : (org.spf4j.test.avro.Method) defaultValue(fields()[0]);
        }
        if (nodeBuilder != null) {
          record.node = this.nodeBuilder.build();
        } else {
          record.node = fieldSetFlags()[1] ? this.node : (org.spf4j.test.avro.SampleNode) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
