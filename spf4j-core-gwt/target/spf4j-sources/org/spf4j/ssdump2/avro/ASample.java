/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.spf4j.ssdump2.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** record representing the samples where a particular method was executed */
@org.apache.avro.specific.AvroGenerated
public class ASample extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6990977272037953L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ASample\",\"namespace\":\"org.spf4j.ssdump2.avro\",\"doc\":\"record representing the samples where a particular method was executed\",\"fields\":[{\"name\":\"id\",\"type\":\"int\",\"doc\":\"the id of the sample\"},{\"name\":\"parentId\",\"type\":\"int\",\"doc\":\"the parent sample where current method was executed from.\"},{\"name\":\"count\",\"type\":\"int\",\"doc\":\"the number of time this records method has been caught in execution\"},{\"name\":\"method\",\"type\":{\"type\":\"record\",\"name\":\"AMethod\",\"doc\":\"record representing all java methods with the same name from a particular class.\",\"fields\":[{\"name\":\"declaringClass\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the declaring class of the method.\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the name of the method\"}]},\"doc\":\"the method caught in execution\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** the id of the sample */
  @Deprecated public int id;
  /** the parent sample where current method was executed from. */
  @Deprecated public int parentId;
  /** the number of time this records method has been caught in execution */
  @Deprecated public int count;
  /** the method caught in execution */
  @Deprecated public org.spf4j.ssdump2.avro.AMethod method;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ASample() {}

  /**
   * All-args constructor.
   * @param id the id of the sample
   * @param parentId the parent sample where current method was executed from.
   * @param count the number of time this records method has been caught in execution
   * @param method the method caught in execution
   */
  public ASample(java.lang.Integer id, java.lang.Integer parentId, java.lang.Integer count, org.spf4j.ssdump2.avro.AMethod method) {
    this.id = id;
    this.parentId = parentId;
    this.count = count;
    this.method = method;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return parentId;
    case 2: return count;
    case 3: return method;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: parentId = (java.lang.Integer)value$; break;
    case 2: count = (java.lang.Integer)value$; break;
    case 3: method = (org.spf4j.ssdump2.avro.AMethod)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return the id of the sample
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * the id of the sample
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'parentId' field.
   * @return the parent sample where current method was executed from.
   */
  public java.lang.Integer getParentId() {
    return parentId;
  }

  /**
   * Sets the value of the 'parentId' field.
   * the parent sample where current method was executed from.
   * @param value the value to set.
   */
  public void setParentId(java.lang.Integer value) {
    this.parentId = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return the number of time this records method has been caught in execution
   */
  public java.lang.Integer getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * the number of time this records method has been caught in execution
   * @param value the value to set.
   */
  public void setCount(java.lang.Integer value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'method' field.
   * @return the method caught in execution
   */
  public org.spf4j.ssdump2.avro.AMethod getMethod() {
    return method;
  }

  /**
   * Sets the value of the 'method' field.
   * the method caught in execution
   * @param value the value to set.
   */
  public void setMethod(org.spf4j.ssdump2.avro.AMethod value) {
    this.method = value;
  }

  /**
   * Creates a new ASample RecordBuilder.
   * @return A new ASample RecordBuilder
   */
  public static org.spf4j.ssdump2.avro.ASample.Builder newBuilder() {
    return new org.spf4j.ssdump2.avro.ASample.Builder();
  }

  /**
   * Creates a new ASample RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ASample RecordBuilder
   */
  public static org.spf4j.ssdump2.avro.ASample.Builder newBuilder(org.spf4j.ssdump2.avro.ASample.Builder other) {
    return new org.spf4j.ssdump2.avro.ASample.Builder(other);
  }

  /**
   * Creates a new ASample RecordBuilder by copying an existing ASample instance.
   * @param other The existing instance to copy.
   * @return A new ASample RecordBuilder
   */
  public static org.spf4j.ssdump2.avro.ASample.Builder newBuilder(org.spf4j.ssdump2.avro.ASample other) {
    return new org.spf4j.ssdump2.avro.ASample.Builder(other);
  }

  /**
   * RecordBuilder for ASample instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ASample>
    implements org.apache.avro.data.RecordBuilder<ASample> {

    /** the id of the sample */
    private int id;
    /** the parent sample where current method was executed from. */
    private int parentId;
    /** the number of time this records method has been caught in execution */
    private int count;
    /** the method caught in execution */
    private org.spf4j.ssdump2.avro.AMethod method;
    private org.spf4j.ssdump2.avro.AMethod.Builder methodBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.spf4j.ssdump2.avro.ASample.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parentId)) {
        this.parentId = data().deepCopy(fields()[1].schema(), other.parentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.method)) {
        this.method = data().deepCopy(fields()[3].schema(), other.method);
        fieldSetFlags()[3] = true;
      }
      if (other.hasMethodBuilder()) {
        this.methodBuilder = org.spf4j.ssdump2.avro.AMethod.newBuilder(other.getMethodBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ASample instance
     * @param other The existing instance to copy.
     */
    private Builder(org.spf4j.ssdump2.avro.ASample other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parentId)) {
        this.parentId = data().deepCopy(fields()[1].schema(), other.parentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.method)) {
        this.method = data().deepCopy(fields()[3].schema(), other.method);
        fieldSetFlags()[3] = true;
      }
      this.methodBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * the id of the sample
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * the id of the sample
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.spf4j.ssdump2.avro.ASample.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * the id of the sample
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * the id of the sample
      * @return This builder.
      */
    public org.spf4j.ssdump2.avro.ASample.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentId' field.
      * the parent sample where current method was executed from.
      * @return The value.
      */
    public java.lang.Integer getParentId() {
      return parentId;
    }

    /**
      * Sets the value of the 'parentId' field.
      * the parent sample where current method was executed from.
      * @param value The value of 'parentId'.
      * @return This builder.
      */
    public org.spf4j.ssdump2.avro.ASample.Builder setParentId(int value) {
      validate(fields()[1], value);
      this.parentId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'parentId' field has been set.
      * the parent sample where current method was executed from.
      * @return True if the 'parentId' field has been set, false otherwise.
      */
    public boolean hasParentId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'parentId' field.
      * the parent sample where current method was executed from.
      * @return This builder.
      */
    public org.spf4j.ssdump2.avro.ASample.Builder clearParentId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * the number of time this records method has been caught in execution
      * @return The value.
      */
    public java.lang.Integer getCount() {
      return count;
    }

    /**
      * Sets the value of the 'count' field.
      * the number of time this records method has been caught in execution
      * @param value The value of 'count'.
      * @return This builder.
      */
    public org.spf4j.ssdump2.avro.ASample.Builder setCount(int value) {
      validate(fields()[2], value);
      this.count = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * the number of time this records method has been caught in execution
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'count' field.
      * the number of time this records method has been caught in execution
      * @return This builder.
      */
    public org.spf4j.ssdump2.avro.ASample.Builder clearCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'method' field.
      * the method caught in execution
      * @return The value.
      */
    public org.spf4j.ssdump2.avro.AMethod getMethod() {
      return method;
    }

    /**
      * Sets the value of the 'method' field.
      * the method caught in execution
      * @param value The value of 'method'.
      * @return This builder.
      */
    public org.spf4j.ssdump2.avro.ASample.Builder setMethod(org.spf4j.ssdump2.avro.AMethod value) {
      validate(fields()[3], value);
      this.methodBuilder = null;
      this.method = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'method' field has been set.
      * the method caught in execution
      * @return True if the 'method' field has been set, false otherwise.
      */
    public boolean hasMethod() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'method' field and creates one if it doesn't exist yet.
     * the method caught in execution
     * @return This builder.
     */
    public org.spf4j.ssdump2.avro.AMethod.Builder getMethodBuilder() {
      if (methodBuilder == null) {
        if (hasMethod()) {
          setMethodBuilder(org.spf4j.ssdump2.avro.AMethod.newBuilder(method));
        } else {
          setMethodBuilder(org.spf4j.ssdump2.avro.AMethod.newBuilder());
        }
      }
      return methodBuilder;
    }

    /**
     * Sets the Builder instance for the 'method' field
     * the method caught in execution
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.spf4j.ssdump2.avro.ASample.Builder setMethodBuilder(org.spf4j.ssdump2.avro.AMethod.Builder value) {
      clearMethod();
      methodBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'method' field has an active Builder instance
     * the method caught in execution
     * @return True if the 'method' field has an active Builder instance
     */
    public boolean hasMethodBuilder() {
      return methodBuilder != null;
    }

    /**
      * Clears the value of the 'method' field.
      * the method caught in execution
      * @return This builder.
      */
    public org.spf4j.ssdump2.avro.ASample.Builder clearMethod() {
      method = null;
      methodBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ASample build() {
      try {
        ASample record = new ASample();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.parentId = fieldSetFlags()[1] ? this.parentId : (java.lang.Integer) defaultValue(fields()[1]);
        record.count = fieldSetFlags()[2] ? this.count : (java.lang.Integer) defaultValue(fields()[2]);
        if (methodBuilder != null) {
          record.method = this.methodBuilder.build();
        } else {
          record.method = fieldSetFlags()[3] ? this.method : (org.spf4j.ssdump2.avro.AMethod) defaultValue(fields()[3]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
