/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.spf4j.tsdb2.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** a block of table data */
@org.apache.avro.specific.AvroGenerated
public class DataBlock extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8714978951056778267L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataBlock\",\"namespace\":\"org.spf4j.tsdb2.avro\",\"doc\":\"a block of table data\",\"fields\":[{\"name\":\"baseTimestamp\",\"type\":\"long\",\"doc\":\"the UTC timestamp that all timestamps in this block are relative to\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"DataRow\",\"doc\":\"data row\",\"fields\":[{\"name\":\"relTimeStamp\",\"type\":\"int\",\"doc\":\"row relative timestamp\"},{\"name\":\"tableDefId\",\"type\":\"long\",\"doc\":\"the file pointer where the Table definition for the data is\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":\"long\"},\"doc\":\"the row data\"}]}},\"doc\":\"rows\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** the UTC timestamp that all timestamps in this block are relative to */
  @Deprecated public long baseTimestamp;
  /** rows */
  @Deprecated public java.util.List<org.spf4j.tsdb2.avro.DataRow> values;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataBlock() {}

  /**
   * All-args constructor.
   * @param baseTimestamp the UTC timestamp that all timestamps in this block are relative to
   * @param values rows
   */
  public DataBlock(java.lang.Long baseTimestamp, java.util.List<org.spf4j.tsdb2.avro.DataRow> values) {
    this.baseTimestamp = baseTimestamp;
    this.values = values;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return baseTimestamp;
    case 1: return values;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: baseTimestamp = (java.lang.Long)value$; break;
    case 1: values = (java.util.List<org.spf4j.tsdb2.avro.DataRow>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'baseTimestamp' field.
   * @return the UTC timestamp that all timestamps in this block are relative to
   */
  public java.lang.Long getBaseTimestamp() {
    return baseTimestamp;
  }

  /**
   * Sets the value of the 'baseTimestamp' field.
   * the UTC timestamp that all timestamps in this block are relative to
   * @param value the value to set.
   */
  public void setBaseTimestamp(java.lang.Long value) {
    this.baseTimestamp = value;
  }

  /**
   * Gets the value of the 'values' field.
   * @return rows
   */
  public java.util.List<org.spf4j.tsdb2.avro.DataRow> getValues() {
    return values;
  }

  /**
   * Sets the value of the 'values' field.
   * rows
   * @param value the value to set.
   */
  public void setValues(java.util.List<org.spf4j.tsdb2.avro.DataRow> value) {
    this.values = value;
  }

  /**
   * Creates a new DataBlock RecordBuilder.
   * @return A new DataBlock RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.DataBlock.Builder newBuilder() {
    return new org.spf4j.tsdb2.avro.DataBlock.Builder();
  }

  /**
   * Creates a new DataBlock RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataBlock RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.DataBlock.Builder newBuilder(org.spf4j.tsdb2.avro.DataBlock.Builder other) {
    return new org.spf4j.tsdb2.avro.DataBlock.Builder(other);
  }

  /**
   * Creates a new DataBlock RecordBuilder by copying an existing DataBlock instance.
   * @param other The existing instance to copy.
   * @return A new DataBlock RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.DataBlock.Builder newBuilder(org.spf4j.tsdb2.avro.DataBlock other) {
    return new org.spf4j.tsdb2.avro.DataBlock.Builder(other);
  }

  /**
   * RecordBuilder for DataBlock instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataBlock>
    implements org.apache.avro.data.RecordBuilder<DataBlock> {

    /** the UTC timestamp that all timestamps in this block are relative to */
    private long baseTimestamp;
    /** rows */
    private java.util.List<org.spf4j.tsdb2.avro.DataRow> values;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.spf4j.tsdb2.avro.DataBlock.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.baseTimestamp)) {
        this.baseTimestamp = data().deepCopy(fields()[0].schema(), other.baseTimestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.values)) {
        this.values = data().deepCopy(fields()[1].schema(), other.values);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataBlock instance
     * @param other The existing instance to copy.
     */
    private Builder(org.spf4j.tsdb2.avro.DataBlock other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.baseTimestamp)) {
        this.baseTimestamp = data().deepCopy(fields()[0].schema(), other.baseTimestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.values)) {
        this.values = data().deepCopy(fields()[1].schema(), other.values);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'baseTimestamp' field.
      * the UTC timestamp that all timestamps in this block are relative to
      * @return The value.
      */
    public java.lang.Long getBaseTimestamp() {
      return baseTimestamp;
    }

    /**
      * Sets the value of the 'baseTimestamp' field.
      * the UTC timestamp that all timestamps in this block are relative to
      * @param value The value of 'baseTimestamp'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.DataBlock.Builder setBaseTimestamp(long value) {
      validate(fields()[0], value);
      this.baseTimestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'baseTimestamp' field has been set.
      * the UTC timestamp that all timestamps in this block are relative to
      * @return True if the 'baseTimestamp' field has been set, false otherwise.
      */
    public boolean hasBaseTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'baseTimestamp' field.
      * the UTC timestamp that all timestamps in this block are relative to
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.DataBlock.Builder clearBaseTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'values' field.
      * rows
      * @return The value.
      */
    public java.util.List<org.spf4j.tsdb2.avro.DataRow> getValues() {
      return values;
    }

    /**
      * Sets the value of the 'values' field.
      * rows
      * @param value The value of 'values'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.DataBlock.Builder setValues(java.util.List<org.spf4j.tsdb2.avro.DataRow> value) {
      validate(fields()[1], value);
      this.values = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'values' field has been set.
      * rows
      * @return True if the 'values' field has been set, false otherwise.
      */
    public boolean hasValues() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'values' field.
      * rows
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.DataBlock.Builder clearValues() {
      values = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public DataBlock build() {
      try {
        DataBlock record = new DataBlock();
        record.baseTimestamp = fieldSetFlags()[0] ? this.baseTimestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.values = fieldSetFlags()[1] ? this.values : (java.util.List<org.spf4j.tsdb2.avro.DataRow>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
