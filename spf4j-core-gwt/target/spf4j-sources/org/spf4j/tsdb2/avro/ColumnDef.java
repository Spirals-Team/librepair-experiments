/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.spf4j.tsdb2.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** column definition */
@org.apache.avro.specific.AvroGenerated
public class ColumnDef extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -782733243901333924L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ColumnDef\",\"namespace\":\"org.spf4j.tsdb2.avro\",\"doc\":\"column definition\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"column name\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Type\",\"symbols\":[\"LONG\",\"DOUBLE\"]},\"doc\":\"column value type\",\"default\":\"LONG\"},{\"name\":\"unitOfMeasurement\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"unit of measurement for the data\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Column description\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** column name */
  @Deprecated public java.lang.String name;
  /** column value type */
  @Deprecated public org.spf4j.tsdb2.avro.Type type;
  /** unit of measurement for the data */
  @Deprecated public java.lang.String unitOfMeasurement;
  /** Column description */
  @Deprecated public java.lang.String description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ColumnDef() {}

  /**
   * All-args constructor.
   * @param name column name
   * @param type column value type
   * @param unitOfMeasurement unit of measurement for the data
   * @param description Column description
   */
  public ColumnDef(java.lang.String name, org.spf4j.tsdb2.avro.Type type, java.lang.String unitOfMeasurement, java.lang.String description) {
    this.name = name;
    this.type = type;
    this.unitOfMeasurement = unitOfMeasurement;
    this.description = description;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return type;
    case 2: return unitOfMeasurement;
    case 3: return description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: type = (org.spf4j.tsdb2.avro.Type)value$; break;
    case 2: unitOfMeasurement = (java.lang.String)value$; break;
    case 3: description = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return column name
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * column name
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return column value type
   */
  public org.spf4j.tsdb2.avro.Type getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * column value type
   * @param value the value to set.
   */
  public void setType(org.spf4j.tsdb2.avro.Type value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'unitOfMeasurement' field.
   * @return unit of measurement for the data
   */
  public java.lang.String getUnitOfMeasurement() {
    return unitOfMeasurement;
  }

  /**
   * Sets the value of the 'unitOfMeasurement' field.
   * unit of measurement for the data
   * @param value the value to set.
   */
  public void setUnitOfMeasurement(java.lang.String value) {
    this.unitOfMeasurement = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Column description
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Column description
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Creates a new ColumnDef RecordBuilder.
   * @return A new ColumnDef RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.ColumnDef.Builder newBuilder() {
    return new org.spf4j.tsdb2.avro.ColumnDef.Builder();
  }

  /**
   * Creates a new ColumnDef RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ColumnDef RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.ColumnDef.Builder newBuilder(org.spf4j.tsdb2.avro.ColumnDef.Builder other) {
    return new org.spf4j.tsdb2.avro.ColumnDef.Builder(other);
  }

  /**
   * Creates a new ColumnDef RecordBuilder by copying an existing ColumnDef instance.
   * @param other The existing instance to copy.
   * @return A new ColumnDef RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.ColumnDef.Builder newBuilder(org.spf4j.tsdb2.avro.ColumnDef other) {
    return new org.spf4j.tsdb2.avro.ColumnDef.Builder(other);
  }

  /**
   * RecordBuilder for ColumnDef instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ColumnDef>
    implements org.apache.avro.data.RecordBuilder<ColumnDef> {

    /** column name */
    private java.lang.String name;
    /** column value type */
    private org.spf4j.tsdb2.avro.Type type;
    /** unit of measurement for the data */
    private java.lang.String unitOfMeasurement;
    /** Column description */
    private java.lang.String description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.spf4j.tsdb2.avro.ColumnDef.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unitOfMeasurement)) {
        this.unitOfMeasurement = data().deepCopy(fields()[2].schema(), other.unitOfMeasurement);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.description)) {
        this.description = data().deepCopy(fields()[3].schema(), other.description);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ColumnDef instance
     * @param other The existing instance to copy.
     */
    private Builder(org.spf4j.tsdb2.avro.ColumnDef other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unitOfMeasurement)) {
        this.unitOfMeasurement = data().deepCopy(fields()[2].schema(), other.unitOfMeasurement);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.description)) {
        this.description = data().deepCopy(fields()[3].schema(), other.description);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * column name
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * column name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.ColumnDef.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * column name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * column name
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.ColumnDef.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * column value type
      * @return The value.
      */
    public org.spf4j.tsdb2.avro.Type getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * column value type
      * @param value The value of 'type'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.ColumnDef.Builder setType(org.spf4j.tsdb2.avro.Type value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * column value type
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * column value type
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.ColumnDef.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitOfMeasurement' field.
      * unit of measurement for the data
      * @return The value.
      */
    public java.lang.String getUnitOfMeasurement() {
      return unitOfMeasurement;
    }

    /**
      * Sets the value of the 'unitOfMeasurement' field.
      * unit of measurement for the data
      * @param value The value of 'unitOfMeasurement'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.ColumnDef.Builder setUnitOfMeasurement(java.lang.String value) {
      validate(fields()[2], value);
      this.unitOfMeasurement = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'unitOfMeasurement' field has been set.
      * unit of measurement for the data
      * @return True if the 'unitOfMeasurement' field has been set, false otherwise.
      */
    public boolean hasUnitOfMeasurement() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'unitOfMeasurement' field.
      * unit of measurement for the data
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.ColumnDef.Builder clearUnitOfMeasurement() {
      unitOfMeasurement = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Column description
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Column description
      * @param value The value of 'description'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.ColumnDef.Builder setDescription(java.lang.String value) {
      validate(fields()[3], value);
      this.description = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Column description
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'description' field.
      * Column description
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.ColumnDef.Builder clearDescription() {
      description = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ColumnDef build() {
      try {
        ColumnDef record = new ColumnDef();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (org.spf4j.tsdb2.avro.Type) defaultValue(fields()[1]);
        record.unitOfMeasurement = fieldSetFlags()[2] ? this.unitOfMeasurement : (java.lang.String) defaultValue(fields()[2]);
        record.description = fieldSetFlags()[3] ? this.description : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
