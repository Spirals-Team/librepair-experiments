/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.spf4j.tsdb2.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** data row */
@org.apache.avro.specific.AvroGenerated
public class DataRow extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8170305062686259922L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataRow\",\"namespace\":\"org.spf4j.tsdb2.avro\",\"doc\":\"data row\",\"fields\":[{\"name\":\"relTimeStamp\",\"type\":\"int\",\"doc\":\"row relative timestamp\"},{\"name\":\"tableDefId\",\"type\":\"long\",\"doc\":\"the file pointer where the Table definition for the data is\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":\"long\"},\"doc\":\"the row data\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** row relative timestamp */
  @Deprecated public int relTimeStamp;
  /** the file pointer where the Table definition for the data is */
  @Deprecated public long tableDefId;
  /** the row data */
  @Deprecated public java.util.List<java.lang.Long> data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataRow() {}

  /**
   * All-args constructor.
   * @param relTimeStamp row relative timestamp
   * @param tableDefId the file pointer where the Table definition for the data is
   * @param data the row data
   */
  public DataRow(java.lang.Integer relTimeStamp, java.lang.Long tableDefId, java.util.List<java.lang.Long> data) {
    this.relTimeStamp = relTimeStamp;
    this.tableDefId = tableDefId;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return relTimeStamp;
    case 1: return tableDefId;
    case 2: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: relTimeStamp = (java.lang.Integer)value$; break;
    case 1: tableDefId = (java.lang.Long)value$; break;
    case 2: data = (java.util.List<java.lang.Long>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'relTimeStamp' field.
   * @return row relative timestamp
   */
  public java.lang.Integer getRelTimeStamp() {
    return relTimeStamp;
  }

  /**
   * Sets the value of the 'relTimeStamp' field.
   * row relative timestamp
   * @param value the value to set.
   */
  public void setRelTimeStamp(java.lang.Integer value) {
    this.relTimeStamp = value;
  }

  /**
   * Gets the value of the 'tableDefId' field.
   * @return the file pointer where the Table definition for the data is
   */
  public java.lang.Long getTableDefId() {
    return tableDefId;
  }

  /**
   * Sets the value of the 'tableDefId' field.
   * the file pointer where the Table definition for the data is
   * @param value the value to set.
   */
  public void setTableDefId(java.lang.Long value) {
    this.tableDefId = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return the row data
   */
  public java.util.List<java.lang.Long> getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * the row data
   * @param value the value to set.
   */
  public void setData(java.util.List<java.lang.Long> value) {
    this.data = value;
  }

  /**
   * Creates a new DataRow RecordBuilder.
   * @return A new DataRow RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.DataRow.Builder newBuilder() {
    return new org.spf4j.tsdb2.avro.DataRow.Builder();
  }

  /**
   * Creates a new DataRow RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataRow RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.DataRow.Builder newBuilder(org.spf4j.tsdb2.avro.DataRow.Builder other) {
    return new org.spf4j.tsdb2.avro.DataRow.Builder(other);
  }

  /**
   * Creates a new DataRow RecordBuilder by copying an existing DataRow instance.
   * @param other The existing instance to copy.
   * @return A new DataRow RecordBuilder
   */
  public static org.spf4j.tsdb2.avro.DataRow.Builder newBuilder(org.spf4j.tsdb2.avro.DataRow other) {
    return new org.spf4j.tsdb2.avro.DataRow.Builder(other);
  }

  /**
   * RecordBuilder for DataRow instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataRow>
    implements org.apache.avro.data.RecordBuilder<DataRow> {

    /** row relative timestamp */
    private int relTimeStamp;
    /** the file pointer where the Table definition for the data is */
    private long tableDefId;
    /** the row data */
    private java.util.List<java.lang.Long> data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.spf4j.tsdb2.avro.DataRow.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.relTimeStamp)) {
        this.relTimeStamp = data().deepCopy(fields()[0].schema(), other.relTimeStamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tableDefId)) {
        this.tableDefId = data().deepCopy(fields()[1].schema(), other.tableDefId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataRow instance
     * @param other The existing instance to copy.
     */
    private Builder(org.spf4j.tsdb2.avro.DataRow other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.relTimeStamp)) {
        this.relTimeStamp = data().deepCopy(fields()[0].schema(), other.relTimeStamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tableDefId)) {
        this.tableDefId = data().deepCopy(fields()[1].schema(), other.tableDefId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'relTimeStamp' field.
      * row relative timestamp
      * @return The value.
      */
    public java.lang.Integer getRelTimeStamp() {
      return relTimeStamp;
    }

    /**
      * Sets the value of the 'relTimeStamp' field.
      * row relative timestamp
      * @param value The value of 'relTimeStamp'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.DataRow.Builder setRelTimeStamp(int value) {
      validate(fields()[0], value);
      this.relTimeStamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'relTimeStamp' field has been set.
      * row relative timestamp
      * @return True if the 'relTimeStamp' field has been set, false otherwise.
      */
    public boolean hasRelTimeStamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'relTimeStamp' field.
      * row relative timestamp
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.DataRow.Builder clearRelTimeStamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tableDefId' field.
      * the file pointer where the Table definition for the data is
      * @return The value.
      */
    public java.lang.Long getTableDefId() {
      return tableDefId;
    }

    /**
      * Sets the value of the 'tableDefId' field.
      * the file pointer where the Table definition for the data is
      * @param value The value of 'tableDefId'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.DataRow.Builder setTableDefId(long value) {
      validate(fields()[1], value);
      this.tableDefId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tableDefId' field has been set.
      * the file pointer where the Table definition for the data is
      * @return True if the 'tableDefId' field has been set, false otherwise.
      */
    public boolean hasTableDefId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tableDefId' field.
      * the file pointer where the Table definition for the data is
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.DataRow.Builder clearTableDefId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * the row data
      * @return The value.
      */
    public java.util.List<java.lang.Long> getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * the row data
      * @param value The value of 'data'.
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.DataRow.Builder setData(java.util.List<java.lang.Long> value) {
      validate(fields()[2], value);
      this.data = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * the row data
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'data' field.
      * the row data
      * @return This builder.
      */
    public org.spf4j.tsdb2.avro.DataRow.Builder clearData() {
      data = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public DataRow build() {
      try {
        DataRow record = new DataRow();
        record.relTimeStamp = fieldSetFlags()[0] ? this.relTimeStamp : (java.lang.Integer) defaultValue(fields()[0]);
        record.tableDefId = fieldSetFlags()[1] ? this.tableDefId : (java.lang.Long) defaultValue(fields()[1]);
        record.data = fieldSetFlags()[2] ? this.data : (java.util.List<java.lang.Long>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
