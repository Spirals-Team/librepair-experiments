/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.spf4j.base.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** record representing the samples where a particular method was executed */
@org.apache.avro.specific.AvroGenerated
public class JStackTraceElement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7515890081355509441L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JStackTraceElement\",\"namespace\":\"org.spf4j.base.avro\",\"doc\":\"record representing the samples where a particular method was executed\",\"fields\":[{\"name\":\"className\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"java class name\"},{\"name\":\"methodName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"java method name\"},{\"name\":\"location\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"JFileLocation\",\"doc\":\"a location in a file\",\"fields\":[{\"name\":\"fileName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"file name\"},{\"name\":\"lineNumber\",\"type\":\"int\",\"doc\":\"line number\"}]}],\"doc\":\"location\"},{\"name\":\"packageInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"JPackageInfo\",\"doc\":\"record representing a jar archive info\",\"fields\":[{\"name\":\"url\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the package url\",\"default\":null},{\"name\":\"version\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"version from manifest\",\"default\":null}]}],\"doc\":\"package info\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** java class name */
  @Deprecated public java.lang.String className;
  /** java method name */
  @Deprecated public java.lang.String methodName;
  /** location */
  @Deprecated public org.spf4j.base.avro.JFileLocation location;
  /** package info */
  @Deprecated public org.spf4j.base.avro.JPackageInfo packageInfo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public JStackTraceElement() {}

  /**
   * All-args constructor.
   * @param className java class name
   * @param methodName java method name
   * @param location location
   * @param packageInfo package info
   */
  public JStackTraceElement(java.lang.String className, java.lang.String methodName, org.spf4j.base.avro.JFileLocation location, org.spf4j.base.avro.JPackageInfo packageInfo) {
    this.className = className;
    this.methodName = methodName;
    this.location = location;
    this.packageInfo = packageInfo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return className;
    case 1: return methodName;
    case 2: return location;
    case 3: return packageInfo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: className = (java.lang.String)value$; break;
    case 1: methodName = (java.lang.String)value$; break;
    case 2: location = (org.spf4j.base.avro.JFileLocation)value$; break;
    case 3: packageInfo = (org.spf4j.base.avro.JPackageInfo)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'className' field.
   * @return java class name
   */
  public java.lang.String getClassName() {
    return className;
  }

  /**
   * Sets the value of the 'className' field.
   * java class name
   * @param value the value to set.
   */
  public void setClassName(java.lang.String value) {
    this.className = value;
  }

  /**
   * Gets the value of the 'methodName' field.
   * @return java method name
   */
  public java.lang.String getMethodName() {
    return methodName;
  }

  /**
   * Sets the value of the 'methodName' field.
   * java method name
   * @param value the value to set.
   */
  public void setMethodName(java.lang.String value) {
    this.methodName = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return location
   */
  public org.spf4j.base.avro.JFileLocation getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * location
   * @param value the value to set.
   */
  public void setLocation(org.spf4j.base.avro.JFileLocation value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'packageInfo' field.
   * @return package info
   */
  public org.spf4j.base.avro.JPackageInfo getPackageInfo() {
    return packageInfo;
  }

  /**
   * Sets the value of the 'packageInfo' field.
   * package info
   * @param value the value to set.
   */
  public void setPackageInfo(org.spf4j.base.avro.JPackageInfo value) {
    this.packageInfo = value;
  }

  /**
   * Creates a new JStackTraceElement RecordBuilder.
   * @return A new JStackTraceElement RecordBuilder
   */
  public static org.spf4j.base.avro.JStackTraceElement.Builder newBuilder() {
    return new org.spf4j.base.avro.JStackTraceElement.Builder();
  }

  /**
   * Creates a new JStackTraceElement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new JStackTraceElement RecordBuilder
   */
  public static org.spf4j.base.avro.JStackTraceElement.Builder newBuilder(org.spf4j.base.avro.JStackTraceElement.Builder other) {
    return new org.spf4j.base.avro.JStackTraceElement.Builder(other);
  }

  /**
   * Creates a new JStackTraceElement RecordBuilder by copying an existing JStackTraceElement instance.
   * @param other The existing instance to copy.
   * @return A new JStackTraceElement RecordBuilder
   */
  public static org.spf4j.base.avro.JStackTraceElement.Builder newBuilder(org.spf4j.base.avro.JStackTraceElement other) {
    return new org.spf4j.base.avro.JStackTraceElement.Builder(other);
  }

  /**
   * RecordBuilder for JStackTraceElement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JStackTraceElement>
    implements org.apache.avro.data.RecordBuilder<JStackTraceElement> {

    /** java class name */
    private java.lang.String className;
    /** java method name */
    private java.lang.String methodName;
    /** location */
    private org.spf4j.base.avro.JFileLocation location;
    private org.spf4j.base.avro.JFileLocation.Builder locationBuilder;
    /** package info */
    private org.spf4j.base.avro.JPackageInfo packageInfo;
    private org.spf4j.base.avro.JPackageInfo.Builder packageInfoBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.spf4j.base.avro.JStackTraceElement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.className)) {
        this.className = data().deepCopy(fields()[0].schema(), other.className);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.methodName)) {
        this.methodName = data().deepCopy(fields()[1].schema(), other.methodName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = org.spf4j.base.avro.JFileLocation.newBuilder(other.getLocationBuilder());
      }
      if (isValidValue(fields()[3], other.packageInfo)) {
        this.packageInfo = data().deepCopy(fields()[3].schema(), other.packageInfo);
        fieldSetFlags()[3] = true;
      }
      if (other.hasPackageInfoBuilder()) {
        this.packageInfoBuilder = org.spf4j.base.avro.JPackageInfo.newBuilder(other.getPackageInfoBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing JStackTraceElement instance
     * @param other The existing instance to copy.
     */
    private Builder(org.spf4j.base.avro.JStackTraceElement other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.className)) {
        this.className = data().deepCopy(fields()[0].schema(), other.className);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.methodName)) {
        this.methodName = data().deepCopy(fields()[1].schema(), other.methodName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      this.locationBuilder = null;
      if (isValidValue(fields()[3], other.packageInfo)) {
        this.packageInfo = data().deepCopy(fields()[3].schema(), other.packageInfo);
        fieldSetFlags()[3] = true;
      }
      this.packageInfoBuilder = null;
    }

    /**
      * Gets the value of the 'className' field.
      * java class name
      * @return The value.
      */
    public java.lang.String getClassName() {
      return className;
    }

    /**
      * Sets the value of the 'className' field.
      * java class name
      * @param value The value of 'className'.
      * @return This builder.
      */
    public org.spf4j.base.avro.JStackTraceElement.Builder setClassName(java.lang.String value) {
      validate(fields()[0], value);
      this.className = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'className' field has been set.
      * java class name
      * @return True if the 'className' field has been set, false otherwise.
      */
    public boolean hasClassName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'className' field.
      * java class name
      * @return This builder.
      */
    public org.spf4j.base.avro.JStackTraceElement.Builder clearClassName() {
      className = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'methodName' field.
      * java method name
      * @return The value.
      */
    public java.lang.String getMethodName() {
      return methodName;
    }

    /**
      * Sets the value of the 'methodName' field.
      * java method name
      * @param value The value of 'methodName'.
      * @return This builder.
      */
    public org.spf4j.base.avro.JStackTraceElement.Builder setMethodName(java.lang.String value) {
      validate(fields()[1], value);
      this.methodName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'methodName' field has been set.
      * java method name
      * @return True if the 'methodName' field has been set, false otherwise.
      */
    public boolean hasMethodName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'methodName' field.
      * java method name
      * @return This builder.
      */
    public org.spf4j.base.avro.JStackTraceElement.Builder clearMethodName() {
      methodName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * location
      * @return The value.
      */
    public org.spf4j.base.avro.JFileLocation getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * location
      * @param value The value of 'location'.
      * @return This builder.
      */
    public org.spf4j.base.avro.JStackTraceElement.Builder setLocation(org.spf4j.base.avro.JFileLocation value) {
      validate(fields()[2], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * location
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * location
     * @return This builder.
     */
    public org.spf4j.base.avro.JFileLocation.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(org.spf4j.base.avro.JFileLocation.newBuilder(location));
        } else {
          setLocationBuilder(org.spf4j.base.avro.JFileLocation.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * location
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.spf4j.base.avro.JStackTraceElement.Builder setLocationBuilder(org.spf4j.base.avro.JFileLocation.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * location
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * location
      * @return This builder.
      */
    public org.spf4j.base.avro.JStackTraceElement.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'packageInfo' field.
      * package info
      * @return The value.
      */
    public org.spf4j.base.avro.JPackageInfo getPackageInfo() {
      return packageInfo;
    }

    /**
      * Sets the value of the 'packageInfo' field.
      * package info
      * @param value The value of 'packageInfo'.
      * @return This builder.
      */
    public org.spf4j.base.avro.JStackTraceElement.Builder setPackageInfo(org.spf4j.base.avro.JPackageInfo value) {
      validate(fields()[3], value);
      this.packageInfoBuilder = null;
      this.packageInfo = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'packageInfo' field has been set.
      * package info
      * @return True if the 'packageInfo' field has been set, false otherwise.
      */
    public boolean hasPackageInfo() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'packageInfo' field and creates one if it doesn't exist yet.
     * package info
     * @return This builder.
     */
    public org.spf4j.base.avro.JPackageInfo.Builder getPackageInfoBuilder() {
      if (packageInfoBuilder == null) {
        if (hasPackageInfo()) {
          setPackageInfoBuilder(org.spf4j.base.avro.JPackageInfo.newBuilder(packageInfo));
        } else {
          setPackageInfoBuilder(org.spf4j.base.avro.JPackageInfo.newBuilder());
        }
      }
      return packageInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'packageInfo' field
     * package info
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.spf4j.base.avro.JStackTraceElement.Builder setPackageInfoBuilder(org.spf4j.base.avro.JPackageInfo.Builder value) {
      clearPackageInfo();
      packageInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'packageInfo' field has an active Builder instance
     * package info
     * @return True if the 'packageInfo' field has an active Builder instance
     */
    public boolean hasPackageInfoBuilder() {
      return packageInfoBuilder != null;
    }

    /**
      * Clears the value of the 'packageInfo' field.
      * package info
      * @return This builder.
      */
    public org.spf4j.base.avro.JStackTraceElement.Builder clearPackageInfo() {
      packageInfo = null;
      packageInfoBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public JStackTraceElement build() {
      try {
        JStackTraceElement record = new JStackTraceElement();
        record.className = fieldSetFlags()[0] ? this.className : (java.lang.String) defaultValue(fields()[0]);
        record.methodName = fieldSetFlags()[1] ? this.methodName : (java.lang.String) defaultValue(fields()[1]);
        if (locationBuilder != null) {
          record.location = this.locationBuilder.build();
        } else {
          record.location = fieldSetFlags()[2] ? this.location : (org.spf4j.base.avro.JFileLocation) defaultValue(fields()[2]);
        }
        if (packageInfoBuilder != null) {
          record.packageInfo = this.packageInfoBuilder.build();
        } else {
          record.packageInfo = fieldSetFlags()[3] ? this.packageInfo : (org.spf4j.base.avro.JPackageInfo) defaultValue(fields()[3]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
