/* ZCompiler.java */
/* Generated By:JavaCC: Do not edit this line. ZCompiler.java */
package org.spf4j.zel.vm.gen;

import java.util.*;
import java.math.*;
import java.nio.charset.Charset;
import org.spf4j.zel.vm.*;
import org.spf4j.zel.instr.*;
import org.spf4j.zel.vm.ParsingContext.Location;
import java.io.InputStream;

public class ZCompiler implements ZCompilerConstants {

    /**
     * Compile a ZEL expression from String.
     */

    public static void compile(String source, String xpr, ParsingContext context) throws ParseException
    {
        ZCompiler parser = new ZCompiler(new java.io.StringReader(xpr));
        parser.source = source;
        parser.mainprogram(context);
    }

   /**
     * Compile a ZEL expression from Stream.
     */
    public static void compile(String source, InputStream is, Charset charset, ParsingContext context)
         throws ParseException
    {
        ZCompiler parser = new ZCompiler(new java.io.InputStreamReader(is, charset));
        parser.source = source;
        parser.mainprogram(context);
    }

    private String source;

  final public void mainprogram(ParsingContext context) throws ParseException {
    program(context);
context.generateCode(new Location(token.beginLine, token.beginColumn), org.spf4j.zel.instr.HALT.INSTANCE);
    jj_consume_token(0);
}

  final public void program(ParsingContext context) throws ParseException {
    switch (jj_nt.kind) {
    case MINUS:
    case PIPE:
    case NOT:
    case LPAREN:
    case LBRACE:
    case RETURN:
    case MEMORY:
    case SLEEP:
    case THROW:
    case FOR:
    case FUNCTION:
    case SYNC:
    case TRUE:
    case FALSE:
    case NULL:
    case E:
    case PI:
    case FIRST:
    case IF:
    case USE:
    case INTEGER:
    case FLOATING_POINT:
    case CHARACTER:
    case STRING:
    case MATCHEXP:
    case ID:{
      switch (jj_nt.kind) {
      case LBRACE:{
        programBlockStatic(context);
        break;
        }
      case MINUS:
      case PIPE:
      case NOT:
      case LPAREN:
      case RETURN:
      case MEMORY:
      case SLEEP:
      case THROW:
      case FOR:
      case FUNCTION:
      case SYNC:
      case TRUE:
      case FALSE:
      case NULL:
      case E:
      case PI:
      case FIRST:
      case IF:
      case USE:
      case INTEGER:
      case FLOATING_POINT:
      case CHARACTER:
      case STRING:
      case MATCHEXP:
      case ID:{
        statement(context);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        switch (jj_nt.kind) {
        case SCL:
        case LBRACE:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        switch (jj_nt.kind) {
        case SCL:{
          jj_consume_token(SCL);
          switch (jj_nt.kind) {
          case LBRACE:{
            programBlockStatic(context);
            break;
            }
          case MINUS:
          case PIPE:
          case NOT:
          case LPAREN:
          case RETURN:
          case MEMORY:
          case SLEEP:
          case THROW:
          case FOR:
          case FUNCTION:
          case SYNC:
          case TRUE:
          case FALSE:
          case NULL:
          case E:
          case PI:
          case FIRST:
          case IF:
          case USE:
          case INTEGER:
          case FLOATING_POINT:
          case CHARACTER:
          case STRING:
          case MATCHEXP:
          case ID:{
            statement(context);
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case LBRACE:{
          programBlockStatic(context);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
}

  final public void statement(ParsingContext context) throws ParseException {
    if (jj_2_1(2147483647)) {
      operations(context);
    } else {
      switch (jj_nt.kind) {
      case MINUS:
      case PIPE:
      case NOT:
      case LPAREN:
      case LBRACE:
      case MEMORY:
      case FUNCTION:
      case TRUE:
      case FALSE:
      case NULL:
      case E:
      case PI:
      case FIRST:
      case INTEGER:
      case FLOATING_POINT:
      case CHARACTER:
      case STRING:
      case MATCHEXP:
      case ID:{
        expression(context);
if (!(context.getLast() instanceof org.spf4j.zel.instr.CALLA)) {
        context.generateCode(new Location(token.beginLine, token.beginColumn), org.spf4j.zel.instr.SYNC.INSTANCE);
    }
        break;
        }
      case RETURN:{
        zreturn(context);
        break;
        }
      case FOR:{
        forStmt(context);
        break;
        }
      case IF:{
        ifStmt(context);
        break;
        }
      case SLEEP:{
        jj_consume_token(SLEEP);
        expression(context);
context.generateCode(new Location(token.beginLine, token.beginColumn),
                                                   org.spf4j.zel.instr.SLEEP.INSTANCE);
        break;
        }
      case THROW:{
        jj_consume_token(THROW);
        expression(context);
context.generateCode(new Location(token.beginLine, token.beginColumn),
                                                   org.spf4j.zel.instr.THROW.INSTANCE);
        break;
        }
      case SYNC:{
        jj_consume_token(SYNC);
        expression(context);
context.generateCode(new Location(token.beginLine, token.beginColumn),
                                                   org.spf4j.zel.instr.SYNC.INSTANCE);
        break;
        }
      case USE:{
        jj_consume_token(USE);
        jj_consume_token(DECIMAL);
        jj_consume_token(INTEGER);
context.generateCode(new Location(token.beginLine, token.beginColumn),
                        new org.spf4j.zel.instr.MCTX(parseInteger(token.image).intValue()));
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/**
 * The ZEL for statement, (similar with for from GO):
 *   for i = 0, result = 0; i < breakup; i = i + 1 {
 *    result = result + part[i] 
 *   };
 */
  final public 
void forStmt(ParsingContext context) throws ParseException {int condAddr = -1;
  ParsingContext postAssign = (ParsingContext) context.createSubContext();
  ParsingContext loopBlock = (ParsingContext) context.createSubContext();
  Location loc = null;
    jj_consume_token(FOR);
loc = new Location(token.beginLine, token.beginColumn);
    switch (jj_nt.kind) {
    case ID:{
      operations(context);
      label_2:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        operations(context);
      }
      jj_consume_token(SCL);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
condAddr = context.getAddress();
    logical(context);
    switch (jj_nt.kind) {
    case SCL:{
      jj_consume_token(SCL);
      operations(postAssign);
      label_3:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        operations(postAssign);
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    programBlockStatic(loopBlock);
context.generateCode(loc,
                        new org.spf4j.zel.instr.FJMP(loopBlock.getAddress() + postAssign.getAddress() + 2));
      context.generateCodeAll(loopBlock);
      context.generateCodeAll(postAssign);
      context.generateCode(new Location(token.beginLine, token.beginColumn),
                              new org.spf4j.zel.instr.JMP(condAddr - context.getAddress()));
}

/**
 * The IF statment. (Similar as in GO):
 *     if v > ma {
 *        ma = v
 *     } else if v < mi {
 *        mi = v
 *     }
 */
  final public void ifStmt(ParsingContext context) throws ParseException {int jmp1;
 int jmp2;
 boolean isElse = false;
 ParsingContext left = (ParsingContext) context.createSubContext();
 ParsingContext right = (ParsingContext) context.createSubContext();
 Location loc = null;
 Location loc2 = null;
    jj_consume_token(IF);
loc = new Location(token.beginLine, token.beginColumn);
    logical(context);
    switch (jj_nt.kind) {
    case LBRACE:{
      programBlockStatic(left);
      break;
      }
    case MINUS:
    case PIPE:
    case NOT:
    case LPAREN:
    case RETURN:
    case MEMORY:
    case SLEEP:
    case THROW:
    case FOR:
    case FUNCTION:
    case SYNC:
    case TRUE:
    case FALSE:
    case NULL:
    case E:
    case PI:
    case FIRST:
    case IF:
    case USE:
    case INTEGER:
    case FLOATING_POINT:
    case CHARACTER:
    case STRING:
    case MATCHEXP:
    case ID:{
      statement(left);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case ELSE:{
      jj_consume_token(ELSE);
isElse = true; loc2 = new Location(token.beginLine, token.beginColumn);
      switch (jj_nt.kind) {
      case LBRACE:{
        programBlockStatic(right);
        break;
        }
      case MINUS:
      case PIPE:
      case NOT:
      case LPAREN:
      case RETURN:
      case MEMORY:
      case SLEEP:
      case THROW:
      case FOR:
      case FUNCTION:
      case SYNC:
      case TRUE:
      case FALSE:
      case NULL:
      case E:
      case PI:
      case FIRST:
      case IF:
      case USE:
      case INTEGER:
      case FLOATING_POINT:
      case CHARACTER:
      case STRING:
      case MATCHEXP:
      case ID:{
        statement(right);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
context.generateCode(loc, new org.spf4j.zel.instr.FJMP(left.getAddress() + 1 + ((isElse) ? 1 : 0)));
         context.generateCodeAll(left);
         if (isElse) {
         context.generateCode(loc2, new org.spf4j.zel.instr.JMP(right.getAddress() + 1));
         context.generateCodeAll(right);
         }
}

  final public void programBlockStatic(ParsingContext context) throws ParseException {ParsingContext subCtx;
  boolean asyncForce = false;
  Location sloc = null;
  Location eloc = null;
sloc = new Location(token.beginLine, token.beginColumn);
    subCtx = programBlock(context);
try {
       eloc = new Location(token.beginLine, token.beginColumn);
       Program program = subCtx.getProgramBuilder().toProgram("block", source, org.spf4j.base.Arrays.EMPTY_STRING_ARRAY);
       context.generateCode(program.getDebugInfo(), program.getCode());
     } catch (CompileException ex) {
       {if (true) throw new ParseException(ex.getMessage());}
     }
}

/**
 * A zel program block:
 * {
 *  .....
 * }
 */
  final public ParsingContext programBlock(ParsingContext context) throws ParseException {ParsingContext subCtx = context.createSubContext();
  Location sloc = null;
  Location eloc = null;
sloc = new Location(token.beginLine, token.beginColumn);
    jj_consume_token(LBRACE);
    program(subCtx);
    jj_consume_token(RBRACE);
eloc = new Location(token.beginLine, token.beginColumn);
    subCtx.generateCode(eloc, org.spf4j.zel.instr.HALT.INSTANCE);
    {if ("" != null) return subCtx;}
    throw new Error("Missing return statement in function");
}

  final public void zreturn(ParsingContext context) throws ParseException {int nr = 0;
    jj_consume_token(RETURN);
    switch (jj_nt.kind) {
    case MINUS:
    case PIPE:
    case NOT:
    case LPAREN:
    case LBRACE:
    case MEMORY:
    case FUNCTION:
    case TRUE:
    case FALSE:
    case NULL:
    case E:
    case PI:
    case FIRST:
    case INTEGER:
    case FLOATING_POINT:
    case CHARACTER:
    case STRING:
    case MATCHEXP:
    case ID:{
      expression(context);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
context.generateCode(new Location(token.beginLine, token.beginColumn), org.spf4j.zel.instr.HALT.INSTANCE);
}

/**
 * The ZEL operations:
 *
 * Assignements: x, y, z = {1, 2, 3}; f(x) = 4;
 * Increment: x++
 * Decrement: x--
 * Swap: x <-> y
 *
 */
  final public 
void operations(ParsingContext context) throws ParseException {Location loc = null;
    if (jj_2_2(2147483647)) {
      assignement(context);
    } else if (jj_2_3(2147483647)) {
      swap(context);
    } else {
      switch (jj_nt.kind) {
      case ID:{
        assignableExpression(context);
        switch (jj_nt.kind) {
        case INC:{
          jj_consume_token(INC);
loc = new Location(token.beginLine, token.beginColumn);
    context.generateCode(loc, org.spf4j.zel.instr.INC.INSTANCE);
          break;
          }
        case DEC:{
          jj_consume_token(DEC);
loc = new Location(token.beginLine, token.beginColumn);
    context.generateCode(loc, org.spf4j.zel.instr.DEC.INSTANCE);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void assignement(ParsingContext context) throws ParseException {Location loc = null;
int nr = 0;
    assignableExpression(context);
nr++;loc = new Location(token.beginLine, token.beginColumn);
    label_4:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      assignableExpression(context);
nr++;
    }
    jj_consume_token(EQUAL);
    expression(context);
if (nr > 1) {
      context.generateCode(loc, new org.spf4j.zel.instr.MOVN(nr));
    } else {
      context.generateCode(loc, org.spf4j.zel.instr.MOV.INSTANCE);
    }
}

  final public void swap(ParsingContext context) throws ParseException {Location loc = null;
    assignableExpression(context);
    jj_consume_token(SWAP);
loc = new Location(token.beginLine, token.beginColumn);
    assignableExpression(context);
context.generateCode(loc, org.spf4j.zel.instr.SWAP.INSTANCE);
}

  final public void assignableExpression(ParsingContext context) throws ParseException {String name;
int nrParams;
    jj_consume_token(ID);
name = token.image;
            context.generateCode(new Location(token.beginLine, token.beginColumn),
                                 new org.spf4j.zel.instr.LODAX(name));
    label_5:
    while (true) {
      switch (jj_nt.kind) {
      case LPAREN:
      case LBRACKET:
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      if (jj_2_4(2)) {
        nrParams = params(context);
context.generateCode(new Location(token.beginLine, token.beginColumn),
                           new org.spf4j.zel.instr.CALLREF(nrParams));
      } else {
        switch (jj_nt.kind) {
        case LBRACKET:
        case DOT:{
          switch (jj_nt.kind) {
          case DOT:{
            jj_consume_token(DOT);
            jj_consume_token(ID);
name = token.image;
                context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(name));
            break;
            }
          case LBRACKET:{
            jj_consume_token(LBRACKET);
            expression(context);
            jj_consume_token(RBRACKET);
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
context.generateCode(new Location(token.beginLine, token.beginColumn),
                   org.spf4j.zel.instr.REF.INSTANCE);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  final public void expression(ParsingContext context) throws ParseException {
    ternary(context);
}

/**
 * The ternary operator:
 * a < 0 ? 1 : 2
 */
  final public void ternary(ParsingContext context) throws ParseException {int jmp1;
 int jmp2;
 ParsingContext left = (ParsingContext) context.createSubContext();
 ParsingContext right = (ParsingContext) context.createSubContext();
 Location loc = null;
    logical(context);
    switch (jj_nt.kind) {
    case CONDITION:{
      jj_consume_token(CONDITION);
loc = new Location(token.beginLine, token.beginColumn);
      ternary(left);
      jj_consume_token(CLM);
      ternary(right);
context.generateCode(loc, new org.spf4j.zel.instr.FJMP(left.getAddress() + 2));
         context.generateCodeAll(left);
         context.generateCode(loc, new org.spf4j.zel.instr.JMP(right.getAddress() + 1));
         context.generateCodeAll(right);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
}

/**
 * Logical operators: AND OR XOR
 */
  final public 
void logical(ParsingContext context) throws ParseException {Token x;
    compare(context);
    label_6:
    while (true) {
      switch (jj_nt.kind) {
      case AND:
      case OR:
      case XOR:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
      switch (jj_nt.kind) {
      case AND:{
        x = jj_consume_token(AND);
        break;
        }
      case OR:{
        x = jj_consume_token(OR);
        break;
        }
      case XOR:{
        x = jj_consume_token(XOR);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      compare(context);
switch (x.kind) {
                case AND:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.AND.INSTANCE);
                    break;
                case OR:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.OR.INSTANCE);
                    break;
                case XOR:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.XOR.INSTANCE);
                    break;
                default:
                    {if (true) throw new RuntimeException("Unsupported token type " + x);}
            }
    }
}

/**
 * Commparison operatiors: < > <= >= == !=
 */
  final public 
void compare(ParsingContext context) throws ParseException {Token x;
    sum(context);
    label_7:
    while (true) {
      switch (jj_nt.kind) {
      case GT:
      case LT:
      case LE:
      case GE:
      case EQ:
      case NEQ:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_7;
      }
      switch (jj_nt.kind) {
      case GT:{
        x = jj_consume_token(GT);
        break;
        }
      case LT:{
        x = jj_consume_token(LT);
        break;
        }
      case GE:{
        x = jj_consume_token(GE);
        break;
        }
      case LE:{
        x = jj_consume_token(LE);
        break;
        }
      case EQ:{
        x = jj_consume_token(EQ);
        break;
        }
      case NEQ:{
        x = jj_consume_token(NEQ);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      sum(context);
switch (x.kind) {
                case GT:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.GT.INSTANCE);
                    break;
                case LT:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.LT.INSTANCE);
                    break;
                case GE:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.GE.INSTANCE);
                    break;
                case LE:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.LE.INSTANCE);
                    break;
                case EQ:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.EQ.INSTANCE);
                    break;
                case NEQ:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.NEQ.INSTANCE);
                    break;
                default:
                    {if (true) throw new RuntimeException("Unsupported token type " + x);}

            }
    }
}

/**
 * + - operators.
 */
  final public 
void sum(ParsingContext context) throws ParseException {Token x;
    term(context);
    label_8:
    while (true) {
      switch (jj_nt.kind) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      switch (jj_nt.kind) {
      case PLUS:{
        x = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        x = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term(context);
if ( x.kind == PLUS )
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.ADD.INSTANCE);
            else
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.SUB.INSTANCE);
    }
}

/**
 * * / % operators
 */
  final public 
void term(ParsingContext context) throws ParseException {Token x;
    exponent(context);
    label_9:
    while (true) {
      switch (jj_nt.kind) {
      case MULTIPLY:
      case DIVIDE:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      switch (jj_nt.kind) {
      case MULTIPLY:{
        x = jj_consume_token(MULTIPLY);
        break;
        }
      case DIVIDE:{
        x = jj_consume_token(DIVIDE);
        break;
        }
      case MOD:{
        x = jj_consume_token(MOD);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exponent(context);
if ( x.kind == MULTIPLY )
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.MUL.INSTANCE);
            else if ( x.kind == DIVIDE )
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.DIV.INSTANCE);
        else context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.MOD.INSTANCE);
    }
}

/**
 * the exponent operator: ^
 */
  final public void exponent(ParsingContext context) throws ParseException {Location loc = null;
    unaryPost(context);
    label_10:
    while (true) {
      if (jj_2_5(2147483647)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(POW);
loc = new Location(token.beginLine, token.beginColumn);
      unaryPost(context);
context.generateCode(loc, org.spf4j.zel.instr.POW.INSTANCE);
    }
}

/**
 * Async invocation operator: &
 */
  final public void unaryPost(ParsingContext context) throws ParseException {Location loc = null;
 boolean asyncForce = false;
 int nrParams = 0;
    unary(context, true);
loc = new Location(token.beginLine, token.beginColumn);
    label_11:
    while (true) {
      switch (jj_nt.kind) {
      case LPAREN:
      case LBRACKET:
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_11;
      }
      if (jj_2_6(2)) {
        nrParams = params(context);
        switch (jj_nt.kind) {
        case SAND:{
          jj_consume_token(SAND);
asyncForce = true;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          ;
        }
if (asyncForce)  {
            context.generateCode(loc, new org.spf4j.zel.instr.CALLA(nrParams));
          } else {
            context.generateCode(loc, new org.spf4j.zel.instr.CALL(nrParams));
          }
      } else {
        switch (jj_nt.kind) {
        case LBRACKET:
        case DOT:{
          switch (jj_nt.kind) {
          case DOT:{
            jj_consume_token(DOT);
            jj_consume_token(ID);
context.generateCode(loc, new org.spf4j.zel.instr.DEREFX(token.image));
            break;
            }
          case LBRACKET:{
            jj_consume_token(LBRACKET);
            expression(context);
            jj_consume_token(RBRACKET);
context.generateCode(loc, org.spf4j.zel.instr.DEREF.INSTANCE);
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  final public void unary(ParsingContext context, boolean left) throws ParseException {Token x;
    switch (jj_nt.kind) {
    case MINUS:
    case NOT:{
      switch (jj_nt.kind) {
      case MINUS:{
        x = jj_consume_token(MINUS);
        break;
        }
      case NOT:{
        x = jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      element(context, left);
if ( x.kind == MINUS )
            {
                context.generateCode(new Location(x.beginLine, x.beginColumn), new PUSH(-1));
                context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.MUL.INSTANCE);
            }
            else
            {
                context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.NOT.INSTANCE);
            }
      break;
      }
    case PIPE:
    case LPAREN:
    case LBRACE:
    case MEMORY:
    case FUNCTION:
    case TRUE:
    case FALSE:
    case NULL:
    case E:
    case PI:
    case FIRST:
    case INTEGER:
    case FLOATING_POINT:
    case CHARACTER:
    case STRING:
    case MATCHEXP:
    case ID:{
      element(context, left);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void element(ParsingContext context, boolean left) throws ParseException {String name;
    int nre = 0;
    int nrParams = 0;
    switch (jj_nt.kind) {
    case MEMORY:
    case TRUE:
    case FALSE:
    case NULL:
    case E:
    case PI:
    case INTEGER:
    case FLOATING_POINT:
    case CHARACTER:
    case STRING:
    case MATCHEXP:{
      constant(context);
      break;
      }
    case ID:{
      jj_consume_token(ID);
name = token.image;
            if (left) {
                context.generateCode(new Location(token.beginLine, token.beginColumn),
                              new org.spf4j.zel.instr.LODX(name));
            }
      break;
      }
    case FUNCTION:{
      sysFunction(context);
      break;
      }
    case FIRST:{
      jj_consume_token(FIRST);
      nrParams = params(context);
context.generateCode(new Location(token.beginLine, token.beginColumn),
                                new org.spf4j.zel.instr.FIRST(nrParams));
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      expression(context);
      jj_consume_token(RPAREN);
      break;
      }
    case LBRACE:{
      jj_consume_token(LBRACE);
      switch (jj_nt.kind) {
      case MINUS:
      case PIPE:
      case NOT:
      case LPAREN:
      case LBRACE:
      case MEMORY:
      case FUNCTION:
      case TRUE:
      case FALSE:
      case NULL:
      case E:
      case PI:
      case FIRST:
      case INTEGER:
      case FLOATING_POINT:
      case CHARACTER:
      case STRING:
      case MATCHEXP:
      case ID:{
        expression(context);
nre++;
        label_12:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[35] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          expression(context);
nre++;
        }
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
context.generateCode(new Location(token.beginLine, token.beginColumn),
                            new org.spf4j.zel.instr.ARR(nre));
      break;
      }
    case PIPE:{
      jj_consume_token(PIPE);
      expression(context);
      jj_consume_token(PIPE);
context.generateCode(new Location(token.beginLine, token.beginColumn),
                        org.spf4j.zel.instr.ABS.INSTANCE);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public int params(ParsingContext context) throws ParseException {int i=0;
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case MINUS:
    case PIPE:
    case NOT:
    case LPAREN:
    case LBRACE:
    case MEMORY:
    case FUNCTION:
    case TRUE:
    case FALSE:
    case NULL:
    case E:
    case PI:
    case FIRST:
    case INTEGER:
    case FLOATING_POINT:
    case CHARACTER:
    case STRING:
    case MATCHEXP:
    case ID:{
      expression(context);
i++;
      label_13:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        expression(context);
i++;
      }
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return i;}
    throw new Error("Missing return statement in function");
}

  final public void constant(ParsingContext context) throws ParseException {
    switch (jj_nt.kind) {
    case TRUE:
    case FALSE:
    case NULL:
    case INTEGER:
    case FLOATING_POINT:
    case CHARACTER:
    case STRING:
    case MATCHEXP:{
      switch (jj_nt.kind) {
      case FLOATING_POINT:{
        jj_consume_token(FLOATING_POINT);
try {
                if (token.image.endsWith("f") || token.image.endsWith("F")) {
                    context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Float.parseFloat(token.image)));
                } else if (token.image.endsWith("d") || token.image.endsWith("D")) {
                    context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Double.parseDouble(token.image)));
                } else {
                    context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(new BigDecimal(token.image)));
                }
              } catch (NumberFormatException ee) {
                  {if (true) throw new ParseException(ee.toString());}
              }
        break;
        }
      case INTEGER:{
        jj_consume_token(INTEGER);
context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(parseInteger(token.image)));
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Boolean.valueOf(true)));
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Boolean.valueOf(false)));
        break;
        }
      case CHARACTER:{
        jj_consume_token(CHARACTER);
context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(token.image.substring(1, token.image.length()-1)));
        break;
        }
      case NULL:{
        jj_consume_token(NULL);
context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(ResultCache.NULL));
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(org.spf4j.base.Strings.unescape(token.image.substring(1, token.image.length()-1))));
        break;
        }
      case MATCHEXP:{
        jj_consume_token(MATCHEXP);
String rExp = token.image.substring(1, token.image.length()-1);
       context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(rExp));
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case E:{
      jj_consume_token(E);
context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Math.E));
      break;
      }
    case PI:{
      jj_consume_token(PI);
context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Math.PI));
      break;
      }
    case MEMORY:{
      jj_consume_token(MEMORY);
context.generateCode(new Location(token.beginLine, token.beginColumn), PUSHM.INSTANCE);
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  Number parseInteger(String intStr) throws ParseException {Number obj;
       if (intStr.endsWith("l") || intStr.endsWith("L")) {
             intStr = intStr.substring(0, intStr.length() - 1);
             try {
                obj= Long.decode(intStr);
             } catch(NumberFormatException  ex2) {
                obj= new BigInteger(intStr);
             }
       } else {
           try {
             obj = Integer.decode(intStr);
           } catch(NumberFormatException  e) {
             try {
                obj = Long.decode(intStr);
             } catch(NumberFormatException  ex2) {
                obj = new BigInteger(intStr);
             }
           }
       }
       return obj;
  }

  final public void sysFunction(ParsingContext context) throws ParseException {int count = 0;
    List parameterNames = new ArrayList();
    Program.Type pType = Program.Type.NONDETERMINISTIC;
    Program.ExecutionType eType = Program.ExecutionType.ASYNC;
    String staticName = null;
    String functionName = "";
    Token x;
    ParsingContext pc;
    x = jj_consume_token(FUNCTION);
    switch (jj_nt.kind) {
    case DETERMINISTIC:{
      jj_consume_token(DETERMINISTIC);
pType = Program.Type.DETERMINISTIC;
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case SYNC:
    case ASYNC:{
      switch (jj_nt.kind) {
      case SYNC:{
        jj_consume_token(SYNC);
eType = Program.ExecutionType.SYNC;
        break;
        }
      case ASYNC:{
        jj_consume_token(ASYNC);
eType = Program.ExecutionType.ASYNC;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case ID:{
      jj_consume_token(ID);
staticName = token.image;
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      jj_consume_token(ID);
parameterNames.add(token.image);
      label_14:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ID);
parameterNames.add(token.image);
      }
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case EQUAL:{
      jj_consume_token(EQUAL);
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    pc = programBlock(context);
ProgramBuilder p= pc.getProgramBuilder();
    p.setType(pType);
    p.setExecType(eType);
    try {
      if (staticName != null) {
          context.staticSymbol(staticName, null);
          functionName = staticName;
      } else {
          functionName = "anonFunc@" + (x.beginLine - 1);
      }
      Program prog = p.toProgram(functionName, source, parameterNames);
      if (staticName != null) {
          context.staticSymbol(staticName, prog);
      }
      context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(prog));
    } catch (CompileException e) {
        {if (true) throw new ParseException(e.toString());}
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(USE)) return true;
    if (jj_scan_token(DECIMAL)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(SYNC)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(POW)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(SLEEP)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_22()) return true;
    if (jj_scan_token(SWAP)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(SCL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  private boolean jj_3R_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(ASYNC)) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(SYNC)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(DETERMINISTIC)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(MEMORY)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(PI)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(E)) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(MATCHEXP)) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(FLOATING_POINT)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_65()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(PIPE)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(FIRST)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(CONDITION)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(CLM)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_scan_token(SCL)) return true;
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(SAND)) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SCL)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(POW)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ZCompilerTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[49];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x8080800,0x80000000,0x8080800,0x80000000,0x8080800,0x8080800,0x0,0x0,0x0,0x80000000,0x8080800,0x8080800,0x0,0x8080800,0x600,0x0,0x0,0x0,0x0,0x0,0x10000000,0x4050000,0x4050000,0x3f00000,0x3f00000,0x900,0x900,0x7000,0x7000,0x0,0x20000,0x0,0x0,0x8000800,0x8080800,0x0,0x8080800,0x80000,0x0,0x8080800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x53f97e05,0x4,0x53f97e05,0x4,0x53f97e05,0x53f97e05,0x40,0x0,0x40,0x0,0x53f97e05,0x53f97e05,0x4000000,0x41f84405,0x0,0x0,0x40,0x91,0x90,0x90,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x91,0x0,0x90,0x90,0x0,0x41f84405,0x40,0x41f84405,0x41f84405,0x40,0x41f84405,0x40380000,0x40f80400,0x8000,0x30000,0x30000,0x0,0x40,0x1,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0xf4,0x0,0xf4,0x0,0xf4,0xf4,0x0,0x80,0x0,0x0,0xf4,0xf4,0x0,0xf4,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf4,0x0,0xf4,0xf4,0x0,0xf4,0x74,0x74,0x0,0x0,0x0,0x80,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ZCompiler(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ZCompiler(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ZCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 49; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 49; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ZCompiler(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new ZCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 49; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ZCompilerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 49; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ZCompiler(ZCompilerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 49; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ZCompilerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 token.next = jj_nt = token_source.getNextToken();
	 jj_gen = 0;
	 for (int i = 0; i < 49; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken = token;
	 if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
	 else jj_nt = jj_nt.next = token_source.getNextToken();
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 jj_nt = token;
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
	 else jj_nt = jj_nt.next = token_source.getNextToken();
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[74];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 49; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 74; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 6; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
