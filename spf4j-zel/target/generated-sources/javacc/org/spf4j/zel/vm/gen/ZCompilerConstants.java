/* Generated By:JavaCC: Do not edit this line. ZCompilerConstants.java */
package org.spf4j.zel.vm.gen;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ZCompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int COMMENT_END = 6;
  /** RegularExpression Id. */
  int COMMENT_START = 7;
  /** RegularExpression Id. */
  int PLUS = 8;
  /** RegularExpression Id. */
  int INC = 9;
  /** RegularExpression Id. */
  int DEC = 10;
  /** RegularExpression Id. */
  int MINUS = 11;
  /** RegularExpression Id. */
  int MULTIPLY = 12;
  /** RegularExpression Id. */
  int DIVIDE = 13;
  /** RegularExpression Id. */
  int MOD = 14;
  /** RegularExpression Id. */
  int POW = 15;
  /** RegularExpression Id. */
  int AND = 16;
  /** RegularExpression Id. */
  int SAND = 17;
  /** RegularExpression Id. */
  int OR = 18;
  /** RegularExpression Id. */
  int PIPE = 19;
  /** RegularExpression Id. */
  int GT = 20;
  /** RegularExpression Id. */
  int LT = 21;
  /** RegularExpression Id. */
  int LE = 22;
  /** RegularExpression Id. */
  int GE = 23;
  /** RegularExpression Id. */
  int EQ = 24;
  /** RegularExpression Id. */
  int NEQ = 25;
  /** RegularExpression Id. */
  int XOR = 26;
  /** RegularExpression Id. */
  int NOT = 27;
  /** RegularExpression Id. */
  int CONDITION = 28;
  /** RegularExpression Id. */
  int CLM = 29;
  /** RegularExpression Id. */
  int EQUAL = 30;
  /** RegularExpression Id. */
  int SCL = 31;
  /** RegularExpression Id. */
  int LPAREN = 32;
  /** RegularExpression Id. */
  int RPAREN = 33;
  /** RegularExpression Id. */
  int LBRACE = 34;
  /** RegularExpression Id. */
  int RBRACE = 35;
  /** RegularExpression Id. */
  int LBRACKET = 36;
  /** RegularExpression Id. */
  int RBRACKET = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int DOT = 39;
  /** RegularExpression Id. */
  int CONTEXT = 40;
  /** RegularExpression Id. */
  int RETURN = 41;
  /** RegularExpression Id. */
  int MEMORY = 42;
  /** RegularExpression Id. */
  int SLEEP = 43;
  /** RegularExpression Id. */
  int THROW = 44;
  /** RegularExpression Id. */
  int FOR = 45;
  /** RegularExpression Id. */
  int FUNCTION = 46;
  /** RegularExpression Id. */
  int DETERMINISTIC = 47;
  /** RegularExpression Id. */
  int SYNC = 48;
  /** RegularExpression Id. */
  int ASYNC = 49;
  /** RegularExpression Id. */
  int ARG = 50;
  /** RegularExpression Id. */
  int TRUE = 51;
  /** RegularExpression Id. */
  int FALSE = 52;
  /** RegularExpression Id. */
  int NULL = 53;
  /** RegularExpression Id. */
  int E = 54;
  /** RegularExpression Id. */
  int PI = 55;
  /** RegularExpression Id. */
  int FIRST = 56;
  /** RegularExpression Id. */
  int IF = 57;
  /** RegularExpression Id. */
  int ELSE = 58;
  /** RegularExpression Id. */
  int SWAP = 59;
  /** RegularExpression Id. */
  int USE = 60;
  /** RegularExpression Id. */
  int DECIMAL = 61;
  /** RegularExpression Id. */
  int INTEGER = 62;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 63;
  /** RegularExpression Id. */
  int HEX_LITERAL = 64;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 65;
  /** RegularExpression Id. */
  int FLOATING_POINT = 66;
  /** RegularExpression Id. */
  int EXPONENT = 67;
  /** RegularExpression Id. */
  int CHARACTER = 68;
  /** RegularExpression Id. */
  int STRING = 69;
  /** RegularExpression Id. */
  int MATCHEXP = 70;
  /** RegularExpression Id. */
  int ID = 71;
  /** RegularExpression Id. */
  int LETTER = 72;
  /** RegularExpression Id. */
  int DIGIT = 73;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"/*\"",
    "\"+\"",
    "\"++\"",
    "\"--\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"**\"",
    "\"&&\"",
    "\"&\"",
    "\"||\"",
    "\"|\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"^\"",
    "\"!\"",
    "\"?\"",
    "\":\"",
    "\"=\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\".\"",
    "\"context\"",
    "<RETURN>",
    "<MEMORY>",
    "\"sleep\"",
    "\"throw\"",
    "\"for\"",
    "<FUNCTION>",
    "<DETERMINISTIC>",
    "\"sync\"",
    "\"async\"",
    "\"arg\"",
    "\"true\"",
    "\"false\"",
    "<NULL>",
    "\"E\"",
    "\"PI\"",
    "\"first\"",
    "\"if\"",
    "\"else\"",
    "<SWAP>",
    "\"use\"",
    "<DECIMAL>",
    "<INTEGER>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT>",
    "<EXPONENT>",
    "<CHARACTER>",
    "<STRING>",
    "<MATCHEXP>",
    "<ID>",
    "<LETTER>",
    "<DIGIT>",
  };

}
