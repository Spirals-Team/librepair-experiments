/* ZCompilerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ZCompilerTokenManager.java */
package org.spf4j.zel.vm.gen;
import java.util.*;
import java.math.*;
import java.nio.charset.Charset;
import org.spf4j.zel.vm.*;
import org.spf4j.zel.instr.*;
import org.spf4j.zel.vm.ParsingContext.Location;
import java.io.InputStream;

/** Token Manager. */
public class ZCompilerTokenManager implements ZCompilerConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000L) != 0L)
            return 10;
         if ((active0 & 0x2080L) != 0L)
            return 0;
         if ((active0 & 0x40000000000000L) != 0L)
            return 43;
         if ((active0 & 0x168f190000000000L) != 0L)
         {
            jjmatchedKind = 71;
            return 43;
         }
         if ((active0 & 0x110200000000000L) != 0L)
         {
            jjmatchedKind = 71;
            return 80;
         }
         if ((active0 & 0x600000L) != 0L)
            return 65;
         return -1;
      case 1:
         if ((active0 & 0x280000000000000L) != 0L)
            return 43;
         if ((active0 & 0x151f390000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
            return 43;
         }
         if ((active0 & 0x400000L) != 0L)
            return 64;
         return -1;
      case 2:
         if ((active0 & 0x1004200000000000L) != 0L)
            return 43;
         if ((active0 & 0x51b190000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
            return 43;
         }
         return -1;
      case 3:
         if ((active0 & 0x409000000000000L) != 0L)
            return 43;
         if ((active0 & 0x112190000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
            return 43;
         }
         return -1;
      case 4:
         if ((active0 & 0x112180000000000L) != 0L)
            return 43;
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
            return 43;
         }
         return -1;
      case 5:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
            return 43;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 37:
         return jjStopAtPos(0, 14);
      case 38:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 40:
         return jjStopAtPos(0, 32);
      case 41:
         return jjStopAtPos(0, 33);
      case 42:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x8040L);
      case 43:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 44:
         return jjStopAtPos(0, 38);
      case 45:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 46:
         return jjStartNfaWithStates_0(0, 39, 10);
      case 47:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 58:
         return jjStopAtPos(0, 29);
      case 59:
         return jjStopAtPos(0, 31);
      case 60:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 61:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 62:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 63:
         return jjStopAtPos(0, 28);
      case 69:
         return jjStartNfaWithStates_0(0, 54, 43);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 91:
         return jjStopAtPos(0, 36);
      case 93:
         return jjStopAtPos(0, 37);
      case 94:
         return jjStopAtPos(0, 26);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x6000000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x110200000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1080000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8100000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L);
      case 123:
         return jjStopAtPos(0, 34);
      case 124:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 125:
         return jjStopAtPos(0, 35);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 43:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 45:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 61:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 64);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 73:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 43);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 102:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 43);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400080000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x210000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x1002000000000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L);
      case 124:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 103:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 43);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1010000000000L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x100100000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 43);
         break;
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 43);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x110000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 43);
         break;
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 112:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 43);
         break;
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 43);
         break;
      case 119:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 123;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 65:
                  if (curChar == 61)
                     { jjCheckNAdd(64); }
                  else if (curChar == 45)
                     { jjCheckNAdd(64); }
                  break;
               case 80:
               case 43:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(43); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 6); }
                  else if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  else if (curChar == 60)
                     { jjAddStates(10, 11); }
                  else if (curChar == 36)
                  {
                     if (kind > 71)
                        kind = 71;
                     { jjCheckNAdd(43); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(10); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAddTwoStates(7, 8); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAddStates(12, 14); }
                  }
                  else if (curChar == 39)
                     { jjAddStates(15, 16); }
                  break;
               case 0:
                  if (curChar == 47)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if (curChar == 46)
                     { jjCheckNAdd(10); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddStates(20, 22); }
                  break;
               case 12:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 15:
                  if (curChar == 39)
                     { jjAddStates(15, 16); }
                  break;
               case 16:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if (curChar == 39 && kind > 68)
                     kind = 68;
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(21, 17); }
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(21); }
                  break;
               case 24:
               case 27:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 25:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 28:
                  if ((0x8400000000L & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 26); }
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 31:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(30); }
                  break;
               case 34:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 36:
                  if (curChar == 34)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 40:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(39); }
                  break;
               case 42:
                  if (curChar != 36)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(43); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 6); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  break;
               case 46:
                  if (curChar != 46)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(50); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddTwoStates(50, 14); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(51, 52); }
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddTwoStates(54, 14); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(58); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(58, 14); }
                  break;
               case 59:
                  if (curChar != 48)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAddStates(12, 14); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAddTwoStates(61, 8); }
                  break;
               case 62:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAddTwoStates(62, 8); }
                  break;
               case 63:
                  if (curChar == 60)
                     { jjAddStates(10, 11); }
                  break;
               case 64:
                  if (curChar == 62 && kind > 59)
                     kind = 59;
                  break;
               case 66:
                  if (curChar == 61)
                     { jjCheckNAdd(64); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 80:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     { jjCheckNAdd(43); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     { jjCheckNAdd(43); }
                  }
                  else if (curChar == 96)
                     { jjCheckNAddStates(27, 29); }
                  if (curChar == 100)
                     { jjAddStates(40, 43); }
                  else if (curChar == 114)
                     { jjAddStates(44, 45); }
                  else if (curChar == 109)
                     { jjAddStates(46, 47); }
                  else if (curChar == 102)
                     { jjAddStates(48, 49); }
                  else if (curChar == 110)
                     { jjAddStates(50, 51); }
                  break;
               case 1:
                  { jjAddStates(17, 19); }
                  break;
               case 8:
                  if ((0x100000001000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(52, 53); }
                  break;
               case 14:
                  if ((0x5000000050L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 18:
                  if (curChar == 92)
                     { jjAddStates(54, 56); }
                  break;
               case 19:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 25:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 26:
                  if (curChar == 92)
                     { jjAddStates(57, 59); }
                  break;
               case 27:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 33:
                  if (curChar == 96)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 34:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 35:
                  if (curChar == 92)
                     { jjAddStates(60, 62); }
                  break;
               case 36:
                  if ((0x14404510000000L & l) != 0L)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 37:
                  if (curChar == 96 && kind > 70)
                     kind = 70;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(43); }
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(43); }
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(63, 64); }
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(65, 66); }
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(67, 68); }
                  break;
               case 60:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(61); }
                  break;
               case 61:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAddTwoStates(61, 8); }
                  break;
               case 67:
                  if (curChar == 110)
                     { jjAddStates(50, 51); }
                  break;
               case 68:
                  if (curChar == 108 && kind > 53)
                     kind = 53;
                  break;
               case 69:
               case 71:
                  if (curChar == 108)
                     { jjCheckNAdd(68); }
                  break;
               case 70:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 72:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 102)
                     { jjAddStates(48, 49); }
                  break;
               case 74:
                  if (curChar == 110 && kind > 46)
                     kind = 46;
                  break;
               case 75:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 81:
                  if (curChar == 99 && kind > 46)
                     kind = 46;
                  break;
               case 82:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 109)
                     { jjAddStates(46, 47); }
                  break;
               case 85:
                  if (curChar == 121 && kind > 42)
                     kind = 42;
                  break;
               case 86:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 109 && kind > 42)
                     kind = 42;
                  break;
               case 91:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 114)
                     { jjAddStates(44, 45); }
                  break;
               case 93:
                  if (curChar == 110 && kind > 41)
                     kind = 41;
                  break;
               case 94:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 116 && kind > 41)
                     kind = 41;
                  break;
               case 99:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 100)
                     { jjAddStates(40, 43); }
                  break;
               case 101:
                  if (curChar == 99 && kind > 47)
                     kind = 47;
                  break;
               case 102:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 116 && kind > 47)
                     kind = 47;
                  break;
               case 114:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 108 && kind > 61)
                     kind = 61;
                  break;
               case 116:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 99 && kind > 61)
                     kind = 61;
                  break;
               case 122:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 80:
               case 43:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(43); }
                  break;
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(43); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(17, 19); }
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(7, 9); }
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(27, 29); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 123 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\52\57", null, "\53", "\53\53", "\55\55", 
"\55", "\52", "\57", "\45", "\52\52", "\46\46", "\46", "\174\174", "\174", "\76", 
"\74", "\74\75", "\76\75", "\75\75", "\41\75", "\136", "\41", "\77", "\72", "\75", 
"\73", "\50", "\51", "\173", "\175", "\133", "\135", "\54", "\56", 
"\143\157\156\164\145\170\164", null, null, "\163\154\145\145\160", "\164\150\162\157\167", "\146\157\162", 
null, null, "\163\171\156\143", "\141\163\171\156\143", "\141\162\147", 
"\164\162\165\145", "\146\141\154\163\145", null, "\105", "\120\111", "\146\151\162\163\164", 
"\151\146", "\145\154\163\145", null, "\165\163\145", null, null, null, null, null, null, 
null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   45, 46, 51, 52, 55, 56, 14, 25, 26, 28, 65, 66, 60, 62, 8, 16, 
   18, 1, 2, 4, 10, 11, 14, 25, 26, 30, 28, 34, 35, 37, 34, 35, 
   39, 37, 47, 48, 14, 55, 56, 14, 112, 114, 120, 122, 97, 99, 89, 91, 
   80, 83, 70, 72, 12, 13, 19, 20, 22, 27, 29, 31, 36, 38, 40, 49, 
   50, 53, 54, 57, 58, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*currently commented contents are dropped, but they can be attached to the special token*/
        do {
            Token nextToken = this.getNextToken();
            if (nextToken.kind == EOF || "*/".equals(nextToken.image)) {
                        break;
            }
        } while (true);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ZCompilerTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ZCompilerTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(JavaCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 123; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7fffffffffffff41L, 0xf4L, 
};
static final long[] jjtoSkip = {
   0xbeL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x80L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[123];
    private final int[] jjstateSet = new int[2 * 123];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
